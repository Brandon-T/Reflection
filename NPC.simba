type
  TNPC = record
    ID: Int32;
    Name: String;
    CombatLevel: Int32;
    Actions: Array of String;
    Tile: RSTile;
    AnimationId: Int32;
    Orientation: Int32;
    Health: Int32;
    InteractingIndex: Int32;
    Visible: Boolean;
  end;

{*
R_GetNPCs
~~~~~~~~~~~~~~~~~~~~~~
Returns an array of TNPC containing all visible NPCs.

Example:
  AllNPCs := R_GetNPCs;
*}
Function R_GetNPCs: Array of TNPC;
var
  I: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ref <> nil then
    begin
      Result[I].ID := Definition.ID;
      Result[I].Name := Definition.Name;
      Result[I].Actions := Definition.Actions;
      Result[I].Tile := NPCs[I].Tile;
      Result[I].AnimationID := NPCs[I].AnimationId;
      Result[I].Orientation := NPCs[I].Orientation;
      Result[I].Health := NPCs[I].Health;
      Result[I].InteractingIndex := NPCs[I].InteractingIndex;
      Result[I].Visible := Definition.IsVisible;
      Definition.Free;
    end;
  end;

  RSTypeArray(NPCs).Free;
end;

{*
R_GetNPCs
~~~~~~~~~~~~~~~~~~~~~~
Returns an array of TNPC containing all visible NPCs of the specified ID.

Example:
  Goblins := R_GetNPCs(1546);
*}
Function R_GetNPCs(ID: Int32): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ref <> nil then
    begin
      Result[J].ID := Definition.ID;

      if Result[J].ID = ID then
      begin
        Result[J].Name := Definition.Name;
        Result[J].Actions := Definition.Actions;
        Result[J].Tile := NPCs[I].Tile;
        Result[J].AnimationID := NPCs[I].AnimationId;
        Result[J].Orientation := NPCs[I].Orientation;
        Result[J].Health := NPCs[I].Health;
        Result[J].InteractingIndex := NPCs[I].InteractingIndex;
        Result[J].Visible := Definition.IsVisible;
        Inc(J);
      end;
      Definition.Free;
    end;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;

{*
R_GetNPCs
~~~~~~~~~~~~~~~~~~~~~~
Returns an array of TNPC containing all visible NPCs with a name matching the
  specified string.

Example:
  Goblins := R_GetNPCs('Goblins');
*}
Function R_GetNPCs(Name: String): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ref <> nil then
    begin
      Result[J].Name := Definition.Name;

      if Result[J].Name = Name then
      begin
        Result[J].ID := Definition.ID;
        Result[J].Actions := Definition.Actions;
        Result[J].Tile := NPCs[I].Tile;
        Result[J].AnimationID := NPCs[I].AnimationId;
        Result[J].Orientation := NPCs[I].Orientation;
        Result[J].Health := NPCs[I].Health;
        Result[J].InteractingIndex := NPCs[I].InteractingIndex;
        Result[J].Visible := Definition.IsVisible;
        Inc(J);
      end;
      Definition.Free;
    end;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;

{*
R_GetNPCs
~~~~~~~~~~~~~~~~~~~~~~
Returns an array of TNPC containing all visible NPCs on a specific tile.

Example:
  Jad := R_GetNPCs([2536, 3265]);
*}
Function R_GetNPCs(Tile: RSTile): Array of TNPC; overload;
var
  I, J: Int32;
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
begin
  NPCs := RSNPC.AllNPCs;
  SetLength(Result, Length(NPCs));

  For I := 0 to High(NPCs) do
  begin
    Result[J].Tile := NPCs[I].Tile;

    if Result[J].Tile = Tile then
    begin
      Definition := NPCs[I].Definition;
      if Definition.ref <> nil then
      begin
        Result[J].ID := Definition.ID;
        Result[J].Name := Definition.Name;
        Result[J].Actions := Definition.Actions;
        Result[J].Tile := NPCs[I].Tile;
        Result[J].AnimationID := NPCs[I].AnimationId;
        Result[J].Orientation := NPCs[I].Orientation;
        Result[J].Health := NPCs[I].Health;
        Result[J].InteractingIndex := NPCs[I].InteractingIndex;
        Result[J].Visible := Definition.IsVisible;
        Definition.Free;
        Inc(J);
      end;
    end;
  end;

  RSTypeArray(NPCs).Free;
  SetLength(Result, J);
end;

function R_DismissRandoms(TakeLamp: Boolean = True) : Boolean;
var
  AllNPCs : array of RSNPC;
  EachNPC : RSNPC;
  NPCTPA : TPointArray;
  EachNPCDef: RSNPCDefinition;
  MyName: String;
begin
  AllNPCs := RSNPC.AllNPCs;
  MyName := RSPlayer.Me.Name;
  for EachNPC in AllNPCs do begin
    EachNPCDef := EachNPC.Definition;
    if (EachNPC.SpokenText <> '') and (MyName in EachNPC.SpokenText) then begin
      Wait(1200, 5000);
      NPCTPA := EachNPC.ToTPA;
      Mouse.Move(MiddleTPA(NPCTPA), 5, true);
      if TakeLamp and (EachNPCDef.Name = 'Genie') then begin
        Mouse.Click(MOUSE_LEFT);
        Result := True;
      end else begin
        Mouse.Click(MOUSE_RIGHT);
        Wait(200, 300);
        Result := R_WaitChooseOptions(['Dismiss ' + EachNPCDef.Name], false, 3000);
      end;
    end;
    EachNPCDef.Free;
  end;
  RSTypeArray(AllNPCs).Free;
end;
