{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}

type
  TRSInventoryItem = record
    ID: Int32;
    Amount: Int32;
    Slot: Int32;
    Bounds: TBox;
  end;

Function R_GetInventoryWidgetID: RWidget;
begin
  if RSWidget.IsValid(R_BANK_INVENTORY_ITEM_CONTAINER.Group) then
    Exit(R_BANK_INVENTORY_ITEM_CONTAINER);

  if RSWidget.IsValid(R_BACKPACK_INVENTORY_ITEM_CONTAINER.Group) then
    Exit(R_BACKPACK_INVENTORY_ITEM_CONTAINER);

  Result.Group := -1;
  Result.Child := -1;
end;

Function R_GetInventoryItem(ID: Int32): Array of TRSInventoryItem;
var
  Item: RSWidget;
  Children: Array of RSWidget;
  InventoryID: RWidget;
  ItemIDs, StackSizes: Array of Int32;
  I, J, ChildID, Columns, Row, Column: Int32;
  Location: TPoint;
const
  XPadding = 10;
  YPadding = 4;
  ItemSlotSize = 32;
  InvalidBankItemID = 6512;
begin
  if ID < 0 then
    Exit;

  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Item := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Item.ref <> nil then
  begin
    if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
    begin
      ItemIDs := Item.InventoryIDs;
      StackSizes := Item.StackSizes;
      SetLength(Result, Length(ItemIDs));

      for I := 0 to High(ItemIDs) do
      begin
        ItemIDs[I] -= 1;
        if ItemIDs[I] = ID then
        begin
          Columns := Item.Width;
          Row := I div Columns;
		      Column := I mod Columns;
          Location := Item.AbsoluteLocation;

          Result[J].ID := ItemIDs[I];
          Result[J].Amount := StackSizes[I];
          Result[J].Slot := I;
		      Result[J].Bounds.X1 := Location.X + ((ItemSlotSize + XPadding) * Column);
		      Result[J].Bounds.Y1 := Location.Y + ((ItemSlotSize + YPadding) * Row);
          Result[J].Bounds.X2 := Result[J].Bounds.X1 + ItemSlotSize;
          Result[J].Bounds.Y2 := Result[J].Bounds.Y1 + ItemSlotSize;
          Inc(J);
        end;
      end;
      SetLength(Result, J);
    end else
      begin
        Children := Item.Children;
        SetLength(Result, Length(Children));

        for I := 0 to High(Children) do
        begin
          ChildID := Children[I].ItemID;
          if ChildID = ID then
          begin
            Result[J].ID := ChildID;
            Result[J].Amount := Children[I].ItemAmount;
            Result[J].Slot := I;
		        Result[J].Bounds := Children[I].Bounds;
            if Result[J].ID = InvalidBankItemID then
              Result[J].ID := -1;

            Inc(J);
          end;
        end;

        RSTypeArray(Children).Free;
        SetLength(Result, J);
      end;

    Item.Free;
  end;
end;

Function R_GetInventorySlotItem(Index: Int32): TRSInventoryItem;
var
  Item, Child: RSWidget;
  InventoryID: RWidget;
  Columns, Row, Column: Int32;
  Location: TPoint;
const
  XPadding = 10;
  YPadding = 4;
  ItemSlotSize = 32;
  InvalidBankItemID = 6512;
begin
  Result.ID := -1;
  if (Index < 0) or (Index > 27) then
    Exit;

  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Item := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Item.ref <> nil then
  begin
    if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
    begin
      Columns := Item.Width;
      Row := Index div Columns;
		  Column := Index mod Columns;
      Location := Item.AbsoluteLocation;

      Result.ID := Item.InventoryIDs[Index] - 1;
      Result.Amount := Item.StackSizes[Index];
      Result.Slot := Index;
		  Result.Bounds.X1 := Location.X + ((ItemSlotSize + XPadding) * Column);
		  Result.Bounds.Y1 := Location.Y + ((ItemSlotSize + YPadding) * Row);
      Result.Bounds.X2 := Result.Bounds.X1 + ItemSlotSize;
      Result.Bounds.Y2 := Result.Bounds.Y1 + ItemSlotSize;
    end else
      begin
        Child := Item.Child(Index);
        Result.ID := Child.ItemID;
        Result.Amount := Child.ItemAmount;
        Result.Slot := Index;
		    Result.Bounds := Child.Bounds;

        if Result.ID = InvalidBankItemID then
          Result.ID := -1;

        Child.Free;
      end;

    Item.Free;
  end;
end;

Function R_GetAllInventoryItems: Array of TRSInventoryItem;
var
  Item: RSWidget;
  Children: Array of RSWidget;
  InventoryID: RWidget;
  ItemIDs, StackSizes: Array of Int32;
  I, J, ChildID, Columns, Row, Column: Int32;
  Location: TPoint;
const
  XPadding = 10;
  YPadding = 4;
  ItemSlotSize = 32;
  InvalidBankItemID = 6512;
begin
  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Item := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Item.ref <> nil then
  begin
    if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
    begin
      ItemIDs := Item.InventoryIDs;
      StackSizes := Item.StackSizes;
      SetLength(Result, Length(ItemIDs));

      for I := 0 to High(ItemIDs) do
      begin
        ItemIDs[I] -= 1;
        if ItemIDs[I] <> -1 then
        begin
          Columns := Item.Width;
          Row := I div Columns;
		      Column := I mod Columns;
          Location := Item.AbsoluteLocation;

          Result[J].ID := ItemIDs[I];
          Result[J].Amount := StackSizes[I];
          Result[J].Slot := I;
		      Result[J].Bounds.X1 := Location.X + ((ItemSlotSize + XPadding) * Column);
		      Result[J].Bounds.Y1 := Location.Y + ((ItemSlotSize + YPadding) * Row);
          Result[J].Bounds.X2 := Result[J].Bounds.X1 + ItemSlotSize;
          Result[J].Bounds.Y2 := Result[J].Bounds.Y1 + ItemSlotSize;
          Inc(J);
        end;
      end;
      SetLength(Result, J);
    end else
      begin
        Children := Item.Children;
        SetLength(Result, Length(Children));

        for I := 0 to High(Children) do
        begin
          ChildID := Children[I].ItemID;
          if ChildID = InvalidBankItemID then
            ChildID := -1;

          if ChildID <> -1 then
          begin
            Result[J].ID := ChildID;
            Result[J].Amount := Children[I].ItemAmount;
            Result[J].Slot := I;
		        Result[J].Bounds := Children[I].Bounds;
            Inc(J);
          end;
        end;

        RSTypeArray(Children).Free;
        SetLength(Result, J);
      end;

    Item.Free;
  end;
end;
