{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}

type
  TRSInventoryItem = record
    ID: Int32;
    Amount: Int32;
    Slot: Int32;
    Bounds: TBox;
  end;

const
  InventoryXPadding = 10; //Widget XYPadding
  InventoryYPadding = 4;
  ItemSlotSize = 32;      //InventoryWidget.Child(Index).Size


Function R_GetInventoryWidgetID: RWidget;
begin
  if RSWidget.IsValid(R_BANK_INVENTORY_ITEM_CONTAINER.Group) then
    Exit(R_BANK_INVENTORY_ITEM_CONTAINER);

  if RSWidget.IsValid(R_BACKPACK_INVENTORY_ITEM_CONTAINER.Group) then
    Exit(R_BACKPACK_INVENTORY_ITEM_CONTAINER);

  Result.Group := -1;
  Result.Child := -1;
end;

Function R_InventoryCount: Int32;
var
  I: Int32;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs: Array of Int32;
begin
  Result := 0;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    ItemNode.ref := ItemNodeCache.GetObject(93).ref;

    if ItemNode.ref <> nil then
    begin
      ItemIDs := ItemNode.ItemIDs;
      for I := 0 to High(ItemIDs) do
        if ItemIDs[I] <> -1 then
          Inc(Result);
      ItemNode.Free;
    end;
    ItemNodeCache.Free;
  end;
end;

Function R_CountInventoryItem(ID: Int32): Int32;
var
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  I: Int32;
begin
  Result := 0;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    ItemNode.ref := ItemNodeCache.GetObject(93).ref;

    if ItemNode.ref <> nil then
    begin
      ItemIDs := ItemNode.ItemIDs;
      ItemQuantities := ItemNode.ItemQuantities;

      for I := 0 to high(ItemIDs) do
      begin
        if ItemIDs[I] = ID then
          Inc(Result, ItemQuantities[I]);
      end;
      ItemNode.Free;
    end;
    ItemNodeCache.Free;
  end;
end;

Function R_GetInventoryItem(ID: Int32): Array of TRSInventoryItem;
var
  InventoryID: RWidget;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  I, J, Columns, Row, Column: Int32;
  Widget, Child: RSWidget;
  Location: TPoint;
  Garbage: RSTypeArray;
begin
  if ID < 0 then
    Exit;

  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Widget := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Widget.ref = nil then
    Exit;

  Garbage += Widget;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    Garbage += ItemNodeCache;
    ItemNode.ref := ItemNodeCache.GetObject(93).ref;

    if ItemNode.ref <> nil then
    begin
      Garbage += ItemNode;
      ItemIDs := ItemNode.ItemIDs;
      ItemQuantities := ItemNode.ItemQuantities;

      SetLength(Result, Length(ItemIDs));
      for I := 0 to high(ItemIDs) do
      begin
        if ItemIDs[I] = ID then
        begin
          if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
          begin
            Columns := Widget.Width;
            Row := I div Columns;
		        Column := I mod Columns;
            Location := Widget.AbsoluteLocation;

            Result[J].ID := ID;
            Result[J].Slot := I;
            Result[J].Amount := ItemQuantities[I];
            Result[J].Bounds.X1 := Location.X + ((ItemSlotSize + InventoryXPadding) * Column);
		        Result[J].Bounds.Y1 := Location.Y + ((ItemSlotSize + InventoryYPadding) * Row);
            Result[J].Bounds.X2 := Result[J].Bounds.X1 + ItemSlotSize;
            Result[J].Bounds.Y2 := Result[J].Bounds.Y1 + ItemSlotSize;
            Inc(J);
          end else
            begin
              Child := Widget.Child(I);
              if Child.ref <> nil then
              begin
                Garbage += Child;
                Result[J].ID := ID;
                Result[J].Slot := I;
                Result[J].Amount := ItemQuantities[I];
		            Result[J].Bounds := Child.Bounds;
                Inc(J);
              end;
            end;
        end;
      end;
      SetLength(Result, J);
    end;
  end;

  Garbage.Free;
end;

Function R_GetInventorySlotItem(Index: Int32): TRSInventoryItem;
var
  InventoryID: RWidget;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  Columns, Row, Column: Int32;
  Widget, Child: RSWidget;
  Location: TPoint;
  Garbage: RSTypeArray;
begin
  Result.ID := -1;
  Result.Amount := -1;
  Result.Slot := -1;

  if (Index < 0) or (Index > 27) then
    Exit;

  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Widget := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Widget.ref = nil then
    Exit;

  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    Garbage += ItemNodeCache;
    ItemNode.ref := ItemNodeCache.GetObject(93).ref;

    if ItemNode.ref <> nil then
    begin
      Garbage += ItemNode;
      ItemIDs := ItemNode.ItemIDs;

      if Index < Length(ItemIDs) then
      begin
        if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
        begin
          Columns := Widget.Width;
          Row := Index div Columns;
		      Column := Index mod Columns;
          Location := Widget.AbsoluteLocation;

          ItemQuantities := ItemNode.ItemQuantities;
          Result.ID := ItemIDs[Index];
          Result.Slot := Index;
          Result.Amount := ItemQuantities[Index];
          Result.Bounds.X1 := Location.X + ((ItemSlotSize + InventoryXPadding) * Column);
		      Result.Bounds.Y1 := Location.Y + ((ItemSlotSize + InventoryYPadding) * Row);
          Result.Bounds.X2 := Result.Bounds.X1 + ItemSlotSize;
          Result.Bounds.Y2 := Result.Bounds.Y1 + ItemSlotSize;
        end else
          begin
            Child := Widget.Child(Index);
            if Child.ref <> nil then
            begin
              Garbage += Child;
              Result.ID := ItemIDs[Index];
              Result.Slot := Index;
              Result.Amount := Child.ItemAmount;
		          Result.Bounds := Child.Bounds;
            end;
          end;
      end;
    end;
  end;

  Garbage.Free;
end;

Function R_GetAllInventoryItems: Array of TRSInventoryItem;
var
  InventoryID: RWidget;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  I, J, Columns, Row, Column: Int32;
  Widget, Child: RSWidget;
  Location: TPoint;
  Garbage: RSTypeArray;
begin
  InventoryID := R_GetInventoryWidgetID;
  if InventoryID.Group = -1 then
    Exit;

  Widget := RSWidget.Get(InventoryID.Group, InventoryID.Child);
  if Widget.ref = nil then
    Exit;

  Garbage += Widget;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    Garbage += ItemNodeCache;
    ItemNode.ref := ItemNodeCache.GetObject(93).ref;

    if ItemNode.ref <> nil then
    begin
      Garbage += ItemNode;
      ItemIDs := ItemNode.ItemIDs;
      ItemQuantities := ItemNode.ItemQuantities;

      SetLength(Result, Length(ItemIDs));
      for I := 0 to high(ItemIDs) do
      begin
        if ItemIDs[I] <> -1 then
        begin
          if InventoryID = R_BACKPACK_INVENTORY_ITEM_CONTAINER then
          begin
            Columns := Widget.Width;
            Row := I div Columns;
		        Column := I mod Columns;
            Location := Widget.AbsoluteLocation;

            Result[J].ID := ItemIDs[I];
            Result[J].Slot := I;
            Result[J].Amount := ItemQuantities[I];
            Result[J].Bounds.X1 := Location.X + ((ItemSlotSize + InventoryXPadding) * Column);
		        Result[J].Bounds.Y1 := Location.Y + ((ItemSlotSize + InventoryYPadding) * Row);
            Result[J].Bounds.X2 := Result[J].Bounds.X1 + ItemSlotSize;
            Result[J].Bounds.Y2 := Result[J].Bounds.Y1 + ItemSlotSize;
            Inc(J);
          end else
            begin
              Child := Widget.Child(I);
              if Child.ref <> nil then
              begin
                Garbage += Child;
                Result[J].ID := ItemIDs[I];
                Result[J].Slot := I;
                Result[J].Amount := ItemQuantities[I];
		            Result[J].Bounds := Child.Bounds;
                Inc(J);
              end;
            end;
        end;
      end;
      SetLength(Result, J);
    end;
  end;

  Garbage.Free;
end;
