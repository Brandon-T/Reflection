{$include_once Hooks.simba}
{$IFNDEF FUNCTIONS}
{$DEFINE FUNCTIONS}

// MARK: - OBJECT

Function RGetObject(eios: Pointer; instance: Pointer; constref hook: THook): Pointer;
begin
  Result := RIGetObject(eios, instance, PRIField(@hook));
end;

Procedure RFreeObject(eios: Pointer; instance: Pointer);
begin
  RIReleaseObject(eios, instance);
end;

Procedure RFreeObjects(eios: Pointer; constref instances: array of Pointer);
begin
  RIReleaseObjects(eios, instances);
end;


// MARK: - SINGLE ELEMENTS

Function RGetBool(eios: Pointer; instance: Pointer; constref hook: THook): Boolean;
begin
  result := RIGetBool(eios, instance, PRIField(@hook));
end;

Function RGetChar(eios: Pointer; instance: Pointer; constref hook: THook): Char;
begin
  result := RIGetChar(eios, instance, PRIField(@hook));
end;

Function RGetByte(eios: Pointer; instance: Pointer; constref hook: THook): Byte;
begin
  result := RIGetByte(eios, instance, PRIField(@hook));
end;

Function RGetShort(eios: Pointer; instance: Pointer; constref hook: THook): Int16;
begin
  result := RIGetShort(eios, instance, PRIField(@hook));
end;

Function RGetInt(eios: Pointer; instance: Pointer; constref hook: THook): Int32;
begin
  result := RIGetInt(eios, instance, PRIField(@hook)) * Int32(hook.multiplier);
end;

Function RGetLong(eios: Pointer; instance: Pointer; constref hook: THook): Int64;
begin
  result := RIGetLong(eios, instance, PRIField(@hook)) * Int64(hook.multiplier);
end;

Function RGetFloat(eios: Pointer; instance: Pointer; constref hook: THook): Single;
begin
  result := RIGetFloat(eios, instance, PRIField(@hook));
end;

Function RGetDouble(eios: Pointer; instance: Pointer; constref hook: THook): Double;
begin
  result := RIGetDouble(eios, instance, PRIField(@hook));
end;

Function RGetString(eios: Pointer; instance: Pointer; constref hook: THook): String;
begin
  Result := RIGetString(eios, instance, PRIField(@hook));
end;


// MARK: - ARRAY POINTERS

Function RGetArray(eios: Pointer; instance: Pointer; constref hook: THook): Pointer;
begin
  result := RIGetArray(eios, instance, PRIField(@hook));
end;

Function RGetArray(eios: Pointer; instance: Pointer; var size: SizeUInt; constref hook: THook): Pointer; overload;
begin
  result := RIGetArray(eios, instance, @size, PRIField(@hook));
end;

Function RGetArraySize(eios: Pointer; instance: Pointer): SizeUInt;
begin
  result := RIGetArraySize(eios, instance);
end;


// MARK: - Array of 1-Dimension

Function RGetBoolArray(eios: Pointer; instance: Pointer; index: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, index, 1))^;
end;

Function RGetCharArray(eios: Pointer; instance: Pointer; index: SizeUInt): Char;
begin
  Result := PChar(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, index, 1))^;
end;

Function RGetByteArray(eios: Pointer; instance: Pointer; index: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, index, 1))^;
end;

Function RGetShortArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, index, 1))^;
end;

Function RGetIntArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, index, 1))^;
end;

Function RGetLongArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, index, 1))^;
end;

Function RGetFloatArray(eios: Pointer; instance: Pointer; index: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, index, 1))^;
end;

Function RGetDoubleArray(eios: Pointer; instance: Pointer; index: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, index, 1))^;
end;

Function RGetStringArray(eios: Pointer; instance: Pointer; index: SizeUInt): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, index, 1))^;
end;

Function RGetObjectArray(eios: Pointer; instance: Pointer; index: SizeUInt): Pointer;
type
  PPointer = ^Pointer;
begin
  Result := PPointer(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, index, 1))^;
end;

Function RGetBoolArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, index, count));
end;

Function RGetCharArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, index, count));
end;

Function RGetByteArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, index, count));
end;

Function RGetShortArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, index, count));
end;

Function RGetIntArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, index, count));
end;

Function RGetLongArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, index, count));
end;

Function RGetFloatArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, index, count));
end;

Function RGetDoubleArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, index, count));
end;

Function RGetStringArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, index, count));
end;

Function RGetObjectArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, index, count));
end;


// MARK: - Array of 2-Dimensions

Function RGetBoolArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, 1, x, y))^;
end;

Function RGetCharArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Char;
begin
  Result := PChar(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, 1, x, y))^;
end;

Function RGetByteArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, 1, x, y))^;
end;

Function RGetShortArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, 1, x, y))^;
end;

Function RGetIntArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, 1, x, y))^;
end;

Function RGetLongArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, 1, x, y))^;
end;

Function RGetFloatArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, 1, x, y))^;
end;

Function RGetDoubleArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, 1, x, y))^;
end;

Function RGetStringArray2D(eios: Pointer; instance: Pointer; x, y: Int32): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, 1, x, y))^;
end;

Function RGetObjectArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Pointer;
type
  PPointer = ^Pointer;
begin
  Result := PPointer(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, 1, x, y))^;
end;

Function RGetBoolArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y));
end;

Function RGetCharArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y));
end;

Function RGetByteArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y));
end;

Function RGetShortArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y));
end;

Function RGetIntArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y));
end;

Function RGetLongArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y));
end;

Function RGetFloatArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y));
end;

Function RGetDoubleArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y));
end;

Function RGetStringArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y));
end;

Function RGetObjectArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y));
end;


// MARK: - Array of 3-Dimensions

Function RGetBoolArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, 1, x, y, z))^;
end;

Function RGetCharArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Char;
begin
  Result := PChar(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, 1, x, y, z))^;
end;

Function RGetByteArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, 1, x, y, z))^;
end;

Function RGetShortArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, 1, x, y, z))^;
end;

Function RGetIntArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, 1, x, y, z))^;
end;

Function RGetLongArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, 1, x, y, z))^;
end;

Function RGetFloatArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, 1, x, y, z))^;
end;

Function RGetDoubleArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, 1, x, y, z))^;
end;

Function RGetStringArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, 1, x, y, z))^;
end;

Function RGetObjectArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Pointer;
type
  PPointer = ^Pointer;
begin
  Result := PPointer(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, 1, x, y, z))^;
end;

Function RGetBoolArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y, z));
end;

Function RGetCharArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y, z));
end;

Function RGetByteArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y, z));
end;

Function RGetShortArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y, z));
end;

Function RGetIntArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y, z));
end;

Function RGetLongArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y, z));
end;

Function RGetFloatArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y, z));
end;

Function RGetDoubleArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y, z));
end;

Function RGetStringArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y, z));
end;

Function RGetObjectArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y, z));
end;


// MARK: - Array of 4-Dimensions

Function RGetBoolArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, 1, x, y, z, w))^;
end;

Function RGetCharArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Char;
begin
  Result := PChar(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, 1, x, y, z, w))^;
end;

Function RGetByteArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, 1, x, y, z, w))^;
end;

Function RGetShortArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, 1, x, y, z, w))^;
end;

Function RGetIntArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, 1, x, y, z, w))^;
end;

Function RGetLongArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, 1, x, y, z, w))^;
end;

Function RGetFloatArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, 1, x, y, z, w))^;
end;

Function RGetDoubleArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, 1, x, y, z, w))^;
end;

Function RGetStringArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, 1, x, y, z, w))^;
end;

Function RGetObjectArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Pointer;
type
  PPointer = ^Pointer;
begin
  Result := PPointer(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, 1, x, y, z, w))^;
end;

Function RGetBoolArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y, z, w));
end;

Function RGetCharArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y, z, w));
end;

Function RGetByteArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y, z, w));
end;

Function RGetShortArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y, z, w));
end;

Function RGetIntArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y, z, w));
end;

Function RGetLongArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y, z, w));
end;

Function RGetFloatArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y, z, w));
end;

Function RGetDoubleArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y, z, w));
end;

Function RGetStringArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y, z, w));
end;

Function RGetObjectArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y, z, w));
end;
{$ENDIF}
