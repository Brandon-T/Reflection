{$include_once Static.simba}
{$include_once Structures.simba}
{$include_once RSStructures.simba}
{$include_once RSAnimationFrame.simba}
{$include_once RSAnimationSkeleton.simba}
{$include_once RSAnimation.simba}


Function RSModel.RawVertices: Array[0..3] of Array of Int32; constref;
var
  VerticesSize: SizeUInt;
  VerticesX, VerticesY, VerticesZ: Pointer;
begin
  VerticesSize := 0;
  VerticesX := RGetArray(R_EIOS, ref, VerticesSize, MODEL_VERTICESX);
  VerticesY := RGetArray(R_EIOS, ref, MODEL_VERTICESY);
  VerticesZ := RGetArray(R_EIOS, ref, MODEL_VERTICESZ);

  if (VerticesX <> nil) and (VerticesY <> nil) and (VerticesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, VerticesX, 0, VerticesSize);
    Result[1] := RGetIntArray(R_EIOS, VerticesY, 0, VerticesSize);
    Result[2] := RGetIntArray(R_EIOS, VerticesZ, 0, VerticesSize);
  end;

  RFreeObjects(R_EIOS, [VerticesX, VerticesY, VerticesZ]);
end;

Function RSModel.RawIndices: Array[0..3] of Array of Int32; constref;
var
  IndicesSize: SizeUInt;
  IndicesX, IndicesY, IndicesZ: Pointer;
begin
  IndicesSize := 0;
  IndicesX := RGetArray(R_EIOS, ref, IndicesSize, MODEL_INDICESX);
  IndicesY := RGetArray(R_EIOS, ref, MODEL_INDICESY);
  IndicesZ := RGetArray(R_EIOS, ref, MODEL_INDICESZ);

  if (IndicesX <> nil) and (IndicesY <> nil) and (IndicesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, IndicesX, 0, IndicesSize);
    Result[1] := RGetIntArray(R_EIOS, IndicesY, 0, IndicesSize);
    Result[2] := RGetIntArray(R_EIOS, IndicesZ, 0, IndicesSize);
  end;

  RFreeObjects(R_EIOS, [IndicesX, IndicesY, IndicesZ]);
end;

Function RSModel.Vertices: Array of TVector; constref;
var
  I, VerticesSize: SizeUInt;
  Vertices: Array[0..3] of Array of Int32;
begin
  Vertices := self.RawVertices;
  VerticesSize := Length(Vertices[0]);
  SetLength(Result, VerticesSize);

  for I := 0 to VerticesSize - 1 do
  begin
    Result[I].X := Vertices[0][I];
    Result[I].Y := Vertices[1][I];
    Result[I].Z := Vertices[2][I];
  end;
end;

Function RSModel.Indices: Array of TVector; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..3] of Array of Int32;
begin
  Indices := self.RawIndices;
  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].X := Indices[0][I];
    Result[I].Y := Indices[1][I];
    Result[I].Z := Indices[2][I];
  end;
end;

Function RSModel.TriangleFaces: Array of TTriangle; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..3] of Array of Int32;
  Vertices: Array[0..3] of Array of Int32;
begin
  Indices := self.RawIndices;
  Vertices := self.RawVertices;

  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].A.x := Vertices[0][Indices[0][I]];
    Result[I].A.y := Vertices[1][Indices[0][I]];
    Result[I].A.z := Vertices[2][Indices[0][I]];

    Result[I].B.x := Vertices[0][Indices[1][I]];
    Result[I].B.y := Vertices[1][Indices[1][I]];
    Result[I].B.z := Vertices[2][Indices[1][I]];

    Result[I].C.x := Vertices[0][Indices[2][I]];
    Result[I].C.y := Vertices[1][Indices[2][I]];
    Result[I].C.z := Vertices[2][Indices[2][I]];
  end;
end;

Function RSModel.Skin(Index: SizeUInt): Array of Int32; constref;
var
  Skins: Pointer;
  IndexSize, SkinsSize: SizeUInt;
  SkinsArray: Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, Index);
  RFreeObject(R_EIOS, Skins);

  if SkinsArray <> nil then
  begin
    IndexSize := RGetArraySize(R_EIOS, SkinsArray);
    if IndexSize > 0 then
    begin
      Result := RGetIntArray(R_EIOS, SkinsArray, 0, IndexSize);
    end;
  end;

  RFreeObject(R_EIOS, SkinsArray);
end;

Function RSModel.Skins: Array of Array of Int32; constref;
var
  Skins: Pointer;
  I, SkinsSize: SizeUInt;
  SkinsArray: Array of Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, 0, SkinsSize);
  RFreeObject(R_EIOS, Skins);

  SetLength(Result, SkinsSize);

  for I := 0 to SkinsSize - 1 do
  begin
    Result[I] := RGetIntArray(R_EIOS, SkinsArray[I], 0, RGetArraySize(R_EIOS, SkinsArray[I]));
  end;

  RSTypeArray(SkinsArray).Free;
end;
