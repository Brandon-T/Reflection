{$include_once Static.simba}
{$include_once Functions.simba}
{$include_once Structures.simba}

type
  RSType = packed record
    ref: Pointer;
  end;

  PRSType = Array of ^RSType;
  RSTypeArray = Array of RSType;
  PRSTypeArray = Array of ^RSType;

  RSTile = type TPoint;

  RSClient = type RSType;

  RSCamera = type RSType;

  RSNode = type RSType;

  RSCache = type RSType;

  RSHashTable = type RSType;

  RSQueue = type RSType;

  RSModel = type RSType;

  RSPlayerDefinition = type RSType;

  RSNPCDefinition = type RSType;

  RSActor = type RSType;

  RSNPC = type RSActor;

  RSPlayer = type RSActor;

  RSLocalPlayer = type RSPlayer;

  RSNameInfo = type RSType;

  RSCombatInfoList = type RSType;
  RSCombatInfo = type RSType;

  RSAnimationSequence = type RSType;

  RSAnimation = type RSType;

  RSAnimationFrame = type RSType;

  RSAnimationSkeleton = type RSType;

  RSAnimatedModel = record(RSType)
    vertices: Array of TVector;
    {$IFDEF MODEL_TRIANGLES}
    triangles: Array of TTriangle;
    {$ENDIF}
    skins: Array of Array of Int32;

    modifierX, modifierY, modifierZ: Int32;
  end;


Procedure RSType.Free;
begin
  if ref <> nil then
    RFreeObject(R_EIOS, ref);
  ref := nil;
end;

Procedure RSTypeArray.Free;
var
  I, J: Integer;
  Arr: Array of Pointer;
begin
  SetLength(Arr, Length(self));
  for I := 0 to High(Arr) do
  begin
    if self[I].ref <> nil then
    begin
      Arr[J] := self[I].ref;
      self[I].ref := nil;
      Inc(J);
    end;
  end;

  if J > 0 then
    SetLength(Arr, J - 1);

  RFreeObjects(R_EIOS, Arr);
end;
