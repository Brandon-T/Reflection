type TRSObject = record
    Name: String;
    Id: Int32;
    Tile: RSTile;
    MSCoord: TPoint;
end;

(*
R_GetAllObjects
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the all objects visible as a TRSObject.

Example:

   writeln(R_GetAllObjects);

*)
Function R_GetAllObjects: Array of TRSObject;
var
  I: Integer;
  GameObjects: Array of RSObject;
  Definition: RSObjectDefinition;
  Obj: TRSObject;
  MSPoint: TPoint;
begin
  GameObjects := RSObject.GetAllObjectOnScreen(GAME_OBJECT);

  for I := 0 to High(GameObjects) do
  begin
    Definition := GameObjects[i].Definition;
    MSPoint := RSTile(GameObjects[I].Tile).ToLocal.TileToMS;
    Obj.Name := Definition.Name;
    Obj.ID := Definition.ID;
    Obj.Tile := GameObjects[I].Tile;
    if (MSPoint.InBox(R_MainscreenBounds)) then
      Obj.MSCoord := MSPoint
    else Obj.MSCoord := [-1,-1];
    Result += Obj;
    Definition.Free;
  end;
  RSTypeArray(GameObjects).Free;
end;

(*
R_GetObject
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns a TRSObject for every object visible that matches the specified
  information.

Example:

   writeln(R_GetObject(1332));

*)
Function R_GetObject(ID: Int32): Array of TRSObject;
var
  I: Integer;
  GameObjects: Array of RSObject;
  Definition: RSObjectDefinition;
  Obj: TRSObject;
  MSPoint: TPoint;
begin
  GameObjects := RSObject.GetAllObjectOnScreen(GAME_OBJECT);

  for I := 0 to High(GameObjects) do
  begin
    Definition := GameObjects[i].Definition;
    MSPoint := RSTile(GameObjects[I].Tile).ToLocal.TileToMS;
    if (Definition.ID = ID) then
    begin
      Obj.Name := Definition.Name;
      Obj.ID := Definition.ID;
      Obj.Tile := GameObjects[I].Tile;
      if (MSPoint.InBox(R_MainscreenBounds)) then
        Obj.MSCoord := MSPoint
      else Obj.MSCoord := [-1,-1];
      Result += Obj;
    end;
    Definition.Free;
  end;
  RSTypeArray(GameObjects).Free;
end;

Function R_GetObject(Name: String): Array of TRSObject; overload;
var
  I: Integer;
  GameObjects: Array of RSObject;
  Definition: RSObjectDefinition;
  Obj: TRSObject;
  MSPoint: TPoint;
begin
  GameObjects := RSObject.GetAllObjectOnScreen(GAME_OBJECT);

  for I := 0 to High(GameObjects) do
  begin
    Definition := GameObjects[i].Definition; 
    MSPoint := RSTile(GameObjects[I].Tile).ToLocal.TileToMS;
    if (Definition.Name = Name) then
    begin
      Obj.Name := Definition.Name;
      Obj.ID := Definition.ID;
      Obj.Tile := GameObjects[I].Tile;
      if (MSPoint.InBox(R_MainscreenBounds)) then
        Obj.MSCoord := MSPoint
      else Obj.MSCoord := [-1,-1];
      Result += Obj;
    end;
    Definition.Free;
  end;
  RSTypeArray(GameObjects).Free;
end;

(*
R_GetObjectAt
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the TRSObject on the given global tile.

Example:

   writeln(R_GetObjectAt(RSPlayer.Me.Tile.X, RSPlayer.Me.Tile.Y));

*)
Function R_GetObjectAt(X, Y: Int32): TRSObject;
var
  GameObject: RSObject;
  Definition: RSObjectDefinition;
begin
  GameObject := RSObject.Get(RSObjectType.GAME_OBJECT, X, Y);
  Definition := GameObject.Definition;
  Result.Id := Definition.ID;
  Result.Name := Definition.Name;
  Result.Tile := [X,Y];
  Result.MSCoord := RSTile([X,Y]).ToLocal.TileToMS;
  Definition.Free;
  GameObject.Free;
end;

(*
R_GetSortedObjectMSCoords
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the sorted screen coordinates of an object with a specific name/ID that is
  viewable on the Mainscreen.

Example:

   Mouse.Move(R_GetSortedObjectMSCoords(1276)[0]);

*)

Function R_GetSortedObjectMSCoords(ID: Int32): TPointArray;
var
  Objs: Array of TRSObject;
  I: Integer;
  Tiles: TPointArray;
begin
  Objs := R_GetObject(ID);
  for I := 0 to HIGH(Objs) do
    if Objs[I].MSCoord.X <> -1 then
      Tiles += Objs[I].MSCoord;
  Tiles.sort(R_MainscreenBounds.Middle);
  Result := Tiles;
end;

Function R_GetSortedObjectMSCoords(Name: String): TPointArray; overload;
var
  Objs: Array of TRSObject;
  I: Integer;
  Tiles: TPointArray;
begin
  Objs := R_GetObject(Name);
  for I := 0 to HIGH(Objs) do
    if Objs[I].MSCoord.X <> -1 then
      Tiles += Objs[I].MSCoord;
  Tiles.sort(R_MainscreenBounds.Middle);
  Result := Tiles;
end;

