{$include_once RSStructures.simba}
{$include_once RSClient.simba}
{$include_once RSNameInfo.simba}
{$include_once RSActor.simba}
{$include_once RSPlayerDefinition.simba}
{$include_once RSHashTable.simba}
{$include_once RSAnimation.simba}


Function RSPlayer.Me: RSLocalPlayer; static;
begin
  Result.ref := RGetObject(R_EIOS, nil, CLIENT_LOCALPLAYER);
end;

Function RSPlayer.AllPlayers: Array of RSPlayer; static;
var
  Players: Pointer;
  PlayersArray: Array of Pointer;
  Indices: Array of Int32;
  I, PlayersSize: SizeUInt;
begin
  Indices := RSClient.PlayerIndices;
  if Length(Indices) < 1 then
    Exit;

  PlayersSize := 0;
  Players := RGetArray(R_EIOS, nil, PlayersSize, CLIENT_LOCALPLAYERS);
  PlayersArray := RGetObjectArray(R_EIOS, Players, 0, PlayersSize);
  RFreeObject(R_EIOS, Players);

  SetLength(Result, Length(Indices));

  for I := 0 to High(Indices) do
  begin
    Result[I].ref := PlayersArray[Indices[I]];
  end;
end;

Function RSPlayer.Name: String;
var
  NameInfo: RSNameInfo;
begin
  NameInfo.ref := RGetObject(R_EIOS, ref, PLAYER_NAME);
  Result := NameInfo.Name;
  NameInfo.Free;
end;

Function RSPlayer.IsVisible: Boolean;
begin
  Result := RGetBool(R_EIOS, ref, PLAYER_VISIBLE);
end;

Function RSPlayer.Definition: RSPlayerDefinition;
begin
  Result.ref := RGetObject(R_EIOS, ref, PLAYER_DEFINITION);
end;

Function RSPlayer.CombatLevel: Int32;
begin
  Result := RGetInt(R_EIOS, ref, PLAYER_COMBATLEVEL);
end;

Function RSPlayer.Model: RSModel;
var
  Definition: RSPlayerDefinition;
begin
  Definition := self.Definition;
  Result := Definition.CachedModel;
  Definition.Free;
end;

Function RSPlayer.AnimatedModel: RSAnimatedModel;
var
  AnimationId, AnimationDelay: Int32;
  AnimationFrame, MovementId: Int32;
  MovementFrame: Int32;
  Model: RSModel;
  IdleSequence: RSAnimationSequence;
  MovementSequence: RSAnimationSequence;

  AnimationCache: RSCache;
  HashTable: RSHashTable;
  Garbage: RSTypeArray;
begin
  Model := self.Model;

  if Model.ref <> nil then
  begin
    AnimationDelay := 0;
    AnimationId := self.AnimationId;
    MovementId := self.MovementSequenceId;
    AnimationFrame := self.AnimationFrame;
    MovementFrame := self.MovementFrame;

    if (AnimationId <> -1) and (AnimationDelay = 0) then
    begin
      AnimationCache := RSAnimationSequence.AnimationSequenceCache;
      HashTable := AnimationCache.HashTable;

      IdleSequence.ref := HashTable.GetObject(AnimationId).ref;

      Garbage += [HashTable, AnimationCache];
    end;

    if (MovementId <> -1) and (not self.isIdle) and ((MovementId <> self.CurrentSequenceId) or (IdleSequence.ref = nil)) then
    begin
      AnimationCache := RSAnimationSequence.AnimationSequenceCache;
      HashTable := AnimationCache.HashTable;

      MovementSequence.ref := HashTable.GetObject(MovementId).ref;

      Garbage += [HashTable, AnimationCache];
    end;

    Exit(RSPlayerDefinition.GetModel(Model, IdleSequence, AnimationFrame, MovementSequence, MovementFrame));
  end

  Result.ref := Model.ref;
  Result.vertices := Model.Vertices;
  Result.triangles := Model.TriangleFaces;

  Garbage.Free;
end;
