{$include_once Static.simba}
{$include_once RSStructures.simba}
{$include_once RSVarbitDefinition.simba}
{$include_once RSVarps.simba}

Function RSClient.LoopCycle: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_LOOPCYCLE);
end;

Function RSClient.LoginState: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_LOGINSTATE);
end;

Function RSClient.GameState: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_GAMESTATE);
end;

Function RSClient.GetTileSettings(X, Y, Z: Int32): UInt8; static;
begin
  Result := CACHED_TILE_SETTINGS[X][Y][Z];
end;

Function RSClient.GetTileHeights(X, Y, Z: Int32): Int32; static;
begin
  Result := CACHED_TILE_HEIGHTS[X][Y][Z];
end;

Function RSClient.Plane: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_PLANE);
end;

Function RSClient.BaseX: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_BASEX);
end;

Function RSClient.BaseY: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_BASEY);
end;

Function RSClient.DestinationX: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_DESTINATIONX);
end;

Function RSClient.DestinationY: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_DESTINATIONY);
end;

Function RSClient.ViewPortWidth: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_VIEWPORTWIDTH);
end;

Function RSClient.ViewPortHeight: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_VIEWPORTHEIGHT);
end;

Function RSClient.ViewPortScale: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_VIEWPORTSCALE);
end;

Function RSClient.MapAngle: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_MAPANGLE);
end;

Function RSClient.NPCIndices: Array of Int32; static;
var
  Indices: Pointer;
  IndicesSize: SizeUInt;
begin
  IndicesSize := 0;
  Indices := RGetArray(R_EIOS, nil, IndicesSize, CLIENT_NPCINDICES);
  if Indices = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, Indices, 0, IndicesSize);
  RFreeObject(R_EIOS, Indices);
end;

Function RSClient.PlayerIndices: Array of Int32; static;
var
  Indices: Pointer;
  IndicesSize: SizeUInt;
begin
  IndicesSize := 0;
  Indices := RGetArray(R_EIOS, nil, IndicesSize, CLIENT_PLAYERINDICES);
  if Indices = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, Indices, 0, IndicesSize);
  RFreeObject(R_EIOS, Indices);
end;

Function RSClient.AllNPCs: Array of RSNPC; static;
var
  NPCs: Pointer;
  NPCsArray: Array of Pointer;
  I, J, NPCsSize: SizeUInt;
begin
  NPCsSize := 0;
  NPCs := RGetArray(R_EIOS, nil, NPCsSize, CLIENT_LOCALNPCs);
  if NPCs = nil then
    Exit;

  NPCsArray := RGetObjectArray(R_EIOS, NPCs, 0, NPCsSize);
  RFreeObject(R_EIOS, NPCs);

  SetLength(Result, NPCsSize);

  for I := 0 to NPCsSize - 1 do
  begin
    if NPCsArray[I] <> nil then
    begin
      Result[J].ref := NPCsArray[I];
      Inc(J);
    end;
  end;

  if J > 0 then
    SetLength(Result, J - 1);
end;

Function RSClient.AllPlayers: Array of RSPlayer; static;
var
  Players: Pointer;
  PlayersArray: Array of Pointer;
  I, J, PlayersSize: SizeUInt;
begin
  PlayersSize := 0;
  Players := RGetArray(R_EIOS, nil, PlayersSize, CLIENT_LOCALPLAYERS);
  if Players = nil then
    Exit;

  PlayersArray := RGetObjectArray(R_EIOS, Players, 0, PlayersSize);
  RFreeObject(R_EIOS, Players);

  SetLength(Result, PlayersSize);

  for I := 0 to PlayersSize - 1 do
  begin
    if PlayersArray[I] <> nil then
    begin
      Result[J].ref := PlayersArray[I];
      Inc(J);
    end;
  end;

  if J > 0 then
    SetLength(Result, J - 1);
end;

Function RSClient.AnimationFrameCache: RSCache; static;
begin
  Result.ref := RGetObject(R_EIOS, nil, CLIENT_ANIMATIONFRAMECACHE);
end;

Function RSClient.ItemNodeCache: RSCache; static;
begin
  Result.ref := RGetObject(R_EIOS, nil, CLIENT_ITEMNODECACHE);
end;

Function RSClient.Region: RSRegion; static;
begin
  Result.ref := RGetObject(R_EIOS, nil, CLIENT_REGION);
end;

Function RSClient.IsResizeable: Boolean; static;
var
  W, H: Int32;
begin
  GetClientDimensions(W, H);
  Result := (W <> 765) or (H <> 503);
end;

Function RSClient.GetVarBit(ID: Int32): Int32; static;
var
  Definition: RSVarbitDefinition;
  Base, LSB, MSB: Int32;
  Varp, Mask: Int32;
begin
  Definition := RSVarbitDefinition.Definition(ID);
  if Definition.ref = nil then
    Exit(-1);

  Base := Definition.BaseVar;
  LSB := Definition.StartBit;
  MSB := Definition.EndBit;
  Definition.Free;

  if (Base = 0) and (LSB = 0) and (MSB = 0) then
    Exit(-1);

  Varp := RSVarps.VarpMain(Base);
	Mask := (1 shl ((MSB - LSB) + 1)) - 1;
	Result := (Varp shr LSB) and Mask;
end;

Function RSClient.MenuActions: Array of String; static;
var
  Actions: Pointer;
  Size: SizeUInt;
begin
  Actions := RGetArray(R_EIOS, nil, Size, CLIENT_MENUACTIONS);
  if Actions = nil then
    Exit;

  if Size = 0 then
    Exit;

  Result := RGetStringArray(R_EIOS, Actions, 0, Size);
  RFreeObject(R_EIOS, Actions);
end;

Function RSClient.MenuOptions: Array of String; static;
var
  Options: Pointer;
  Size: SizeUInt;
begin
  Options := RGetArray(R_EIOS, nil, Size, CLIENT_MENUOPTIONS);
  if Options = nil then
    Exit;

  if Size = 0 then
    Exit;

  Result := RGetStringArray(R_EIOS, Options, 0, Size);
  RFreeObject(R_EIOS, Options);
end;

Function RSClient.MenuCount: Int32; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_MENUCOUNT);
end;

Function RSClient.MenuLocation: TPoint; static;
begin
  Result.X := RGetInt(R_EIOS, nil, CLIENT_MENUX);
  Result.Y := RGetInt(R_EIOS, nil, CLIENT_MENUY);
end;

Function RSClient.MenuWidth: SizeUInt; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_MENUWIDTH);
end;

Function RSClient.MenuHeight: SizeUInt; static;
begin
  Result := RGetInt(R_EIOS, nil, CLIENT_MENUHEIGHT);
end;

Function RSClient.MenuBounds: TBox; static;
begin
  Result.X1 := RGetInt(R_EIOS, nil, CLIENT_MENUX);
  Result.Y1 := RGetInt(R_EIOS, nil, CLIENT_MENUY);
  Result.X2 := Result.X1 + RSClient.MenuWidth;
  Result.Y2 := Result.Y1 + RSClient.MenuHeight;
end;

Function RSClient.IsMenuOpen: Boolean; static;
begin
  Result := RGetBool(R_EIOS, nil, CLIENT_ISMENUOPEN);
end;
