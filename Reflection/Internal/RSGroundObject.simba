{$include_once RSStructures.simba}
{$include_once RSNodeDeque.simba}
{$include_once RSClient.simba}
{$include_once RSPlayer.simba}
{$include_once RSLinkedList.simba}

(*
RSGroundObject.GetAll
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns all items on the ground (ID, Stack Size, Tile)

Example:

  Writeln(RSGroundObject.GetAll);
*)
Function RSGroundObject.GetAll: Array of RSGroundItem; static;
var
  Tile: RSTile;
  Plane: Int32;
  BaseX, BaseY: Int32;
  MinX, MinY, MaxX, MaxY: Int32;
  X, Y: Int32;
  Player: RSPlayer;

  Items: Pointer;
  ItemsSize: SizeUInt;
  NodeDeque: RSNodeDeque;
  Head, Curr: RSNode;
  Garbage: RSTYpeArray;
  Item: RSGroundItem;

  ID, Stack: Int32;
begin
  Player := RSPlayer.Me;
  Tile := Player.Tile;
  Player.Free;

  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;
  Plane := RSClient.Plane;

  MinX := BaseX;
  MinY := BaseY;
  MaxX := BaseX + 104;
  MaxY := BaseY + 104;

  ItemsSize := 0;
  Items := RGetArray(R_EIOS, nil, ItemsSize, Client_GroundItems);
  if ItemsSize = 0 then
    Exit;

  for Y := MinY to MaxY - 1 do
  begin
    for X := MinX to MaxX - 1 do
    begin
      NodeDeque.ref := RGetObjectArray3D(R_EIOS, Items, Plane, X - BaseX, Y - BaseY);
      if NodeDeque.ref <> nil then
      begin
        Head := NodeDeque.Head;
        Curr := Head.Next;
        Garbage := [NodeDeque, Head, Curr];

        while not RObjectsEqual(R_EIOS, Head.ref, Curr.ref) do
        begin
          ID := RGetInt(R_EIOS, Curr.ref, ITEM_ID);
          Stack := RGetInt(R_EIOS, Curr.ref, ITEM_STACKSIZES);

          Item := [ID, Stack, [X, Y]];
          Result += item;

          Curr := Curr.Next;
          Garbage += Curr;
        end;
      end;
    end;
  end;

  Garbage.Free;
  RFreeObject(R_EIOS, Items);
end;

(*
RSGroundObject.GetItemByID
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns an array of RSGroundItem that contain a specific item ID.

Example:

  Writeln(RSGroundObject.GetItemByID(526));
*)
Function RSGroundObject.GetItemByID(ItemID: Int32): Array of RSGroundItem; static;
var
  Tile: RSTile;
  Plane: Int32;
  BaseX, BaseY: Int32;
  MinX, MinY, MaxX, MaxY: Int32;
  X, Y: Int32;
  Player: RSPlayer;

  Item: RSGroundItem;
  Items: Pointer;
  ItemsSize: SizeUInt;
  NodeDeque: RSNodeDeque;
  Head, Curr: RSNode;
  Garbage: RSTYpeArray;

  ID, Stack: Int32;
begin
  Player := RSPlayer.Me;
  Tile := Player.Tile;
  Player.Free;

  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;
  Plane := RSClient.Plane;

  MinX := BaseX;
  MinY := BaseY;
  MaxX := BaseX + 104;
  MaxY := BaseY + 104;

  ItemsSize := 0;
  Items := RGetArray(R_EIOS, nil, ItemsSize, Client_GroundItems);
  if ItemsSize = 0 then
    Exit;

  for Y := MinY to MaxY - 1 do
  begin
    for X := MinX to MaxX - 1 do
    begin
      NodeDeque.ref := RGetObjectArray3D(R_EIOS, Items, Plane, X - BaseX, Y - BaseY);
      if NodeDeque.ref <> nil then
      begin
        Head := NodeDeque.Head;
        Curr := Head.Next;
        Garbage := [NodeDeque, Head, Curr];

        while not RObjectsEqual(R_EIOS, Head.ref, Curr.ref) do
        begin
          if ItemID = RGetInt(R_EIOS, Curr.ref, ITEM_ID) then
          begin
            ID := RGetInt(R_EIOS, Curr.ref, ITEM_ID);
            Stack := RGetInt(R_EIOS, Curr.ref, ITEM_STACKSIZES);

            Item := [ID, Stack, [X, Y]];
            Result += item;
          end;

          Curr := Curr.Next;
          Garbage += Curr;
        end;
      end;
    end;
  end;

  Garbage.Free;
  RFreeObject(R_EIOS, Items);
end;

(*
RSGroundObject.GetTileByID
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns all tiles that contain a specific object ID.

Example:

  Writeln(RSGroundObject.GetTileByID(526));
*)
Function RSGroundObject.GetTileByID(ItemID: Int32): Array of RSTile; static;
var
  Tile: RSTile;
  Plane: Int32;
  BaseX, BaseY: Int32;
  MinX, MinY, MaxX, MaxY: Int32;
  X, Y: Int32;
  Player: RSPlayer;

  Items: Pointer;
  ItemsSize: SizeUInt;
  NodeDeque: RSNodeDeque;
  Head, Curr: RSNode;
  Garbage: RSTYpeArray;

  ID: Int32;
begin
  Player := RSPlayer.Me;
  Tile := Player.Tile;
  Player.Free;

  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;
  Plane := RSClient.Plane;

  MinX := BaseX;
  MinY := BaseY;
  MaxX := BaseX + 104;
  MaxY := BaseY + 104;

  ItemsSize := 0;
  Items := RGetArray(R_EIOS, nil, ItemsSize, Client_GroundItems);
  if ItemsSize = 0 then
    Exit;

  for Y := MinY to MaxY - 1 do
  begin
    for X := MinX to MaxX - 1 do
    begin
      NodeDeque.ref := RGetObjectArray3D(R_EIOS, Items, Plane, X - BaseX, Y - BaseY);
      if NodeDeque.ref <> nil then
      begin
        Head := NodeDeque.Head;
        Curr := Head.Next;
        Garbage := [NodeDeque, Head, Curr];

        while not RObjectsEqual(R_EIOS, Head.ref, Curr.ref) do
        begin
          if ItemID = RGetInt(R_EIOS, Curr.ref, ITEM_ID) then
            Result += [X, Y];

          Curr := Curr.Next;
          Garbage += Curr;
        end;
      end;
    end;
  end;

  Garbage.Free;
  RFreeObject(R_EIOS, Items);
end;

Function RSGroundObject.GetItemsAt(X, Y: Int32): Array of RSGroundItem; static;
var
  ID, Stack: Int32;
  BaseX, BaseY: Int32;
  //Index, Hash: Int32;
  Items: Pointer;
  NodeDeque: RSNodeDeque;
  Head, Curr: RSNode;
  Garbage: RSTYpeArray;
  Item: RSGroundItem;
begin
  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;

  Items := RGetObject(R_EIOS, nil, Client_GroundItems);
  NodeDeque.ref := RGetObjectArray3D(R_EIOS, Items, RSClient.Plane, X - BaseX, Y - BaseY);
  RFreeObject(R_EIOS, items);

  //Hash := X or (Y shl 14) or (RSClient.Plane shl 28);
  //Index := Hash and (ItemsSize - 1);

  Head := NodeDeque.Head;
  Curr := Head.Next;
  Garbage := [NodeDeque, Head, Curr];

  while not RObjectsEqual(R_EIOS, Head.ref, Curr.ref) do
  begin
    ID := RGetInt(R_EIOS, Curr.ref, ITEM_ID);
    Stack := RGetInt(R_EIOS, Curr.ref, ITEM_STACKSIZES);

    Item := [ID, Stack, [X, Y]];
    Result += item;

    Curr := Curr.Next;
    Garbage += Curr;
  end;

  Garbage.Free;
end;
