{$include_once RSStructures.simba}
{$include_once Static.simba}
{$include_once RSCache.simba}
{$include_once RSIterableHashTable.simba}
{$include_once RSModel.simba}
{$include_once RSAnimationSequence.simba}

Function RSNPCDefinition.ID: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, NPCDEFINITION_ID);
end;

Function RSNPCDefinition.Name: String; constref;
begin
  Result := RGetString(R_EIOS, ref, NPCDEFINITION_NAME);
end;

Function RSNPCDefinition.Actions: Array of String; constref;
var
  Actions: Pointer;
  ActionsSize: SizeUInt;
begin
  ActionsSize := 0;
  Actions := RGetArray(R_EIOS, ref, ActionsSize, NPCDEFINITION_ACTIONS);
  if Actions = nil then
    Exit;

  Result := RGetStringArray(R_EIOS, Actions, 0, ActionsSize);
  RFreeObject(R_EIOS, Actions);
end;

Function RSNPCDefinition.ModelIDs: Array of Int32; constref;
var
  ModelIDs: Pointer;
  ModelIDsSize: SizeUInt;
begin
  ModelIDsSize := 0;
  ModelIDs := RGetArray(R_EIOS, ref, ModelIDsSize, NPCDEFINITION_MODELIDS);
  if ModelIDs = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, ModelIDs, 0, ModelIDsSize);
  RFreeObject(R_EIOS, ModelIDs);
end;

Function RSNPCDefinition.CombatLevel: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, NPCDEFINITION_COMBATLEVEL);
end;

Function RSNPCDefinition.IsVisible: Boolean; constref;
begin
  Result := RGetBool(R_EIOS, ref, NPCDEFINITION_VISIBLE);
end;

Function RSNPCDefinition.Transformations: Array of Int32; constref;
var
  Transformations: Pointer;
  TransformationsSize: SizeUInt;
begin
  TransformationsSize := 0;
  Transformations := RGetArray(R_EIOS, ref, TransformationsSize, NPCDEFINITION_TRANSFORMATIONS);
  if Transformations = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, Transformations, 0, TransformationsSize);
  RFreeObject(R_EIOS, Transformations);
end;

Function RSNPCDefinition.ModelTileSize: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, NPCDEFINITION_MODELTILESIZE);
end;

Function RSNPCDefinition.ModelScale: TVector; constref;
begin
  Result.X := RGetInt(R_EIOS, ref, NPCDEFINITION_MODELSCALEWIDTH);
  Result.Y := RGetInt(R_EIOS, ref, NPCDEFINITION_MODELSCALEHEIGHT);
  Result.Z := Result.X;
end;

Function RSNPCDefinition.ModelCache: RSCache; static;
begin
  Result.ref := RGetObject(R_EIOS, nil, NPCDEFINITION_MODELCACHE);
end;

Function RSNPCDefinition.CachedModel: RSModel; constref;
var
  ModelID: Int64;
  Cache: RSCache;
  HashTable: RSIterableHashTable;
  Garbage: RSTypeArray;
begin
  if self.ref <> nil then
  begin
    ModelID := self.ID;
    Cache := self.ModelCache;

    if Cache.ref <> nil then
    begin
      HashTable := Cache.HashTable;
      if HashTable.ref <> nil then
      begin
        Result.ref := HashTable.GetObject(ModelID).ref;
      end;
    end;
  end;

  Garbage := [HashTable, Cache];
  Garbage.Free;
end;

Function RSNPCDefinition.GetModel(constref Model: RSModel; constref IdleSequence: RSAnimationSequence; AnimationFrame: Int32; constref MovementSequence: RSAnimationSequence; MovementFrame: Int32): RSAnimatedModel; static;
var
  Garbage: RSTypeArray;
begin
  Garbage := [IdleSequence, MovementSequence];

  if (IdleSequence.ref = nil) and (MovementSequence.ref = nil) then
  begin
    Result.ref := Model.ref;
    Result.vertices := Model.Vertices;
    {$IFDEF MODEL_TRIANGLES}
    Result.triangles := Model.TriangleFaces;
    {$ENDIF}
    Exit(Result);
  end;

  if (IdleSequence.ref <> nil) and (MovementSequence.ref <> nil) then
  begin
    Result := IdleSequence.ApplyTransformations(Model, AnimationFrame, MovementSequence, MovementFrame);
    Garbage.Free;
    Exit;
  end;

  if IdleSequence.ref <> nil then
  begin
    Result := IdleSequence.TransformActorModel(Model, AnimationFrame);
    Garbage.Free;
    Exit;
  end;

  Result := MovementSequence.TransformActorModel(Model, MovementFrame);
  Garbage.Free;
end;
