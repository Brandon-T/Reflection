{$include_once Structures.simba}
{$include_once RSStructures.simba}
{$include_once RSTile.simba}
{$include_once RSPlayer.simba}
{$include_once RSNPC.simba}

procedure TMufasaBitmap._DrawPolygon(points: TPointArray; color: TColor);
var
  i, h: Integer;
begin
  h := (High(points) - 1);

  if (h = -1) then
    exit;

  for i := 0 to h do
    self.LineTo(points[i], points[i + 1], color);

  self.LineTo(points[h + 1], points[0], color);
end;

Procedure TMufasaBitmap._DrawPolygon(constref poly: T2DTriangle; Colour: TColor); overload;
begin
  self.LineTo(Point(poly.A.X, poly.A.Y), Point(poly.B.X, poly.B.Y), Colour);
  self.LineTo(Point(poly.B.X, poly.B.Y), Point(poly.C.X, poly.C.Y), Colour);
  self.LineTo(Point(poly.C.X, poly.C.Y), Point(poly.A.X, poly.A.Y), Colour);
end;

Procedure TMufasaBitmap.DrawModel(constref model: RSModel; tile: RSTile; tileHeight: Int32; orientation: Int32; Colour: TColor);
var
  i: Int32;
  triangles: Array of T2DTriangle;
begin
  triangles := model.Project(tile.X, tile.Y, tileHeight, orientation);

  for i := 0 to high(triangles) do
  begin
    self._DrawPolygon(triangles[i], Colour);
  end;
end;

Procedure TMufasaBitmap.DrawModel(constref model: RSAnimatedModel; tile: RSTile; tileHeight: Int32; orientation: Int32; Colour: TColor); overload;
var
  i: Int32;
  triangles: Array of T2DTriangle;
begin
  triangles := model.Project(tile.X, tile.Y, tileHeight, orientation);

  for i := 0 to high(triangles) do
  begin
    self._DrawPolygon(triangles[i], Colour);
  end;
end;

Procedure TMufasaBitmap.DrawPlayer(constref player: RSPlayer; animated: Boolean; Colour: TColor);
var
  model: RSModel;
  animatedModel: RSAnimatedModel;
  tile: RSTile;
begin
  if Animated then
  begin
    animatedModel := player.AnimatedModel;
    if animatedModel.ref <> nil then
    begin
      tile := player.LocalTile;
      self.DrawModel(animatedModel, tile, tile.GetHeight(), player.Orientation, colour);
      animatedModel.Free;
    end;
  end else
    begin
      model := Player.Model;
      if model.ref <> nil then
      begin
        tile := player.LocalTile;
        self.DrawModel(model, tile, tile.GetHeight(), player.Orientation, colour);
        model.Free;
      end;
    end;
end;

Procedure TMufasaBitmap.DrawNPC(constref npc: RSNPC; animated: Boolean; Colour: TColor);
var
  model: RSModel;
  animatedModel: RSAnimatedModel;
  definition: RSNPCDefinition;
  modelTileSize: Int32;
  tile: RSTile;
  heightTile: RSTile;
  modelScale: TVector;
  shouldScale: Boolean;
  vertices: Array of TVector;
  projectedVertices: Array of TPoint;
begin
  modelTileSize := 1;
  shouldScale := false;

  definition := npc.Definition;
  if definition.ref <> nil then
  begin
    modelTileSize := definition.ModelTileSize;
    modelScale := definition.ModelScale;
    shouldScale := (modelScale.X <> 128) and (modelScale.Y <> 128);
    definition.Free;
  end;

  if Animated then
  begin
    animatedModel := npc.AnimatedModel;
    if animatedModel.ref <> nil then
    begin
      tile := npc.LocalTile;
      heightTile := tile;

      if modelTileSize > 0 then
      begin
        heightTile.X += (modelTileSize * 64) - 64;
        heightTile.Y += (modelTileSize * 64) - 64;
      end;

      if shouldScale then
      begin
        vertices := animatedModel.Vertices;
        RSModel.scale(vertices, modelScale);
        projectedVertices := Project(vertices, tile.X, tile.Y, heightTile.GetHeight(), npc.Orientation);
        vertices := [];

        self._DrawPolygon(projectedVertices, Colour);
      end else
        begin
          self.DrawModel(animatedModel, tile, heightTile.GetHeight(), npc.Orientation, colour);
        end;
      animatedModel.Free;
    end;
  end else
    begin
      model := npc.Model;
      if model.ref <> nil then
      begin
        tile := npc.LocalTile;
        heightTile := tile;

        if modelTileSize > 0 then
        begin
          heightTile.X += (modelTileSize * 64) - 64;
          heightTile.Y += (modelTileSize * 64) - 64;
        end;

        if shouldScale then
        begin
          vertices := model.Vertices;
          RSModel.scale(vertices, modelScale);
          projectedVertices := Project(vertices, tile.X, tile.Y, heightTile.GetHeight(), npc.Orientation);
          vertices := [];

          self._DrawPolygon(projectedVertices, Colour);
        end else
          begin
            self.DrawModel(model, tile, heightTile.GetHeight(), npc.Orientation, colour);
          end;
        model.Free;
      end;
    end;
  model.Free;
end;

Procedure TMufasaBitmap.DrawTile(constref tile: RSTile; Colour: TColor);
var
  Bounds: T2DRectangle;
begin
  Bounds := tile.Project;
  self.LineTo(Bounds.NW, Bounds.NE, Colour);
  self.LineTo(Bounds.NE, Bounds.SE, Colour);
  self.LineTo(Bounds.SE, Bounds.SW, Colour);
  self.LineTo(Bounds.SW, Bounds.NW, Colour);
end;
