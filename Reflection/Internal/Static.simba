{$include_once Functions.simba}
{$include_once Hooks.simba}

type
  RSRegionCacheNode = record
    ID: Int32;
    Instanced: Boolean;
    TileSettings: array of array of array of UInt8;
    TileHeights: array of array of array of Int32;
  end;

const
  SINGLEUNIT: Double = PI / 1024.0;

var
  R_EIOS: Pointer;

var
  SINE: array[0..2048] of Int32;
  COSINE: array[0..2048] of Int32;

  CACHED_REGION_INDEX: Int32 := 0;
  CACHED_REGION_NODES: Array[0..3] of RSRegionCacheNode := [[], [], [], []]; //0..3 = 4 Regions..
  CACHED_TILE_SETTINGS: array of array of array of UInt8;
  CACHED_TILE_HEIGHTS: array of array of array of Int32;
  CACHED_VARP_MASKS: array[0..32] of Int32;

Procedure RInitializeConstants;
var
  I: Integer;
begin
  for I := 0 to High(SINE) do
  begin
    SINE[I] := Trunc(Double(65535.0) * Double(sin(Double(I) * SINGLEUNIT)));
    COSINE[I] := Trunc(Double(65535.0) * Double(cos(Double(I) * SINGLEUNIT)));
  end;
end;

Procedure RInitializeTileSettings;
var
  Settings: Pointer;
  I, J, SettingsSize: SizeUInt;
  SX, SY: Array of Pointer;
begin
  SettingsSize := 0;
  Settings := RGetArray(R_EIOS, nil, SettingsSize, CLIENT_TILESETTINGS);
  SX := RGetObjectArray(R_EIOS, Settings, 0, SettingsSize);
  RFreeObject(R_EIOS, Settings);

  SetLength(CACHED_TILE_SETTINGS, SettingsSize);

  for I := 0 to SettingsSize - 1 do
  begin
    SY := RGetObjectArray(R_EIOS, SX[I], 0, RGetArraySize(R_EIOS, SX[I]));
    SetLength(CACHED_TILE_SETTINGS[I], Length(SY));

    for J := 0 to High(SY) do
    begin
      CACHED_TILE_SETTINGS[I][J] := RGetByteArray(R_EIOS, SY[J], 0, RGetArraySize(R_EIOS, SY[J]));
    end;

    RFreeObjects(R_EIOS, SY);
  end;
  RFreeObjects(R_EIOS, SX);
end;

Procedure RInitializeTileHeights;
var
  Heights: Pointer;
  I, J, HeightsSize: SizeUInt;
  SX, SY: Array of Pointer;
begin
  HeightsSize := 0;
  Heights := RGetArray(R_EIOS, nil, HeightsSize, CLIENT_TILEHEIGHTS);
  SX := RGetObjectArray(R_EIOS, Heights, 0, HeightsSize);
  RFreeObject(R_EIOS, Heights);

  SetLength(CACHED_TILE_HEIGHTS, HeightsSize);

  for I := 0 to HeightsSize - 1 do
  begin
    SY := RGetObjectArray(R_EIOS, SX[I], 0, RGetArraySize(R_EIOS, SX[I]));
    SetLength(CACHED_TILE_HEIGHTS[I], Length(SY));

    for J := 0 to High(SY) do
    begin
      CACHED_TILE_HEIGHTS[I][J] := RGetIntArray(R_EIOS, SY[J], 0, RGetArraySize(R_EIOS, SY[J]));
    end;

    RFreeObjects(R_EIOS, SY);
  end;

  RFreeObjects(R_EIOS, SX);
end;

{$IFDEF DYNAMIC_VARPS}
Procedure RInitializeVarpMasks;
var
  Masks: Pointer;
  MasksSize: SizeUInt;
begin
  MasksSize := 0;
  Masks := RGetArray(R_EIOS, nil, VARP_MASKS);
  if Masks = nil then
    Exit;

  CACHED_VARP_MASKS := RGetIntArray(R_EIOS, Masks, 0, MasksSize);
  RFreeObject(R_EIOS, Masks);
end;
{$ELSE}
Procedure RInitializeVarpMasks;
var
  I, Mask: Int32;
begin
  Mask := 2;

  for I := 0 to High(CACHED_VARP_MASKS) do
  begin
    CACHED_VARP_MASKS[I] := Mask - 1;
    Mask += Mask;
  end;
end;
{$ENDIF}

Procedure UpdateRegionCache(X, Y: Int32);
  Function FindRegion(ID: Int32; Instanced: Boolean): Int32;
  var
    I: Int32;
  begin
    for I := 0 to High(CACHED_REGION_NODES) do
    begin
      if (CACHED_REGION_NODES[I].ID > 0) and (CACHED_REGION_NODES[I].ID = ID) and (CACHED_REGION_NODES[I].Instanced = Instanced) then
        Exit(I);
    end;

    Result := -1;
  end;
var
  RegionID: Int32;
  NodeIndex: Int32;
begin
  RegionID := (Sar(X, 6) shl 8) or Sar(Y, 6);

  NodeIndex := FindRegion(RegionID, False);
  if NodeIndex = -1 then
  begin
    RInitializeTileSettings;
    RInitializeTileHeights;

    CACHED_REGION_NODES[CACHED_REGION_INDEX].ID := RegionID;
    CACHED_REGION_NODES[CACHED_REGION_INDEX].Instanced := False;
    CACHED_REGION_NODES[CACHED_REGION_INDEX].TileSettings := CACHED_TILE_SETTINGS;
    CACHED_REGION_NODES[CACHED_REGION_INDEX].TileHeights := CACHED_TILE_HEIGHTS;
    CACHED_REGION_INDEX := (CACHED_REGION_INDEX + 1) mod Length(CACHED_REGION_NODES);
    writeln('cached tile info');
    Exit;
  end;

  CACHED_TILE_SETTINGS := CACHED_REGION_NODES[NodeIndex].TileSettings;
  CACHED_TILE_HEIGHTS := CACHED_REGION_NODES[NodeIndex].TileHeights;
end;
