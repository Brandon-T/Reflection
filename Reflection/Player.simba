{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once srl/shared.simba}

type
  TRSPlayer = record
    Name: String;
    Tile: TPoint;
    Destination: TPoint;
    CombatLevel: Int32;
    Equipment: Array of Int32;
    AnimationId: Int32;
    Health: Int32;
    Orientation: Int32;
  end;

{*
R_GetMe
~~~~~~~~~~~~~~~~~~~~~~
Returns a TRSPlayer containing information about the signed in account.

Example:
  Me := R_GetMe;
*}
Function R_GetMe: TRSPlayer;
var
  LocalPlayer: RSPlayer;
  Definition: RSPlayerDefinition;
begin
  LocalPlayer := RSPlayer.Me;
  Definition := LocalPlayer.Definition;
  Result.Name := LocalPlayer.Name;
  Result.Tile := LocalPlayer.Tile;
  Result.Destination := LocalPlayer.Destination;
  Result.CombatLevel := LocalPlayer.CombatLevel;
  Result.Equipment := Definition.Equipment;
  Result.AnimationId := LocalPlayer.AnimationId;
  Result.Health := LocalPlayer.Health;
  Result.Orientation := LocalPlayer.Orientation;
  Definition.Free;
  LocalPlayer.Free;
end;

{*
R_GetPlayers
~~~~~~~~~~~~~~~~~~~~~~
Returns an array of TRSPlayer containing all visible players.

Example:
  AllPlayers := R_GetPlayers;
*}
Function R_GetPlayers: Array of TRSPlayer;
var
  I: Int32;
  Players: Array of RSPlayer;
  Definition: RSPlayerDefinition;
begin
  Players := RSPlayer.AllPlayers;
  SetLength(Result, Length(Players));
  for I := 0 to high(Players) do
  begin
    Definition := Players[I].Definition;
    Result[I].Name := Players[I].Name;
    Result[I].Tile := Players[I].Tile;
    Result[I].Destination := Players[I].Destination;
    Result[I].CombatLevel := Players[I].CombatLevel;
    Result[I].Equipment := [];
    Result[I].AnimationId := Players[I].AnimationId;
    Result[I].Health := Players[I].Health;
    Result[I].Orientation := Players[I].Orientation;
    Definition.Free;
  end;
  RSTypeArray(Players).Free;
end;

{*
R_GetAnimation
~~~~~~~~~~~~~~~~~~~~~~
Returns the Animation ID of your player.

Example:
  MyAnimation := R_GetAnimation;
*}
Function R_GetAnimation: Int32;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.AnimationId;
  Me.Free;
end;

{*
R_IsMoving
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the player is moving.

Example:
  if R_IsMoving then
    ...
*}
Function R_IsMoving: Boolean;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.IsMoving;
  Me.Free;
end;

{*
R_GetDestination
~~~~~~~~~~~~~~~~~~~~~~
Returns the destination tile of the player.

Example:
  if (R_GetMe.Tile.DistanceTo(R_GetDestination) < 9) then
    ...
*}
Function R_GetDestination: RSTile;
var
  Me: RSPlayer;
begin
  Me := RSPlayer.Me;
  Result := Me.Destination;
  Me.Free;
end;
