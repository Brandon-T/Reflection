{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once Menu.simba}
{$include_once Inventory.simba}
{$include_once Mouse.simba}
{$include_once Timing.simba}

type
  //Emotes
  TEmote = (
    EMOTE_YES = 0,
    EMOTE_NO,
    EMOTE_BOW,
    EMOTE_ANGRY,
    EMOTE_THINK,
    EMOTE_WAVE,
    EMOTE_SHRUG,
    EMOTE_CHEER,
    EMOTE_BECKON,
    EMOTE_LAUGH,
    EMOTE_JUMP_FOR_JOY,
    EMOTE_YAWN,
    EMOTE_DANCE,
    EMOTE_JIG,
    EMOTE_SPIN,
    EMOTE_HEADBANG,
    EMOTE_CRY,
    EMOTE_BLOW_KISS,
    EMOTE_PANIC,
    EMOTE_RASPBERRY,
    EMOTE_CLAP,
    EMOTE_SALUTE,
    EMOTE_GOBLIN_BOW,
    EMOTE_GOBLIN_SALUTE,
    EMOTE_GLASS_BOX,
    EMOTE_CLIMB_ROPE,
    EMOTE_LEAN,
    EMOTE_GLASS_WALL,
    EMOTE_IDEA,
    EMOTE_STAMP,
    EMOTE_FLAP,
    EMOTE_SLAP_HEAD,
    EMOTE_ZOMBIE_WALK,
    EMOTE_ZOMBIE_DANCE,
    EMOTE_SCARED,
    EMOTE_RABBIT_HOP,
    EMOTE_SIT_UP,
    EMOTE_PUSH_UP,
    EMOTE_STAR_JUMP,
    EMOTE_JOG,
    EMOTE_ZOMBIE_HAND,
    EMOTE_HYPERMOBILE_DRINKER,
    EMOTE_SKILL_CAPE,
    EMOTE_AIR_GUITAR,
    EMOTE_URI_TRANSFORM,
    EMOTE_SMOOTH_DANCE,
    EMOTE_CRAZY_DANCE,
    EMOTE_PREMIER_SHIELD,
    EMOTE_EXPLORE);

  //Anvil
  TAnvil = (
    ANVIL_DAGGER = 0,
    ANVIL_SWORD,
    ANVIL_SCIMITAR,
    ANVIL_LONG_SWORD,
    ANVIL_TWO_H_SWORD,
    ANVIL_AXE,
    ANVIL_MACE,
    ANVIL_WARHAMMER,
    ANVIL_BATTLE_AXE,
    ANVIL_CLAWS,
    ANVIL_CHAIN_BODY,
    ANVIL_PLATE_LEGS,
    ANVIL_PLATE_SKIRT,
    ANVIL_PLATE_BODY,
    ANVIL_NAILS,
    ANVIL_MED_HELM,
    ANVIL_FULL_HELM,
    ANVIL_SQ_SHIELD,
    ANVIL_KITE_SHIELD,
    ANVIL_EXCLUSIVE1,
    ANVIL_DART_TIPS,
    ANVIL_ARROW_HEADS,
    ANVIL_KNIVES,
    ANVIL_EXCLUSIVE2,
    ANVIL_JAVELIN_HEADS,
    ANVIL_BOLTS,
    ANVIL_LIMBS);

  //Multi-Skill
  TMultiSkill = (
    SKILL_OPTION_1 = 0,
    SKILL_OPTION_2,
    SKILL_OPTION_3,
    SKILL_OPTION_4,
    SKILL_OPTION_5,
    SKILL_OPTION_6,
    SKILL_OPTION_7,
    SKILL_OPTION_8,
    SKILL_OPTION_9);

  //Furnace Crafting
  TRing = (
    RING_GOLD = 7,
    RING_SAPPHIRE,
    RING_EMERALD,
    RING_RUBY,
    RING_DIAMOND,
    RING_DRAGONSTONE,
    RING_ONYX,
    RING_SLAYER,
    RING_ZENYTE);

  TNecklace = (
    NECKLACE_GOLD = 21,
    NECKLACE_SAPPHIRE,
    NECKLACE_EMERALD,
    NECKLACE_RUBY,
    NECKLACE_DIAMOND,
    NECKLACE_DRAGONSTONE,
    NECKLACE_ONYX,
    NECKLACE_ZENYTE);

  TAmulet = (
    AMULET_GOLD = 34,
    AMULET_SAPPHIRE,
    AMULET_EMERALD,
    AMULET_RUBY,
    AMULET_DIAMOND,
    AMULET_DRAGONSTONE,
    AMULET_ONYX,
    AMULET_ZENYTE);

  TBracelet = (
    BRACELET_GOLD = 46,
    BRACELET_SAPPHIRE,
    BRACELET_EMERALD,
    BRACELET_RUBY,
    BRACELET_DIAMOND,
    BRACELET_DRAGONSTONE,
    BRACELET_ONYX,
    BRACELET_ZENYTE);


{*
R_WidgetIsHidden
~~~~~~~~~~~~~~~~~~~~~~
Returns true if a widget is hidden.

Example:
  if R_WidgetIsHidden(R_PrayerIDs[0]) then
    ...
*}
Function R_WidgetIsHidden(Constant: RWidget): Boolean;
var
  Widget: RSWidget;
begin
  Widget := RSWidget.Get(Constant.Group, Constant.Child);
  if Widget.ref <> nil then
  begin
    Result := Widget.IsHidden;
    Widget.Free;
  end;
end;

Function R_WaitUntilVisible(Constant: RWidget; WaitTime: Int32 = 1000): Boolean;
var
  Widget: RSWidget;
  T: Int32;

begin
  Widget := RSWidget.Get(Constant.Group, Constant.Child);
  if Widget.ref <> nil then
  begin
    T := GetTickCount;
    repeat
      Wait(50, RandomRange(100, 324));
    until (not Widget.IsHidden) or ((GetTickCount - T) > WaitTime);
    Result := Widget.IsHidden;
    Widget.Free;
  end;
end;

{*
EMOTES
~~~~~~
Functions for using emotes.
*}
Function R_EmoteIDs: Array of RWidget;
begin
  Result := [
    R_EMOTE_YES,
    R_EMOTE_NO,
    R_EMOTE_BOW,
    R_EMOTE_ANGRY,
    R_EMOTE_THINK,
    R_EMOTE_WAVE,
    R_EMOTE_SHRUG,
    R_EMOTE_CHEER,
    R_EMOTE_BECKON,
    R_EMOTE_LAUGH,
    R_EMOTE_JUMP_FOR_JOY,
    R_EMOTE_YAWN,
    R_EMOTE_DANCE,
    R_EMOTE_JIG,
    R_EMOTE_SPIN,
    R_EMOTE_HEADBANG,
    R_EMOTE_CRY,
    R_EMOTE_BLOW_KISS,
    R_EMOTE_PANIC,
    R_EMOTE_RASPBERRY,
    R_EMOTE_CLAP,
    R_EMOTE_SALUTE,
    R_EMOTE_GOBLIN_BOW,
    R_EMOTE_GOBLIN_SALUTE,
    R_EMOTE_GLASS_BOX,
    R_EMOTE_CLIMB_ROPE,
    R_EMOTE_LEAN,
    R_EMOTE_GLASS_WALL,
    R_EMOTE_IDEA,
    R_EMOTE_STAMP,
    R_EMOTE_FLAP,
    R_EMOTE_SLAP_HEAD,
    R_EMOTE_ZOMBIE_WALK,
    R_EMOTE_ZOMBIE_DANCE,
    R_EMOTE_SCARED,
    R_EMOTE_RABBIT_HOP,
    R_EMOTE_SIT_UP,
    R_EMOTE_PUSH_UP,
    R_EMOTE_STAR_JUMP,
    R_EMOTE_JOG,
    R_EMOTE_ZOMBIE_HAND,
    R_EMOTE_HYPERMOBILE_DRINKER,
    R_EMOTE_SKILL_CAPE,
    R_EMOTE_AIR_GUITAR,
    R_EMOTE_URI_TRANSFORM,
    R_EMOTE_SMOOTH_DANCE,
    R_EMOTE_CRAZY_DANCE,
    R_EMOTE_PREMIER_SHIELD,
    R_EMOTE_EXPLORE
  ];
end;

{*
R_Emotes
~~~~~~~~~~~~~~~~~~~~~~
Returns true if a widget is valid.

Example:
  if R_Emotes then
    ...
*}
Function R_Emotes: Boolean;
begin
  Result := RSWidget.IsValid(R_EMOTE_CONTAINER.Group, R_EMOTE_CONTAINER.Child);
end;

{*
R_WaitEmotes
~~~~~~~~~~~~~~~~~~~~~~
Returns true if a widget is valid within the time specified.

Example:
  if R_WaitEmotes(300) then
    ...
*}
Function R_WaitEmotes(timeout: UInt32): Boolean;
begin
  Result := WaitUntil(R_Emotes, 50, timeout);
end;

{*
R_DoEmote
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the emote is clicked.

Example:
  if R_DoEmote(EMOTE_YES) then
    ...
*}
Function R_DoEmote(Emote: TEmote): Boolean;
var
  ID: RWidget;
  Widget: RSWidget;
begin
  ID := R_EmoteIDs[Ord(Emote)];
  if (not R_Emotes) or R_WidgetIsHidden(ID) then
    Exit(False);

  Widget := RSWidget.Get(ID.Group, ID.Child);
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;


{*
ANVIL
~~~~~
Functions for using an anvil.
*}

Function R_AnvilIDs: Array of RWidget;
begin
  Result := [
    R_ANVIL_SMITH_DAGGER,
    R_ANVIL_SMITH_SWORD,
    R_ANVIL_SMITH_SCIMITAR,
    R_ANVIL_SMITH_LONG_SWORD,
    R_ANVIL_SMITH_TWO_H_SWORD,
    R_ANVIL_SMITH_AXE,
    R_ANVIL_SMITH_MACE,
    R_ANVIL_SMITH_WARHAMMER,
    R_ANVIL_SMITH_BATTLE_AXE,
    R_ANVIL_SMITH_CLAWS,
    R_ANVIL_SMITH_CHAIN_BODY,
    R_ANVIL_SMITH_PLATE_LEGS,
    R_ANVIL_SMITH_PLATE_SKIRT,
    R_ANVIL_SMITH_PLATE_BODY,
    R_ANVIL_SMITH_NAILS,
    R_ANVIL_SMITH_MED_HELM,
    R_ANVIL_SMITH_FULL_HELM,
    R_ANVIL_SMITH_SQ_SHIELD,
    R_ANVIL_SMITH_KITE_SHIELD,
    R_ANVIL_SMITH_EXCLUSIVE1,
    R_ANVIL_SMITH_DART_TIPS,
    R_ANVIL_SMITH_ARROW_HEADS,
    R_ANVIL_SMITH_KNIVES,
    R_ANVIL_SMITH_EXCLUSIVE2,
    R_ANVIL_SMITH_JAVELIN_HEADS,
    R_ANVIL_SMITH_BOLTS,
    R_ANVIL_SMITH_LIMBS
  ];
end;

{*
R_AnvilScreen
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the anvil screen is valid.

Example:
  if R_AnvilScreen then
    ...
*}
Function R_AnvilScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_ANVIL_CONTAINER.Group, R_ANVIL_CONTAINER.Child);
end;

{*
R_WaitAnvilScreen
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the anvil screen is valid within the time specified.

Example:
  if R_WaitAnvilScreen(200) then
    ...
*}
Function R_WaitAnvilScreen(timeout: UInt32): Boolean;
begin
  Result := WaitUntil(R_AnvilScreen, 50, timeout);
end;

{*
R_SmithAnvil
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the specified item was smithed.

Example:
  if R_SmithAnvil(ANVIL_DAGGER) then
    ...
*}
Function R_SmithAnvil(AnvilObject: TAnvil): Boolean;
var
  ID: RWidget;
  Widget: RSWidget;
begin
  ID := R_AnvilIDs[Ord(AnvilObject)];
  if (not R_AnvilScreen) or (R_WidgetIsHidden(ID)) then
    Exit(False);

  Widget := RSWidget.Get(ID.Group, ID.Child);
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;

{*
R_AnvilSetAmount
~~~~~~~~~~~~~~~~
Chooses the amount of items to smith using the anvil.
  Amount = 0: All

Example:
  if R_AnvilSetAmount(14) then
    ...
*}
Function R_AnvilSetAmount(Amount: Integer): Boolean;
var
  AnvilWidget, InputText: RSWidget;
  T, Retries: Integer;
begin
  if (not R_AnvilScreen) or (R_WidgetIsHidden(R_ANVIL_CONTAINER)) then
    Exit(False);

  if ((Amount = 0) or (Amount = 1) or (Amount = 5) or (Amount = 10)) then
  begin
    Case Amount of
      0: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_ALL.Group, R_ANVIL_AMOUNT_MAKE_ALL.Child);
      1: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_1.Group, R_ANVIL_AMOUNT_MAKE_1.Child);
      5: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_5.Group, R_ANVIL_AMOUNT_MAKE_5.Child);
      10: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_10.Group, R_ANVIL_AMOUNT_MAKE_10.Child);
    end;
    if AnvilWidget.ref = nil then
      Exit(False);

    Mouse.Click(AnvilWidget.Bounds, MOUSE_LEFT);
    Result := True;
    AnvilWidget.Free;
  end else
  begin
    AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_X.Group, R_ANVIL_AMOUNT_MAKE_X.Child);
    if AnvilWidget.ref = nil then
      Exit(False);

    Mouse.Click(AnvilWidget.Bounds, MOUSE_LEFT);
    if (RSWidget.Get(R_CHATBOX_INPUT_TITLE.Group, R_CHATBOX_INPUT_TITLE.Child).Text.Startswith("Enter amount:")) then
    begin
      InputText := RSWidget.Get(R_CHATBOX_INPUT_FULL.Group, R_CHATBOX_INPUT_FULL.Child);
      if InputText.ref = nil then
        Exit(False);

      T := GetTickCount;
      while (Retries < 3) and (GetTickCount - T < 5000) do
      begin
        if InputText.Text <> '*' then
        begin
          Keyboard.KeyDown(VK_BACK);
          while InputText.Text <> '*' do
          begin
            Wait(50 + RandomRange(50, 100));
          end;
          Keyboard.KeyUp(VK_BACK);
        end;

        Keyboard.Send(IntToStr(Amount));
        Result := InputText.Text = IntToStr(Amount) + '*';
        if Result then
        begin
          Keyboard.PressKey(VK_ENTER);
          InputText.Free;
          AnvilWidget.Free;
          Exit(True);
        end;

        Inc(Retries);
      end;
    end;
    AnvilWidget.Free;
  end;
end;

{*
MULTI-SKILL
~~~~~~~~~~~
Functions for interacting with skills that have options that appear in
  the chat box. (Crafting, Fletching, Herblore, Cooking, Etc.)
*}

Function R_OptionIDs: Array of RWidget;
begin
  Result := [
    R_MULTI_OPTION_1,
    R_MULTI_OPTION_2,
    R_MULTI_OPTION_3,
    R_MULTI_OPTION_4,
    R_MULTI_OPTION_5,
    R_MULTI_OPTION_6,
    R_MULTI_OPTION_7,
    R_MULTI_OPTION_8,
    R_MULTI_OPTION_9
  ];
end;

Function R_OptionKeyIDs: Array of RWidget;
begin
  Result := [
    R_MULTI_OPTION_1_KEY,
    R_MULTI_OPTION_2_KEY,
    R_MULTI_OPTION_3_KEY,
    R_MULTI_OPTION_4_KEY,
    R_MULTI_OPTION_5_KEY,
    R_MULTI_OPTION_6_KEY,
    R_MULTI_OPTION_7_KEY,
    R_MULTI_OPTION_8_KEY,
    R_MULTI_OPTION_9_KEY
  ];
end;

{*
R_SkillMenu
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the multi-skill menu is open.

Example:
    if R_SkillMenu then
      ...
*}
Function R_SkillMenu: Boolean;
begin
  Result := RSWidget.IsValid(R_MULTI_CONTAINER.Group, R_MULTI_CONTAINER.Child);
end;

{*
R_ChooseSkillOption
~~~~~~~~~~~~~~~~~~~~~~
Selects the desired skill option.

Example:
  R_ChooseSkillOption(SKILL_OPTION_1);
*}
Function R_ChooseSkillOption(Option: TMultiSkill): Boolean;
var
  Widget, WidgetKey: RSWidget;
  Widgets: Array of RSWidget;
  OptionButton, OptionKey: RWidget;
begin
  OptionButton := R_OptionIDs[Ord(Option)];
  OptionKey := R_OptionKeyIDs[Ord(Option)];

  if (not R_SkillMenu) or (R_WidgetIsHidden(OptionButton)) then
    Exit(False);

  WidgetKey := RSWidget.Get(OptionKey.Group, OptionKey.Child, OptionKey.Index);
  if WidgetKey.ref <> nil then
  begin
    Widgets += WidgetKey;
    if (WidgetKey.Text = '') or (Lowercase(WidgetKey.Text) = 'space') then
    begin
      Keyboard.Send(" ");
      RSTypeArray(Widgets).Free;
      Exit(True);
    end else
    begin
      Widget := RSWidget.Get(OptionButton.Group, OptionButton.Child);
      if Widget.ref <> nil then
      begin
        Widgets += Widget;
        Mouse.Click(Widget.Bounds, MOUSE_LEFT);
        Result := True;
        RSTypeArray(Widgets).Free;
      end;
    end;
  end;
end;

{*
R_ChooseSkillOption
~~~~~~~~~~~~~~~~~~~~~~
Selects the desired skill option.

Example:
  R_ChooseSkillOption(['Oak Longbow'], False);
*}
Function R_ChooseSkillOption(Options: Array of String; CaseSensitive: Boolean = True): Boolean; overload;
var
  Widget: RSWidget;
  Widgets: Array of RSWidget;
  I, J: Integer;
  Name: String;
begin
  if (not R_SkillMenu) then
    Exit(False);

  for I:=0 to High(R_OptionKeyIDs) do
  begin
    Widget := RSWidget.Get(R_OptionIDs[I].Group, R_OptionIDs[I].Child, R_OptionIDs[I].Index);
    if Widget.ref <> nil then
    begin
      Widgets += Widget;

      For J:=0 to High(Options) do
      begin
        Name := Widget.Name;
        if (CaseSensitive and (Pos(Options[J], Name) > 0)) or (not caseSensitive and (Pos(Lowercase(Options[J]), Lowercase(Name)) > 0)) then
        begin
          Mouse.Click(Widget.Bounds, MOUSE_LEFT);
          RSTypeArray(Widgets).Free;
          Exit(True);
        end;
      end;

    end;
  end;
  RSTypeArray(Widgets).Free;
end;

{*
CRAFTING JEWELRY
~~~~~
Functions for crafting jewelry at the furnace.
*}

{*
R_JewelryScreen
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the jewelry screen is valid.

Example:
  if R_JewelryScreen then
    ...
*}
Function R_JewelryScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_CRAFTING_CONTAINER.Group, R_CRAFTING_CONTAINER.Child);
end;

{*
R_WaitJewelryScreen
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the Jewelry screen is valid within the time specified.

Example:
  if R_WaitJewelryScreen(200) then
    ...
*}
Function R_WaitJewelryScreen(timeout: UInt32): Boolean;
begin
  Result := WaitUntil(R_JewelryScreen, 50, timeout);
end;

{*
R_JewelrySetAmount
~~~~~~~~~~~~~~~~
Chooses the amount of jewelry items to craft using the furnace.
  Amount = 0: All

Example:
  if R_JewelrySetAmount(14) then
    ...
*}
Function R_JewelrySetAmount(Amount: Integer): Boolean;
var
  JewelryWidget, InputText: RSWidget;
  T, Retries: Integer;
begin
  if (not R_JewelryScreen) or (R_WidgetIsHidden(R_CRAFTING_AMOUNT_CONTAINER)) then
    Exit(False);

  if ((Amount = 0) or (Amount = 1) or (Amount = 5) or (Amount = 10)) then
  begin
    Case Amount of
      0: JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_ALL.Group, R_CRAFTING_MAKE_ALL.Child);
      1: JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_1.Group, R_CRAFTING_MAKE_1.Child);
      5: JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_5.Group, R_CRAFTING_MAKE_5.Child);
      10: JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_10.Group, R_CRAFTING_MAKE_10.Child);
    end;

    if JewelryWidget.ref = nil then
      Exit(False);

    Mouse.Click(JewelryWidget.Bounds, MOUSE_LEFT);
    Result := True;
    JewelryWidget.Free;
  end else if (IntToStr(Amount) in RSWidget.Get(R_CRAFTING_MAKE_CUSTOM_TEXT.Group, R_CRAFTING_MAKE_CUSTOM_TEXT.Child, R_CRAFTING_MAKE_CUSTOM_TEXT.Index).Text) then
  begin
    JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_CUSTOM.Group, R_CRAFTING_MAKE_CUSTOM.Child, R_CRAFTING_MAKE_CUSTOM.Index);

    if JewelryWidget.ref = nil then
      Exit(False);

    Mouse.Click(JewelryWidget.Bounds, MOUSE_LEFT);
    Result := True;
    JewelryWidget.Free;
  end else
  begin
    JewelryWidget := RSWidget.Get(R_CRAFTING_MAKE_X.Group, R_CRAFTING_MAKE_X.Child);
    if JewelryWidget.ref = nil then
      Exit(False);

    Mouse.Click(JewelryWidget.Bounds, MOUSE_LEFT);
    Wait(260, RandomRange(560, 730));
    if (RSWidget.Get(R_CHATBOX_INPUT_TITLE.Group, R_CHATBOX_INPUT_TITLE.Child).Text.Startswith("Enter amount:")) then
    begin
      InputText := RSWidget.Get(R_CHATBOX_INPUT_FULL.Group, R_CHATBOX_INPUT_FULL.Child);
      if InputText.ref = nil then
        Exit(False);

      T := GetTickCount;
      while (Retries < 3) and (GetTickCount - T < 5000) do
      begin
        if InputText.Text <> '*' then
        begin
          Keyboard.KeyDown(VK_BACK);
          while InputText.Text <> '*' do
          begin
            Wait(50 + RandomRange(50, 100));
          end;
          Keyboard.KeyUp(VK_BACK);
        end;

        Keyboard.Send(IntToStr(Amount));
        Result := InputText.Text = IntToStr(Amount) + '*';
        if Result then
        begin
          Keyboard.PressKey(VK_ENTER);
          InputText.Free;
          JewelryWidget.Free;
          Exit(True);
        end;

        Inc(Retries);
      end;
    end;
    JewelryWidget.Free;
  end;
end;

{*
R_CraftJewelry
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the specified item was crafted.
  Acceptable Inputs:
    RING_GOLD
    RING_SAPPHIRE
    RING_EMERALD
    RING_RUBY
    RING_DIAMOND
    RING_DRAGONSTONE
    RING_ONYX
    RING_SLAYER
    RING_ZENYTE

Example:
  if R_CraftJewelry(RING_RUBY) then
    ...
*}
Function R_CraftJewelry(Jewelry: TRing): Boolean;
var
  Widget: RSWidget;
begin
  if (not R_JewelryScreen) then
    Exit(False);

  Widget := RSWidget.Get(R_INTERFACE_CRAFTING_FURNACE, Ord(Jewelry));
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;

{*
R_CraftJewelry
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the specified item was crafted.
  Acceptable Inputs:
    NECKLACE_GOLD
    NECKLACE_SAPPHIRE
    NECKLACE_EMERALD
    NECKLACE_RUBY
    NECKLACE_DIAMOND
    NECKLACE_DRAGONSTONE
    NECKLACE_ONYX
    NECKLACE_ZENYTE

Example:
  if R_CraftJewelry(NECKLACE_EMERALD) then
    ...
*}
Function R_CraftJewelry(Jewelry: TNecklace): Boolean; overload;
var
  Widget: RSWidget;
begin
  if (not R_JewelryScreen) then
    Exit(False);

  Widget := RSWidget.Get(R_INTERFACE_CRAFTING_FURNACE, Ord(Jewelry));
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;

{*
R_CraftJewelry
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the specified item was crafted.
  Acceptable Inputs:
    AMULET_GOLD
    AMULET_SAPPHIRE
    AMULET_EMERALD
    AMULET_RUBY
    AMULET_DIAMOND
    AMULET_DRAGONSTONE
    AMULET_ONYX
    AMULET_ZENYTE

Example:
  if R_CraftJewelry(AMULET_DIAMOND) then
    ...
*}
Function R_CraftJewelry(Jewelry: TAmulet): Boolean; overload;
var
  Widget: RSWidget;
begin
  if (not R_JewelryScreen) then
    Exit(False);

  Widget := RSWidget.Get(R_INTERFACE_CRAFTING_FURNACE, Ord(Jewelry));
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;

{*
R_CraftJewelry
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the specified item was crafted.
  Acceptable Inputs:
    BRACELET_GOLD
    BRACELET_SAPPHIRE
    BRACELET_EMERALD
    BRACELET_RUBY
    BRACELET_DIAMOND
    BRACELET_DRAGONSTONE
    BRACELET_ONYX
    BRACELET_ZENYTE

Example:
  if R_CraftJewelry(BRACELET_DRAGONSTONE) then
    ...
*}
Function R_CraftJewelry(Jewelry: TBracelet): Boolean; overload;
var
  Widget: RSWidget;
begin
  if (not R_JewelryScreen) then
    Exit(False);

  Widget := RSWidget.Get(R_INTERFACE_CRAFTING_FURNACE, Ord(Jewelry));
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;
