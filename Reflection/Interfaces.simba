{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once Menu.simba}
{$include_once Inventory.simba}
{$include_once Mouse.simba}
{$include_once Timing.simba}

const
  //Prayers
  PRAYER_THICK_SKIN                    =0;
  PRAYER_BURST_OF_STRENGTH             =1;
  PRAYER_CLARITY_OF_THOUGHT            =2;
  PRAYER_ROCK_SKIN                     =3;
  PRAYER_SUPERHUMAN_STRENGTH           =4;
  PRAYER_IMPROVED_REFLEXES             =5;
  PRAYER_RAPID_RESTORE                 =6;
  PRAYER_RAPID_HEAL                    =7;
  PRAYER_PROTECT_ITEM                  =8;
  PRAYER_STEEL_SKIN                    =9;
  PRAYER_ULTIMATE_STRENGTH             =10;
  PRAYER_INCREDIBLE_REFLEXES           =11;
  PRAYER_PROTECT_FROM_MAGIC            =12;
  PRAYER_PROTECT_FROM_MISSILES         =13;
  PRAYER_PROTECT_FROM_MELEE            =14;
  PRAYER_RETRIBUTION                   =15;
  PRAYER_REDEMPTION                    =16;
  PRAYER_SMITE                         =17;
  PRAYER_SHARP_EYE                     =18;
  PRAYER_MYSTIC_WILL                   =19;
  PRAYER_HAWK_EYE                      =20;
  PRAYER_MYSTIC_LORE                   =21;
  PRAYER_EAGLE_EYE                     =22;
  PRAYER_MYSTIC_MIGHT                  =23;
  PRAYER_CHIVALRY                      =24;
  PRAYER_PIETY                         =25;
  PRAYER_RIGOUR                        =26;
  PRAYER_AUGURY                        =27;
  PRAYER_PRESERVE                      =28;

  //Emotes
  EMOTE_YES                            =0;
  EMOTE_NO                             =1;
  EMOTE_BOW                            =2;
  EMOTE_ANGRY                          =3;
  EMOTE_THINK                          =4;
  EMOTE_WAVE                           =5;
  EMOTE_SHRUG                          =6;
  EMOTE_CHEER                          =7;
  EMOTE_BECKON                         =8;
  EMOTE_LAUGH                          =9;
  EMOTE_JUMP_FOR_JOY                   =10;
  EMOTE_YAWN                           =11;
  EMOTE_DANCE                          =12;
  EMOTE_JIG                            =13;
  EMOTE_SPIN                           =14;
  EMOTE_HEADBANG                       =15;
  EMOTE_CRY                            =16;
  EMOTE_BLOW_KISS                      =17;
  EMOTE_PANIC                          =18;
  EMOTE_RASPBERRY                      =19;
  EMOTE_CLAP                           =20;
  EMOTE_SALUTE                         =21;
  EMOTE_GOBLIN_BOW                     =22;
  EMOTE_GOBLIN_SALUTE                  =23;
  EMOTE_GLASS_BOX                      =24;
  EMOTE_CLIMB_ROPE                     =25;
  EMOTE_LEAN                           =26;
  EMOTE_GLASS_WALL                     =27;
  EMOTE_IDEA                           =28;
  EMOTE_STAMP                          =29;
  EMOTE_FLAP                           =30;
  EMOTE_SLAP_HEAD                      =31;
  EMOTE_ZOMBIE_WALK                    =32;
  EMOTE_ZOMBIE_DANCE                   =33;
  EMOTE_SCARED                         =34;
  EMOTE_RABBIT_HOP                     =35;
  EMOTE_SIT_UP                         =36;
  EMOTE_PUSH_UP                        =37;
  EMOTE_STAR_JUMP                      =38;
  EMOTE_JOG                            =39;
  EMOTE_ZOMBIE_HAND                    =40;
  EMOTE_HYPERMOBILE_DRINKER            =41;
  EMOTE_SKILL_CAPE                     =42;
  EMOTE_AIR_GUITAR                     =43;
  EMOTE_URI_TRANSFORM                  =44;
  EMOTE_SMOOTH_DANCE                   =45;
  EMOTE_CRAZY_DANCE                    =46;
  EMOTE_PREMIER_SHIELD                 =47;
  EMOTE_EXPLORE                        =48;

  //Anvil
  ANVIL_DAGGER                         =0;
  ANVIL_SWORD                          =1;
  ANVIL_SCIMITAR                       =2;
  ANVIL_LONG_SWORD                     =3;
  ANVIL_TWO_H_SWORD                    =4;
  ANVIL_AXE                            =5;
  ANVIL_MACE                           =6;
  ANVIL_WARHAMMER                      =7;
  ANVIL_BATTLE_AXE                     =8;
  ANVIL_CLAWS                          =9;
  ANVIL_CHAIN_BODY                     =10;
  ANVIL_PLATE_LEGS                     =11;
  ANVIL_PLATE_SKIRT                    =12;
  ANVIL_PLATE_BODY                     =13;
  ANVIL_NAILS                          =14;
  ANVIL_MED_HELM                       =15;
  ANVIL_FULL_HELM                      =16;
  ANVIL_SQ_SHIELD                      =17;
  ANVIL_KITE_SHIELD                    =18;
  ANVIL_EXCLUSIVE1                     =19;
  ANVIL_DART_TIPS                      =20;
  ANVIL_ARROW_HEADS                    =21;
  ANVIL_KNIVES                         =22;
  ANVIL_EXCLUSIVE2                     =23;
  ANVIL_JAVELIN_HEADS                  =24;
  ANVIL_BOLTS                          =25;
  ANVIL_LIMBS                          =26;


Function R_WidgetIsHidden(Constant: RWidget): Boolean;
var
  Widget: RSWidget;
begin
  Widget := RSWidget.Get(Constant.Group, Constant.Child);
  if Widget.ref <> nil then
  begin
    Result := Widget.IsHidden;
    Widget.Free;
  end;
end;

Function R_WaitUntilVisible(Constant: RWidget; WaitTime: Int32 = 1000): Boolean;
var
  Widget: RSWidget;
  T: Int32;
begin
  Widget := RSWidget.Get(Constant.Group, Constant.Child);
  if Widget.ref <> nil then
  begin
    T := GetTickCount;
    repeat
      Wait(50, RandomRange(100, 324));
    until (not Widget.IsHidden) or ((GetTickCount - T) > WaitTime);
    Result := Widget.IsHidden;
    Widget.Free;
  end;
end;

Function R_PrayerIDs: Array of RWidget;
begin
  Result := [
    R_PRAYER_THICK_SKIN,
    R_PRAYER_BURST_OF_STRENGTH,
    R_PRAYER_CLARITY_OF_THOUGHT,
    R_PRAYER_ROCK_SKIN,
    R_PRAYER_SUPERHUMAN_STRENGTH,
    R_PRAYER_IMPROVED_REFLEXES,
    R_PRAYER_RAPID_RESTORE,
    R_PRAYER_RAPID_HEAL,
    R_PRAYER_PROTECT_ITEM,
    R_PRAYER_STEEL_SKIN,
    R_PRAYER_ULTIMATE_STRENGTH,
    R_PRAYER_INCREDIBLE_REFLEXES,
    R_PRAYER_PROTECT_FROM_MAGIC,
    R_PRAYER_PROTECT_FORM_MISSILES,
    R_PRAYER_PROTECT_FROM_MELEE,
    R_PRAYER_RETRIBUTION,
    R_PRAYER_REDEMPTION,
    R_PRAYER_SMITE,
    R_PRAYER_SHARP_EYE,
    R_PRAYER_MYSTIC_WILL,
    R_PRAYER_HAWK_EYE,
    R_PRAYER_MYSTIC_LORE,
    R_PRAYER_EAGLE_EYE,
    R_PRAYER_MYSTIC_MIGHT,
    R_PRAYER_CHIVALRY,
    R_PRAYER_PIETY,
    R_PRAYER_RIGOUR,
    R_PRAYER_AUGURY,
    R_PRAYER_PRESERVE
  ];
end;

Function R_EmoteIDs: Array of RWidget;
begin
  Result := [
    R_EMOTE_YES,
    R_EMOTE_NO,
    R_EMOTE_BOW,
    R_EMOTE_ANGRY,
    R_EMOTE_THINK,
    R_EMOTE_WAVE,
    R_EMOTE_SHRUG,
    R_EMOTE_CHEER,
    R_EMOTE_BECKON,
    R_EMOTE_LAUGH,
    R_EMOTE_JUMP_FOR_JOY,
    R_EMOTE_YAWN,
    R_EMOTE_DANCE,
    R_EMOTE_JIG,
    R_EMOTE_SPIN,
    R_EMOTE_HEADBANG,
    R_EMOTE_CRY,
    R_EMOTE_BLOW_KISS,
    R_EMOTE_PANIC,
    R_EMOTE_RASPBERRY,
    R_EMOTE_CLAP,
    R_EMOTE_SALUTE,
    R_EMOTE_GOBLIN_BOW,
    R_EMOTE_GOBLIN_SALUTE,
    R_EMOTE_GLASS_BOX,
    R_EMOTE_CLIMB_ROPE,
    R_EMOTE_LEAN,
    R_EMOTE_GLASS_WALL,
    R_EMOTE_IDEA,
    R_EMOTE_STAMP,
    R_EMOTE_FLAP,
    R_EMOTE_SLAP_HEAD,
    R_EMOTE_ZOMBIE_WALK,
    R_EMOTE_ZOMBIE_DANCE,
    R_EMOTE_SCARED,
    R_EMOTE_RABBIT_HOP,
    R_EMOTE_SIT_UP,
    R_EMOTE_PUSH_UP,
    R_EMOTE_STAR_JUMP,
    R_EMOTE_JOG,
    R_EMOTE_ZOMBIE_HAND,
    R_EMOTE_HYPERMOBILE_DRINKER,
    R_EMOTE_SKILL_CAPE,
    R_EMOTE_AIR_GUITAR,
    R_EMOTE_URI_TRANSFORM,
    R_EMOTE_SMOOTH_DANCE,
    R_EMOTE_CRAZY_DANCE,
    R_EMOTE_PREMIER_SHIELD,
    R_EMOTE_EXPLORE
  ];
end;

Function R_AnvilIDs: Array of RWidget;
begin
  Result := [
    R_ANVIL_SMITH_DAGGER,
    R_ANVIL_SMITH_SWORD,
    R_ANVIL_SMITH_SCIMITAR,
    R_ANVIL_SMITH_LONG_SWORD,
    R_ANVIL_SMITH_TWO_H_SWORD,
    R_ANVIL_SMITH_AXE,
    R_ANVIL_SMITH_MACE,
    R_ANVIL_SMITH_WARHAMMER,
    R_ANVIL_SMITH_BATTLE_AXE,
    R_ANVIL_SMITH_CLAWS,
    R_ANVIL_SMITH_CHAIN_BODY,
    R_ANVIL_SMITH_PLATE_LEGS,
    R_ANVIL_SMITH_PLATE_SKIRT,
    R_ANVIL_SMITH_PLATE_BODY,
    R_ANVIL_SMITH_NAILS,
    R_ANVIL_SMITH_MED_HELM,
    R_ANVIL_SMITH_FULL_HELM,
    R_ANVIL_SMITH_SQ_SHIELD,
    R_ANVIL_SMITH_KITE_SHIELD,
    R_ANVIL_SMITH_EXCLUSIVE1,
    R_ANVIL_SMITH_DART_TIPS,
    R_ANVIL_SMITH_ARROW_HEADS,
    R_ANVIL_SMITH_KNIVES,
    R_ANVIL_SMITH_EXCLUSIVE2,
    R_ANVIL_SMITH_JAVELIN_HEADS,
    R_ANVIL_SMITH_BOLTS,
    R_ANVIL_SMITH_LIMBS
  ];
end;

(*
MAGIC SPELL BOOK
~~~~~~~~~~~~~~~~

  Functions for using the spell book.
*)

(*
EMOTES
~~~~~~

  Functions for using emotes.
*)

Function R_Emotes: Boolean;
begin
  Result := RSWidget.IsValid(R_EMOTE_CONTAINER.Group, R_EMOTE_CONTAINER.Child);
end;

Function R_WaitEmotes(timeout: UInt32): Boolean;
begin
  Result := WaitUntil(R_Emotes, 50, timeout);
end;

Function R_DoEmote(Emote: Int32): Boolean;
var
  ID: RWidget;
  Widget: RSWidget;
begin
  ID := R_EmoteIDs[Emote];
  if (not R_Emotes) or R_WidgetIsHidden(ID) then
    Exit(False);

  Widget := RSWidget.Get(ID.Group, ID.Child);
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;


(*
ANVIL
~~~~~

  Functions for using an anvil.
*)

Function R_AnvilScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_ANVIL_CONTAINER.Group, R_ANVIL_CONTAINER.Child);
end;

Function R_WaitAnvilScreen(timeout: UInt32): Boolean;
begin
  Result := WaitUntil(R_AnvilScreen, 50, timeout);
end;

Function R_SmithAnvil(AnvilObject: Int32): Boolean;
var
  ID: RWidget;
  Widget: RSWidget;
begin
  ID := R_AnvilIDs[AnvilObject];
  if (not R_AnvilScreen) or (R_WidgetIsHidden(ID)) then
    Exit(False);

  Widget := RSWidget.Get(ID.Group, ID.Child);
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;

(*
R_AnvilSetAmount
~~~~~~~~~~~~~~~~

  Chooses the amount of items to smith using the anvil.
  Amount = 0: All
*)
Function R_AnvilSetAmount(Amount: Integer): Boolean;
var
  AnvilWidget, InputText: RSWidget;
  T, Retries: Integer;
begin
  if (not R_AnvilScreen) or (R_WidgetIsHidden(R_ANVIL_CONTAINER)) then
    Exit(False);

  if ((Amount = 0) or (Amount = 1) or (Amount = 5) or (Amount = 10)) then
  begin
    Case Amount of
      0: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_ALL.Group, R_ANVIL_AMOUNT_MAKE_ALL.Child);
      1: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_1.Group, R_ANVIL_AMOUNT_MAKE_1.Child);
      5: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_5.Group, R_ANVIL_AMOUNT_MAKE_5.Child);
      10: AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_10.Group, R_ANVIL_AMOUNT_MAKE_10.Child);
    end;
    if AnvilWidget.ref = nil then
      Exit(False);

    Mouse.Click(AnvilWidget.Bounds, MOUSE_LEFT);
    Result := True;
    AnvilWidget.Free;
  end else
  begin
    AnvilWidget := RSWidget.Get(R_ANVIL_AMOUNT_MAKE_X.Group, R_ANVIL_AMOUNT_MAKE_X.Child);
    if AnvilWidget.ref = nil then
      Exit(False);

    Mouse.Click(AnvilWidget.Bounds, MOUSE_LEFT);
    if (RSWidget.Get(R_CHATBOX_INPUT_TITLE.Group, R_CHATBOX_INPUT_TITLE.Child).Text.Startswith("Enter amount:")) then
    begin
      InputText := RSWidget.Get(R_CHATBOX_INPUT_FULL.Group, R_CHATBOX_INPUT_FULL.Child);
      if InputText.ref = nil then
        Exit(False);

      T := GetTickCount;
      while (Retries < 3) and (GetTickCount - T < 5000) do
      begin
        if InputText.Text <> '*' then
        begin
          Keyboard.KeyDown(VK_BACK);
          while InputText.Text <> '*' do
          begin
            Wait(50 + RandomRange(50, 100));
          end;
          Keyboard.KeyUp(VK_BACK);
        end;

        Keyboard.Send(IntToStr(Amount));
        Result := InputText.Text = IntToStr(Amount) + '*';
        if Result then
        begin
          Keyboard.PressKey(VK_ENTER);
          InputText.Free;
          AnvilWidget.Free;
          Exit(True);
        end;

        Inc(Retries);
      end;
    end;
    AnvilWidget.Free;
  end;
end;


