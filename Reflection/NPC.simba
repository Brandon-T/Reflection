(*
R_NPCIsVisible
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns True if NPC is visible on the minimap.

Example:

   writeln(R_NPCIsVisible(1173));
*)
Function R_NPCIsVisible(ID: Int32): Boolean;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.IsVisible;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCIsVisible(Name: String): Boolean; overload;
var
  npcs: Array of RSNPC;
  i: Integer;
begin
  npcs := RSClient.AllNPCs;
  for i := 0 to length(npcs) - 1 do
  begin
    if (npcs[i].Definition.Name = Name) then
      exit(True);
  end;
end;

(*
R_NPCGetCombatLevel
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the combat level of the given NPC if they are visible on
  the minimap or 0 if the NPC is not visible.

Example:

   writeln(R_NPCGetCombatLevel(1173));
*)
Function R_NPCGetCombatLevel(ID: Int32): Int32;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.CombatLevel;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetCombatLevel(Name: String): Int32; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      Result := Definition.CombatLevel;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetName
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the name of the given NPC if they are visible on
  the minimap.

Example:

   writeln(R_NPCGetName(3114));
*)
Function R_NPCGetName(ID: Int32): String;
var
  npcs: Array of RSNPC;
  i: Integer;
begin
  npcs := RSClient.AllNPCs;
  for i := 0 to length(npcs) - 1 do
  begin
    if (npcs[i].Definition.ID = ID) then
      exit(npcs[i].Definition.Name);
  end;
end;

(*
R_NPCGetID
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the ID of the given NPC if they are visible on
  the minimap.

Example:

   writeln(R_NPCGetID('Chicken'));
*)
Function R_NPCGetID(Name: String): TIntegerArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, ID: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if ((Definition.Name = Name) and (not (Result.Find(Definition.ID) > -1))) then
      Result += ID;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetActions
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the actions of the given NPC if they are visible on
  the minimap.

Example:

   writeln(R_NPCGetActions(3114));
*)
Function R_NPCGetActions(ID: Int32): TStringArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, J: Integer;
  Actions: TStringArray;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.Actions;
      Definition.Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetActions(Name: String): TStringArray; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I, J: Integer;
  Actions: TStringArray;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      Result := Definition.Actions;
      Definition.Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetTile
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Tile of the given NPC if they are visible on
  the minimap.

Example:

   writeln(R_NPCGetTile('Chicken'));
*)
Function R_NPCGetTile(Name: String): Array of RSTile;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: Array of RSTile;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if ((Definition.Name = Name)) then
      Tiles += NPCs[I].Tile;
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetTile(ID: Int32): Array of RSTile; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: Array of RSTile;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if ((Definition.ID = ID)) then
      Tiles += NPCs[I].Tile;
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetTileMS
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Tile of the given NPC if they are on screen.

Example:

   writeln(R_NPCGetTileMS('Chicken'));
*)
Function R_NPCGetTileMS(Name: String): Array of RSTile;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: Array of RSTile;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.Name = Name)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles += NPCs[I].Tile;
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetTileMS(ID: Int32): Array of RSTile;  overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: Array of RSTile;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.ID = ID)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles += NPCs[I].Tile;
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetMSCoords
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Pixel Coordinates of the given NPC if they are on screen.

Example:

   writeln(R_NPCGetMSCoords('Chicken'));
*)
Function R_NPCGetMSCoords(Name: String): TPointArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: TPointArray;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.Name = Name)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles.Append(Tile);
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCGetMSCoords(ID: Int32): TPointArray; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: TPointArray;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.ID = ID)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles.Append(Tile);
    Definition.Free;
  end;
  Result := Tiles;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetMSCoordsSort
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Pixel Coordinates of the given NPC if they are on screen
  as a sorted array from the middle of the screen.

Example:

   writeln(R_NPCGetMSCoordsSort('Chicken'));
*)
Function R_NPCGetMSCoordsSort(Name: String): TPointArray;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: TPointArray;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.Name = Name)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles.Append(Tile);
    Definition.Free;
  end;
  Tiles.sort(MSBounds.Middle);
  RSTypeArray(NPCs).Free;
  Result := Tiles;
end;


(*
R_NPCGetMSCoordsClosest
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Pixel Coordinates of the closest given NPC if they are on screen.

Example:

   writeln(R_NPCGetMSCoordsClosest('Chicken'));
*)
Function R_NPCGetMSCoordsClosest(Name: String): TPoint;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  Tiles: TPointArray;
  Tile: RSTile;
  MSBounds: TBox;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  MSBounds := R_MainscreenBounds;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    Tile := NPCs[I].LocalTile.TileToMS;
    if ((Definition.Name = Name)  and (Tile.X > MSBounds.X1) and (Tile.X < MSBounds.X2) and (Tile.Y > MSBounds.Y1) and (Tile.Y < MSBounds.Y2)) then
      Tiles.Append(Tile);
    Definition.Free;
  end;
  Tiles.sort(MSBounds.Middle);
  Result := Tiles[0];
  RSTypeArray(NPCs).Free;
end;
