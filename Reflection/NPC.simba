type TRSNPC = record
    Name: String;
    Id: Int32;
    Tile: RSTile;
    CombatLevel: Int32;
    Actions: TStringArray;
    MSCoord: TPoint;
end;

(*
R_GetAllNPCs
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns all visible NPCs.

Example:

   writeln(R_GetAllNPCs);
*)
Function R_GetAllNPCs(): Array of TRSNPC;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  NPC: TRSNPC;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    NPC.Name := Definition.Name;
    NPC.ID := Definition.ID;
    NPC.CombatLevel := Definition.CombatLevel;
    NPC.Tile := NPCs[I].Tile;
    NPC.Actions := Definition.Actions;
    if (NPCs[I].LocalTile.TileToMS.InBox(R_MainscreenBounds)) then
      NPC.MSCoord := NPCs[I].LocalTile.TileToMS
    else NPC.MSCoord := [-1,-1];
    Result += NPC;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_GetNPCs
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns all visible NPCs of a specific ID or Name.

Example:

   writeln(R_GetNPCs(1173));
*)
Function R_GetNPCs(ID: Int32): Array of TRSNPC;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  NPC: TRSNPC;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      NPC.Name := Definition.Name;
      NPC.ID := Definition.ID;
      NPC.CombatLevel := Definition.CombatLevel;
      NPC.Tile := NPCs[I].Tile;
      NPC.Actions := Definition.Actions;
      if (NPCs[I].LocalTile.TileToMS.InBox(R_MainscreenBounds)) then
        NPC.MSCoord := NPCs[I].LocalTile.TileToMS
      else NPC.MSCoord := [-1,-1];
      Result += NPC;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_GetNPCs(Name: String): Array of TRSNPC; overload;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  NPC: TRSNPC;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      NPC.Name := Definition.Name;
      NPC.ID := Definition.ID;
      NPC.CombatLevel := Definition.CombatLevel;
      NPC.Tile := NPCs[I].Tile;
      NPC.Actions := Definition.Actions;
      if (NPCs[I].LocalTile.TileToMS.InBox(R_MainscreenBounds)) then
        NPC.MSCoord := NPCs[I].LocalTile.TileToMS
      else NPC.MSCoord := [-1,-1];
      Result += NPC;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCIsVisible
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns True if NPC is visible on the minimap.

Example:

   writeln(R_NPCIsVisible(1173));
*)
Function R_NPCIsVisible(ID: Int32): Boolean;
var
  NPCs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.ID = ID then
    begin
      Result := Definition.IsVisible;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

Function R_NPCIsVisible(Name: String): Boolean; overload;
var
  npcs: Array of RSNPC;
  Definition: RSNPCDefinition;
  I: Integer;
begin
  NPCs := RSClient.AllNPCs;
  for I := 0 to High(NPCs) do
  begin
    Definition := NPCs[I].Definition;
    if Definition.Name = Name then
    begin
      Result := Definition.IsVisible;
      Definition.Free;
      RSTypeArray(NPCs).Free;
      Exit;
    end;
    Definition.Free;
  end;
  RSTypeArray(NPCs).Free;
end;

(*
R_NPCGetMSCoordsSort
~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns the Pixel Coordinates of the given NPC if they are on screen
  as a sorted array from the middle of the screen.

Example:

   writeln(R_NPCGetMSCoordsSort('Chicken'));
*)
Function R_NPCGetMSCoordsSort(ID: Int32): TPointArray;
var
  NPCs: Array of TRSNPC;
  I: Integer;
  Tiles: TPointArray;
begin
  NPCs := R_GetNPCs(ID);
  for I := 0 to HIGH(NPCs) do
    if NPCs[I].MSCoord.X <> -1 then
      Tiles += NPCs[I].MSCoord;
  Tiles.sort(R_MainscreenBounds.Middle);
  Result := Tiles;
end;

Function R_NPCGetMSCoordsSort(Name: String): TPointArray; overload;
var
  NPCs: Array of TRSNPC;
  I: Integer;
  Tiles: TPointArray;
begin
  NPCs := R_GetNPCs(Name);
  for I := 0 to HIGH(NPCs) do
    if NPCs[I].MSCoord.X <> -1 then
      Tiles += NPCs[I].MSCoord;
  Tiles.sort(R_MainscreenBounds.Middle);
  Result := Tiles;
end;
