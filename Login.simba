{$include_once Internal/RSWidget.simba}
{$include_once Interfaces.simba}
{$include_once Lobby.simba}
{$include_once Worlds.simba}

(*
LOGIN
=====

  Login functions.
*)

type
  TRSLogin = record
    RootPoint: TPoint;
    LoginEntryBox: TBox;
    PasswordEntryBox: TBox;
    LoginButtonBox: TBox;
    CancelButtonBox: TBox;
    ResponseBox: TBox;
    WorldBox: TBox;
    ExistingUserBox: TBox;
    TryAgainBox: TBox;
    WarningBox: TBox;
    BackBox: TBox;
    OkBox: TBox;
 end;

const
  COLOR_LOGIN_YELLOW = 65535;
  COLOR_LOGIN_WHITE = 16777215;

var
  R_LoginScreen: TRSLogin;

{*
TRSLogin.__Setup
~~~~~~~~~~~~~~~~
Sets up the locations of different options on the login page based on the size
  of your client.
*}
Procedure TRSLogin.__Setup;
var
  X, Y, LoginDTM: Integer;
begin
  with Self do
  begin
    LoginDTM := DTMFromString('mkwEAAHicE2ZgYOBmZGAwAeJIIE4DYj8gLgPieCYGhk9AejEQbwfiKiC2A2JRIF4CxMeB+AsQKwLVpQHxRCAWA5pXBcTFQJwMxIlAnALEqkDsAsQxUDF5INYA4mAgtgHiqVD1rVD5iUDML8DL8P2bI0NUuDDDo8fvwGxJGRkGWzt3Bg+vIAa/gFiGlav3ouDcglqGzt65DLEJ+WB1IDUgtdQEjFTEWAAANNMplA==');
    FindDTM(LoginDTM, X, Y, GetClientBounds);
    self.RootPoint := Point(X, Y);
    FreeDTM(LoginDTM);
    OkBox := [143 + self.RootPoint.X, 306 - self.RootPoint.Y, 279 + self.RootPoint.X, 337 - self.RootPoint.Y];
    LoginEntryBox := [142 + self.RootPoint.X, 264 - self.RootPoint.Y, 371 + self.RootPoint.X, 275 - self.RootPoint.Y];
    PasswordEntryBox := [171 + self.RootPoint.X, 278 - self.RootPoint.Y, 371 + self.RootPoint.X, 291 - self.RootPoint.Y];
    ResponseBox := [30 + self.RootPoint.X, 154 + self.RootPoint.Y, 390 + self.RootPoint.X, 217 + self.RootPoint.Y];
    ExistingUserBox := [224 + self.RootPoint.X, 253 + self.RootPoint.Y, 358 + self.RootPoint.X, 284 + self.RootPoint.Y];
    TryAgainBox := [144 + self.RootPoint.X, 238 + self.RootPoint.Y, 277 + self.RootPoint.X, 269 + self.RootPoint.Y];
    BackBox := [144 + self.RootPoint.X, 288 + self.RootPoint.Y, 277 + self.RootPoint.X, 320 + self.RootPoint.Y];
    LoginButtonBox := [62 + self.RootPoint.X, 283 + self.RootPoint.Y, 197 + self.RootPoint.X, 316 + self.RootPoint.Y];
    CancelButtonBox := [224 + self.RootPoint.X, 283 + self.RootPoint.Y, 358 + self.RootPoint.X, 316 + self.RootPoint.Y];
    WorldBox := [-162 + self.RootPoint.X, 442 + self.RootPoint.Y, -71 + self.RootPoint.X, 474 + self.RootPoint.Y];
  end;
end;

{*
TRSLogin.IsOpen
~~~~~~~~~~~~~~~
Returns true if any part of the login page is visible.
*}
Function TRSLogin.IsOpen: Boolean;
var
  X, Y, LoginDTM: Integer;
begin
  LoginDTM := DTMFromString('mkwEAAHicE2ZgYOBmZGAwAeJIIE4DYj8gLgPieCYGhk9AejEQbwfiKiC2A2JRIF4CxMeB+AsQKwLVpQHxRCAWA5pXBcTFQJwMxIlAnALEqkDsAsQxUDF5INYA4mAgtgHiqVD1rVD5iUDML8DL8P2bI0NUuDDDo8fvwGxJGRkGWzt3Bg+vIAa/gFiGlav3ouDcglqGzt65DLEJ+WB1IDUgtdQEjFTEWAAANNMplA==');
  if FindDTM(LoginDTM, X, Y, GetClientBounds) then
  begin
    self.RootPoint := Point(X, Y);
    Result := True;
  end else Result := False;
  FreeDTM(LoginDTM);
end;

{*
TRSLogin.IsWelcomeOpen
~~~~~~~~~~~~~~~~~~~~~~
Returns true if the 'Welcome' information is displayed on login page.
*}
Function TRSLogin.IsWelcomeOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Existing User', 'UpChars07_s', COLOR_LOGIN_WHITE, 1, Self.ExistingUserBox);
end;

{*
TRSLogin.IsInvaildDetailsOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns true if the 'Invalid Credentials' information is displayed on login page.
*}
Function TRSLogin.IsInvaildDetailsOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Try again', 'SmallChars07', COLOR_LOGIN_WHITE, 1, Self.TryAgainBox);
end;

{*
TRSLogin.IsDisabledOpen
~~~~~~~~~~~~~~~~~~~~~~~
Returns true if the 'Disabled' information is displayed on login page.
*}
Function TRSLogin.IsDisabledOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Back', 'UpChars07_s', COLOR_LOGIN_WHITE, 1, Self.BackBox);
end;

{*
TRSLogin.IsDisconnectedOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns true if the 'Disconnected' information is displayed on login page.
*}
Function TRSLogin.IsDisconnectedOpen: Boolean;
var
  P: TPoint;
begin
  Result := srl.FindText(P, 'Ok', 'UpChars07_s', COLOR_LOGIN_WHITE, 1, Self.OkBox);
end;

{*
TRSLogin.Open
~~~~~~~~~~~~~
Returns true if the login screen was opened.
*}
Function TRSLogin.Open: Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + 10000;
  while (T > GetTickCount()) do
  begin
    if Self.IsOpen() then
    begin
      if Self.IsWelcomeOpen() then
        Mouse.Click(Self.ExistingUserBox, mouse_Left);
      if Self.IsInvaildDetailsOpen() then
        Mouse.Click(Self.TryAgainBox, mouse_Left);
      if Self.IsDisabledOpen() then
        Mouse.Click(Self.BackBox, mouse_Left);
      if Self.IsDisconnectedOpen() then
        Mouse.Click(Self.OkBox, mouse_Left);
    end;

    if Self.IsOpen() and
      (not Self.IsWelcomeOpen()) and (not Self.IsInvaildDetailsOpen()) and
      (not Self.IsDisabledOpen) and (not Self.IsDisconnectedOpen()) then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

{*
TRSLogin.IsCaret
~~~~~~~~~~~~~~~~
Returns true if the blinking cursor is present in the box.
*}
Function TRSLogin.IsCaret(B: TBox): Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + Random(600, 800);

  while (T > GetTickCount()) do
  begin
    if (CountColor(COLOR_LOGIN_YELLOW, B) > 0) then
      Exit(True);

    Wait(Random(50, 100));
  end;
end;

{*
TRSLogin.SetCaret
~~~~~~~~~~~~~~~~~
Returns true if the blinking cursor was moved into the desired box.
*}
Function TRSLogin.SetCaret(B: TBox): Boolean;
begin
  if IsCaret(B) then
    Exit(True);
  Keyboard.PressKey(VK_TAB);
  if IsCaret(B) then
    Exit(True);
end;

{*
TRSLogin.EnterLogin
~~~~~~~~~~~~~~~~~~~
Returns true if we have entered the account's username/email.
*}
Function TRSLogin.EnterLogin(Login: String): Boolean;
begin
  if (GetTextAtEx(Self.LoginEntryBox, 0, 3, 3, COLOR_LOGIN_WHITE, 0, 'UpChars07_s') = Login) then
    Exit(True);

  if SetCaret(Self.LoginEntryBox) then
  begin
    while (CountColor(COLOR_LOGIN_WHITE, Self.LoginEntryBox) > 0) do
    begin
      Keyboard.PressKey(VK_BACK);

      Wait(Random(30, 130));
    end;

    Keyboard.Send(Login);

    Exit(True);
  end;
end;

{*
TRSLogin.EnterPassword
~~~~~~~~~~~~~~~~~~~~~~
Returns true if we have entered the account's password.
*}
Function TRSLogin.EnterPassword(Password: String): Boolean;
begin
  if SetCaret(Self.PasswordEntryBox) then
  begin
    while (CountColor(COLOR_LOGIN_WHITE, Self.PasswordEntryBox) > 0) do
    begin
      Keyboard.PressKey(VK_BACK);

      Wait(Random(30, 130));
    end;

    Keyboard.Send(Password);

    Exit(True);
  end;
end

{*
TRSLogin.EnterDetails
~~~~~~~~~~~~~~~~~~~~~
Returns true if we have entered the login details.
*}
Function TRSLogin.EnterDetails(Login, Password: String): Boolean;
begin
  if Self.Open() and EnterLogin(Login) and EnterPassword(Password) then
  begin
    Keyboard.PressKey(VK_RETURN);
    Exit(True);
  end;
end;

{*
TRSLogin.OpenWorldSwitcher
~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns true if we have opened the world switcher.
*}
Function TRSLogin.OpenWorldSwitcher(): Boolean;
begin
  if (WorldPanel.IsOpen()) then
    Exit(True);

  if Self.IsOpen() then
  begin
    Mouse.Click(Self.WorldBox, mouse_Left);

    if WaitUntil(WorldPanel.isOpen(), 50, Random(2500, 3500)) then
      Exit(True);
  end else
    Writeln('Cannot open world switcher - Login screen not open');
end;

{*
TRSLogin.GetResponse
~~~~~~~~~~~~~~~~~~~~
Returns the response on the login window.
*}
Function TRSLogin.GetResponse: String;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: Integer;
begin
  if (FindColors(TPA, COLOR_LOGIN_YELLOW, Self.ResponseBox)) then
  begin
    ATPA := SplitTPAEx(TPA, 10, 1);
    SortATPAFromFirstPointY(ATPA, Point(0, 0));
    for i := 0 to High(ATPA) do
      Result += Trim(GetTextAtEx(GetTPABounds(ATPA[i]), 0, 3, 3, COLOR_LOGIN_YELLOW, 0, 'UpChars07_s'));
  end;
end;

{*
TRSLogin.WaitResponse
~~~~~~~~~~~~~~~~~~~~~~
Returns waits to get a response after an attempt to log in.
*}
Function TRSLogin.WaitResponse: String;
const
  VAILD_CONNECTING = 'Connecting to server...';
var
  T: UInt64;
begin
  // First wait for connectiong response
  T := GetTickCount() + 5000;
  while Self.IsOpen() and (Result <> VAILD_CONNECTING) and (T > GetTickCount()) do
  begin
    Result := GetResponse();

    Wait(Random(50, 100));
  end;

  // Wait until connecting response has gone
  while Self.IsOpen() and (Result = VAILD_CONNECTING) do
  begin
    Result := GetResponse();

    Wait(Random(50, 100));
  end;

  Result := GetResponse();
end;

{*
TRSLogin.GetCurrentWorld
~~~~~~~~~~~~~~~~~~~~~~~~
Returns the world that is selected.

Example:
  if (MyPlayer.GetCurrentWorld <> 400)  then
    ...
*}

Function TRSLogin.GetCurrentWorld: Int32;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  if Self.IsOpen and FindColors(TPA, COLOR_LOGIN_WHITE, Self.WorldBox) then
  begin
    ATPA := SplitTPAEx(TPA, 10, 3);
    SortATPAFromFirstPointY(ATPA, [0, 0]);

    Result := StrToIntDef(ExtractFromStr(GetTextAtEx(GetTPABounds(ATPA[0]), 0, 3, 3, COLOR_LOGIN_WHITE, 0, 'UpChars07_s'), Numbers), -1);
  end;
end;

{*
TRSLogin.IsLoggedIn
~~~~~~~~~~~~~~~~~~~
Checks the login state to see if we are logged in.

Example:
  if not MyPlayer.IsLoggedIn then
    MyPlayer.Login;
*}

Function TRSLogin.IsLoggedIn: Boolean;
begin
  Result := (not R_IsLobbyOpen) and (RGetInt(R_EIOS, nil, Client_GameState) = 30) and (RGetInt(R_EIOS, nil, Client_LoginState) = 2);
end;

{*
R_IsLoggedIn
~~~~~~~~~~~~
Checks the login state to see if we are logged in.

Example:
  if not R_IsLoggedIn then
    MyPlayer.Login;
*}
Function R_IsLoggedIn: Boolean;
begin
  Result := R_LoginScreen.IsLoggedIn;
end;

begin
  R_LoginScreen.__Setup;
end;
