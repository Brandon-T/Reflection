(*
Worlds
=============
Methods that involve any interfaces to do with world switching
*)

type
  ERSWorldType = (
    TYPE_FREE,
    TYPE_MEMBERS,
    TYPE_PVP,
    TYPE_DEADMAN,
    TYPE_SKILL,
    TYPE_EVENT,
    TYPE_USA,
    TYPE_GERMANY,
    TYPE_UK,
    TYPE_AUSTRALIA);

  TRSWorldTypes = set of ERSWorldType;

  TRSWorldObject = record
    ID: Int32;
    Properties: TRSWorldTypes;
  end;

  TRSWorldObjectArray = array of TRSWorldObject;

  TRSWorldFilters = record
    Properties: TRSWorldTypes;
    Worlds: TIntegerArray;
  end;

  TRSWorldPanel = record
    RootPoint: TPoint;
    PanelBounds: TBox;
    Worlds: TRSWorldObjectArray; // Must be initalized once with TRSWorldPanel.Worlds.Load()
 end;

var
  R_DEFAULT_WORLD_FILTER: TRSWorldFilters = [[TYPE_PVP, TYPE_DEADMAN, TYPE_SKILL, TYPE_EVENT, TYPE_AUSTRALIA], [302, 330]]; // 302 & 330 are often full.
  WorldPanel: TRSWorldPanel;

{*
TRSWorldObjectArray.Load
~~~~~~~~~~~~~~~~~~~~~~~~
Loads the TRSWorldObjectArray with world information.
*}
Procedure TRSWorldObjectArray.Load;
var
  List, Info: TStringArray;
  World: TRSWorldObject;
  Prop: String;
  i: Int32;
begin
  List := MultiBetween(GetPage('http://oldschool.runescape.com/slu'), '<tr class=''server-list__row', '</tr>');

  for i := 0 to High(List) do
  begin
    // [0]URL
    // [1]Players
    // [2]Location
    // [3]Type
    // [4]Activity

    Info := MultiBetween(List[i], 'server-list__row-cell', '</td>');
    if (Length(Info) <> 5) then
      Continue;

    World := [StrToIntDef(Between('world-', '''', Info[0]), - 1)];
    if (World.ID > 400) then
      World.Properties += TYPE_EVENT;

    for Prop in [Info[2], Info[3], Info[4]] do
      case LowerCase(Copy(Prop, Pos('>', Prop) + 1)) of
        'members':
          World.Properties += TYPE_MEMBERS;
        'free':
          World.Properties += TYPE_FREE;
        '500 skill total', '750 skill total', '1000 skill total', '1250 skill total', '1500 skill total', '1750 skill total', '2000 skill total':
          World.Properties += TYPE_SKILL;
        'deadman':
          World.Properties += TYPE_DEADMAN;
        'pvp world - high risk', 'pvp world', 'pvp world - free':
          World.Properties += TYPE_PVP;
        'united states':
          World.Properties += TYPE_USA;
        'germany':
          World.Properties += TYPE_GERMANY;
        'united kingdom':
          World.Properties += TYPE_UK;
        'australia':
          World.Properties += TYPE_AUSTRALIA;
      end;

    Self += World;
  end;

  if (Length(Self) = 0) then
    TerminateScript("Failed to load worlds.");
end;

{*
TRSWorldPanel.Init
~~~~~~~~~~~~~~~~~~
Initializes the settings for the World Panel.
  Note: Must be called once the world switcher is opened for other functions to work.
*}
Procedure TRSWorldPanel.Init;
var
  WorldPanelDTM, X, Y: Integer;
begin
  WorldPanelDTM := DTMFromString('m1gAAAHic42JgYEgA4jtA/AGI3wHxVyT2Z6gcSA0MMAExFxCzAjEvEItAsRgU751hCcYX9qoxxASygvHt27cZFixYAMY96VxgTCxgJBIjAACxlBch');
  FindDTM(WorldPanelDTM, X, Y, GetClientBounds);
  self.RootPoint := Point(X, Y);
  FreeDTM(WorldPanelDTM);
  self.PanelBounds := [self.RootPoint.X, self.RootPoint.Y, 765 + self.RootPoint.X, 490 + self.RootPoint.Y];
end;

{*
TRSWorldPanel.IsOpen
~~~~~~~~~~~~~~~~~~~~
Returns true if the World Panel is open.
*}
Function TRSWorldPanel.IsOpen: Boolean;
var
  P: TPoint;
begin
  self.Init;

  if srl.FindText(P, 'Select a world', 'UpChars07_s', [self.RootPoint.X, self.RootPoint.Y, 124 + self.RootPoint.X, 24 + self.RootPoint.Y]) then
    Result := True;
end;

{*
TRSWorldPanel.FixWorld
~~~~~~~~~~~~~~~~~~~~~~
Returns a fixed value of the specified world if it is incorrect.
*}
Function TRSWorldPanel.FixWorld(wo: Integer): Integer;
var
  w: String;
begin
  w := IntToStr(wo);
  if (Length(w) = 3) then
    w := Copy(w, 2, Length(w));

  if (w[1] = '0') then
    w := Copy(w, 2, Length(w));

  Result := StrToInt(w);
end;

{*
TRSWorldPanel.SelectWorld
~~~~~~~~~~~~~~~~~~~~~~~~~
Returns true if the world has been selected.
*}
Function TRSWorldPanel.SelectWorld(wo: Integer): Boolean;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: Integer;
  B: TBox;
  P: TPoint;
begin
  Result := False;
  if (not FindColors(TPA, clBlack, self.PanelBounds)) then
    Exit;

  { Pretty much get everything black, remove the biggest (the background)
    and then a simple cluster so we have text }
  ATPA := FloodFillTPA(TPA);
  SortATPASize(ATPA, True);
  TPA := MergeATPA(Copy(ATPA, 1, Length(ATPA) - 1));
  ATPA := ClusterTPAEx(TPA, 5, 1);

  for i := 0 to High(ATPA) do
  begin
    B := GetTPABounds(ATPA[i]);

    if srl.FindText(P, toString(wo), 'UpChars07_s', clBlack, 0, B) then
    begin
      B := B.Expand(-2, 3); { Adjust the bounds so it's the whole button }
      B.X2 += 60;
      Mouse.Click(B, mouse_Left);
      Wait(Random(200, 500));
      Exit(True);
    end;
  end;

  Writeln('World not found');
end;

{*
TRSWorldPanel.Close
~~~~~~~~~~~~~~~~~~~
Returns true if the world panel is/was closed.
*}
Function TRSWorldPanel.Close: Boolean;
begin
  if not Self.IsOpen then
    Result := True
  else begin
    Mouse.Click([self.PanelBounds.X2 - 55, self.PanelBounds.Y1 + 4, self.PanelBounds.X2 - 8, self.PanelBounds.Y1 + 18], mouse_Left);
    Wait(Random(500, 1000));
    Result := self.IsOpen;
  end;
end;

{*
TRSWorldPanel.GetWorld
~~~~~~~~~~~~~~~~~~~~~~
Selects a random world which isn't a filter world and has no filter properties.
*}
function TRSWorldPanel.GetWorld(Filter: TRSWorldFilters): Int32; overload;
var
  World: TRSWorldObject;
  Filtered: TRSWorldObjectArray;
  Prop: ERSWorldType;
  i: Int32;
label
  Rejected;
begin
  self.Init;
  if (Length(Self.Worlds) = 0) then
    Self.Worlds.Load();

  for World in Self.Worlds do
  begin
    for i := 0 to High(Filter.Worlds) do
      if (Self.FixWorld(World.ID) = Self.FixWorld(Filter.Worlds[i])) then
        goto Rejected;
    for Prop := Low(ERSWorldType) to High(ERSWorldType) do
       if (Prop in World.Properties) and (Prop in Filter.Properties) then
         goto Rejected;

    Filtered += World;

    Rejected:
  end;

  if (Length(Filtered) = 0) then
    srl.WriteLn('All worlds have been filtered', dtFatal);

  Result := Filtered[Random(Length(Filtered))].ID;
end;

(*
LOGOUT INTERFACE
================

  Logout Tab functionality.
*)

{*
R_Logout
~~~~~~~~
Logs the player out of the game.

Example:
    R_Logout;
*}
Function R_Logout: Boolean;
var
  Widget: RSWidget;
begin
  R_OpenGametab(GAMETAB_LOGOUT);
  Wait(50, RandomRange(250, 692));

  if (RSWidget.IsValid(R_LOGOUT_CONTAINER.Group, R_LOGOUT_CONTAINER.Child)) and (not R_WidgetIsHidden(R_LOGOUT_LOGOUT_BUTTON)) then
  begin
    Widget := RSWidget.Get(R_LOGOUT_LOGOUT_BUTTON.Group, R_LOGOUT_LOGOUT_BUTTON.Child);
    if Widget.ref <> nil then
    begin
      Mouse.Click(Widget.Bounds, MOUSE_LEFT);
      Result := True;
      Widget.Free;
    end;
  end else if (RSWidget.IsValid(R_WORLD_SWITCHER_CONTAINER.Group, R_WORLD_SWITCHER_CONTAINER.Child)) and (not R_WidgetIsHidden(R_WORLD_SWITCHER_LOGOUT_BUTTON)) then
  begin
    Widget := RSWidget.Get(R_WORLD_SWITCHER_LOGOUT_BUTTON.Group, R_WORLD_SWITCHER_LOGOUT_BUTTON.Child);
    if Widget.ref <> nil then
    begin
      Mouse.Click(Widget.Bounds, MOUSE_LEFT);
      Result := True;
      Widget.Free;
    end;
  end;
end;

{*
R_CloseWorldSwitcher
~~~~~~~~~~~~~~~~~~~~
Closes the world switcher and returns to the main logout tab.

Example:
    R_CloseWorldSwitcher;
*}
Function R_CloseWorldSwitcher(): Boolean;
var
  Widget: RSWidget;
begin
  R_OpenGametab(GAMETAB_LOGOUT);
  Wait(50, RandomRange(250, 692));

  if (RSWidget.IsValid(R_WORLD_SWITCHER_CONTAINER.Group, R_WORLD_SWITCHER_CONTAINER.Child)) and (not R_WidgetIsHidden(R_WORLD_SWITCHER_CLOSE)) then
  begin
    Widget := RSWidget.Get(R_WORLD_SWITCHER_CLOSE.Group, R_WORLD_SWITCHER_CLOSE.Child);
    if Widget.ref <> nil then
    begin
      Mouse.Click(Widget.Bounds, MOUSE_LEFT);
      Result := True;
      Widget.Free;
    end;
  end

end;

{*
R_OpenWorldSwitcher
~~~~~~~~~~~~~~~~~~~
Opens the world switcher.

Example:
    R_OpenWorldSwitcher;
*}
Function R_OpenWorldSwitcher: Boolean;
var
  Widget: RSWidget;
begin
  R_OpenGametab(GAMETAB_LOGOUT);

  Wait(50, RandomRange(250, 692));

  if (not R_WaitUntilVisible(R_LOGOUT_CONTAINER, 2500)) or R_WidgetIsHidden(R_LOGOUT_WORLD_SWITCHER_BUTTON) then
    Exit(False);

  Widget := RSWidget.Get(R_LOGOUT_WORLD_SWITCHER_BUTTON.Group, R_LOGOUT_WORLD_SWITCHER_BUTTON.Child);
  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := R_WaitUntilVisible(R_WORLD_SWITCHER_SCROLL_UP, 2500);
    Widget.Free;
  end;
end;

{*
R_WorldToBox
~~~~~~~~~~~~
Utility function that converts a given world to mainscreen coordinates.

Example:
    R_WorldToBox(500);
*}
Function R_WorldToBox(World: Int32): TBox;
var
  WorldWidget: RSWidget;
begin
  WorldWidget := RSWidget.Get(R_WORLD_SWITCHER_LIST.Group, R_WORLD_SWITCHER_LIST.Child, World);
  Result := WorldWidget.Bounds;
  WorldWidget.Free;
end;

{*
R_ScrollToWorld
~~~~~~~~~~~~~~~
Scrolls to the proper world in the world switcher.

Example:
    R_ScrollToWorld(500, RSScroll.SCROLLBAR);
*}
Function R_ScrollToWorld(World: Int32; ScrollType: RSScroll = RSScroll.SCROLLWHEEL): Boolean;
var
  ScrollBar, ScrollArrow, WorldContainer: RSWidget;
  WorldContainerBounds: TBox;
  T: Timer;
  Direction: Boolean;
  P: TPoint;
begin
  WorldContainer := RSWidget.Get(R_WORLD_SWITCHER_LIST_INTERFACE_CONTAINER_CHILD.Group, R_WORLD_SWITCHER_LIST_INTERFACE_CONTAINER_CHILD.Child);
  if WorldContainer.ref = nil then
    Exit(False);

  //Adds a buffer to make sure that the world is completely clickable
  WorldContainerBounds := [WorldContainer.Bounds.X1, WorldContainer.Bounds.Y1 + 15, WorldContainer.Bounds.X2, WorldContainer.Bounds.Y2 - 15];
  WorldContainer.Free;

  if WorldContainerBounds.Contains(R_WorldToBox(World)) then
    Exit(True);

  Direction := WorldContainerBounds.Middle.Y > R_WorldToBox(World).Middle.Y;

  //Scroll the interface using the mouse-wheel
  if ScrollType = RSScroll.SCROLLWHEEL then
  begin
    Mouse.Move(WorldContainerBounds);

    T.Start;
    while not WorldContainerBounds.Contains(R_WorldToBox(World)) do
    begin
      if T.ElapsedTime > 5000 then
        Exit(False);

      Mouse.Scroll(3, Direction);
    end;

    Exit(WorldContainerBounds.Contains(R_WorldToBox(World).Middle));
  end;

  //Scroll the interface using the scroll-bar
  if ScrollType = RSScroll.SCROLLBAR then
  begin
    ScrollBar := RSWidget.Get(R_WORLD_SWITCHER_SCROLL_BAR.Group, R_WORLD_SWITCHER_SCROLL_BAR.Child, R_WORLD_SWITCHER_SCROLL_BAR.Index);
    if ScrollBar.ref = nil then
      Exit(False);

    Mouse.Move(ScrollBar.Bounds);
    Mouse.Hold(MOUSE_LEFT);
    ScrollBar.Free;

    T.Start;
    while not WorldContainerBounds.Contains(R_WorldToBox(World)) do
    begin
      if T.ElapsedTime > 5000 then
      begin
        Mouse.Release(MOUSE_LEFT);
        Exit(False);
      end;

      P := Mouse.GetPosition;
      if Direction then
        Mouse.Move(P.X + RandomRange(-1, 1), P.Y - RandomRange(3, 7))
      else
        Mouse.Move(P.X + RandomRange(-1, 1), P.Y + RandomRange(3, 7));
    end;

    Mouse.Release(MOUSE_LEFT);
    Exit(WorldContainerBounds.Contains(R_WorldToBox(World).Middle));
  end;

  //Scroll the interface using the arrows
  if ScrollType = RSScroll.SCROLLARROWS then
  begin
    if Direction then
      ScrollArrow := RSWidget.Get(R_WORLD_SWITCHER_SCROLL_UP.Group, R_WORLD_SWITCHER_SCROLL_UP.Child, R_WORLD_SWITCHER_SCROLL_UP.Index)
    else
      ScrollArrow := RSWidget.Get(R_WORLD_SWITCHER_SCROLL_DOWN.Group, R_WORLD_SWITCHER_SCROLL_DOWN.Child, R_WORLD_SWITCHER_SCROLL_DOWN.Index);

    if ScrollArrow.ref = nil then
      Exit(False);

    Mouse.Move(ScrollArrow.Bounds);
    Mouse.Hold(MOUSE_LEFT);
    ScrollArrow.Free;

    T.Start;
    while not WorldContainerBounds.Contains(R_WorldToBox(World)) do
    begin
      if T.ElapsedTime > 20000 then
      begin
        Mouse.Release(MOUSE_LEFT);
        Exit(False);
      end;
    end;

    Mouse.Release(MOUSE_LEFT);
    Exit(WorldContainerBounds.Contains(R_WorldToBox(World).Middle));
  end;
end;

{*
R_SelectWorld
~~~~~~~~~~~~~
Clicks on the selected world if it is visible in the list.

Example:
    R_SelectWorld(500);
*}
Function R_SelectWorld(World: Int32): Boolean;
var
  Widget: RSWidget;
begin
  if (not RSWidget.IsValid(R_WORLD_SWITCHER_LIST.Group, R_WORLD_SWITCHER_LIST.Child, World)) or R_WidgetIsHidden(R_WORLD_SWITCHER_LIST) then
    Exit(False);

  Widget := RSWidget.Get(R_WORLD_SWITCHER_LIST.Group, R_WORLD_SWITCHER_LIST.Child, World);
  if (Widget.ref <> nil) and (RSWidget.Get(R_WORLD_SWITCHER_LIST_INTERFACE_CONTAINER_CHILD.Group, R_WORLD_SWITCHER_LIST_INTERFACE_CONTAINER_CHILD.Child).Bounds.Contains(Widget.Bounds)) then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Result := True;
    Widget.Free;
  end;
end;
