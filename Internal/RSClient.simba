{$include_once Static.simba}
{$include_once RSStructures.simba}
{$include_once RSVarbitDefinition.simba}
{$include_once RSVarps.simba}
{$include_once RSMenu.simba}

Function RSClient.GameInstance: RSGameInstance; static;
begin
  Result.ref := RGetStaticObject(R_EIOS, CLIENT_GAMEINSTANCE);
end;

Function RSClient.LoopCycle: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_LOOPCYCLE);
end;

Function RSClient.LoginState: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_LOGINSTATE);
end;

Function RSClient.GameState: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_GAMESTATE);
end;

Function RSClient.IsLoading: Boolean; static;
begin
  Result := IsClientLoading;
end;

Function RSClient.GetTileSettings(X, Y, Z: Int32): UInt8; static;
begin
  {$IFDEF USE_REGION_CACHING}
  UpdateRegionCache(X, Y);
  {$ENDIF}
  Result := CACHED_TILE_SETTINGS[X][Y][Z];
end;

Function RSClient.GetTileHeights(X, Y, Z: Int32): Int32; static;
begin
  {$IFDEF USE_REGION_CACHING}
  UpdateRegionCache(X, Y);
  {$ENDIF}
  Result := CACHED_TILE_HEIGHTS[X][Y][Z];
end;

Function RSClient.Plane: Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.Plane();
    GameInstance.Free;
  end;
end;

Function RSClient.BaseX: Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.BaseX();
    GameInstance.Free;;
  end;
end;

Function RSClient.BaseY: Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.BaseY();
    GameInstance.Free;;
  end;
end;

Function RSClient.DestinationX: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_DESTINATIONX);
end;

Function RSClient.DestinationY: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_DESTINATIONY);
end;

Function RSClient.ViewPortWidth: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_VIEWPORTWIDTH);
end;

Function RSClient.ViewPortHeight: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_VIEWPORTHEIGHT);
end;

Function RSClient.ViewPortScale: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_VIEWPORTSCALE);
end;

Function RSClient.MapAngle: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_MAPANGLE);
end;

Function RSClient.NPCIndices(NPCCount: Int32): Array of Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.NPCIndices(NPCCount);
    GameInstance.Free;
  end;
end;

Function RSClient.NPCIndices: Array of Int32; static; overload;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.NPCIndices();
    GameInstance.Free;
  end;
end;

Function RSClient.NPCCount: Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.NPCCount();
    GameInstance.Free;
  end;
end;

Function RSClient.PlayerIndices(PlayerCount: Int32): Array of Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.PlayerIndices(PlayerCount);
    GameInstance.Free;
  end;
end;

Function RSClient.PlayerIndices: Array of Int32; static; overload;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.PlayerIndices();
    GameInstance.Free;
  end;
end;

Function RSClient.PlayerCount: Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.PlayerCount();
    GameInstance.Free;
  end;
end;

Function RSClient.AllNPCs: Array of RSNPC; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.NPCs();
    GameInstance.Free;
  end;
end;

Function RSClient.AllPlayers: Array of RSPlayer; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.Players();
    GameInstance.Free;
  end;
end;

Function RSClient.AnimationFrameCache: RSCache; static;
begin
  Result.ref := RGetStaticObject(R_EIOS, CLIENT_ANIMATIONFRAMECACHE);
end;

Function RSClient.ItemNodeCache: RSCache; static;
begin
  Result.ref := RGetStaticObject(R_EIOS, CLIENT_ITEMNODECACHE);
end;

Function RSClient.CollisionMaps: Array of RSCollisionMap; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.CollisionMaps();
    GameInstance.Free;
  end;
end;

Function RSClient.Projectiles: Array of RSProjectile; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.Projectiles();
    GameInstance.Free;
  end;
end;

Function RSClient.GraphicsObjects: Array of RSGraphicsObject; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.GraphicsObjects();
    GameInstance.Free;
  end;
end;

Function RSClient.Scene: RSScene; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.Scene();
    GameInstance.Free;
  end;
end;

{$IFDEF RUNELITE}
Function RSClient.IsRegionInstanced: Boolean; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.IsRegionInstanced();
    GameInstance.Free;
  end;
end;

Function RSClient.RegionInstanceChunk(Plane, ChunkX, ChunkY: Int32): Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.RegionInstanceChunk(Plane, ChunkX, ChunkY);
    GameInstance.Free;
  end;
end;

Function RSClient.RegionInstanceChunks(Plane: Int32): Array of Array of Int32; static;
var
  GameInstance: RSGameInstance;
begin
  GameInstance := RSClient.GameInstance;
  if GameInstance.ref <> nil then
  begin
    Result := GameInstance.RegionInstanceChunks(Plane);
    GameInstance.Free;
  end;
end;
{$ELSE}
Function RSClient.IsRegionInstanced: Boolean; static;
begin
  Result := RGetStaticBool(R_EIOS, CLIENT_ISREGIONINSTANCED);
end;

Function RSClient.RegionInstanceChunk(Plane, ChunkX, ChunkY: Int32): Int32; static;
var
  Chunks: Pointer;
begin
  Chunks := RGetStaticArray(R_EIOS, CLIENT_REGIONINSTANCES);
  if Chunks = nil then
    Exit(-1);

  Result := RGetIntArray3D(R_EIOS, Chunks, Plane, ChunkX, ChunkY);
  RFreeObject(R_EIOS, Chunks);
end;

Function RSClient.RegionInstanceChunks(Plane: Int32): Array of Array of Int32; static;
var
  Chunks: Pointer;
  I: SizeUInt;
  SX: Pointer;
  SY: Array of Pointer;
type
  RSSceneTileArray = Array of RSSceneTile;
begin
  Chunks := RGetStaticArray(R_EIOS, CLIENT_REGIONINSTANCES);
  SX := RGetObjectArray(R_EIOS, Chunks, Plane);
  RFreeObject(R_EIOS, Chunks);

  SY := RGetObjectArray(R_EIOS, SX, 0, RGetArraySize(R_EIOS, SX));
  SetLength(Result, Length(SY));

  for I := 0 to High(SY) do
  begin
    Result[I] := RGetIntArray(R_EIOS, SY[I], 0, RGetArraySize(R_EIOS, SY[I]));
  end;

  RFreeObjects(R_EIOS, SY);
end;
{$ENDIF}

Function RSClient.IsResizable: Boolean; static;
var
  W, H: Int32;
begin
  if RGetStaticBool(R_EIOS, CLIENT_ISRESIZABLE) then
  begin
    {

    if RSClient.GetVarbit(4607) = 0 then
    begin
      // RESIZABLE_CLASSIC
    end else
      begin
        //RESIZABLE_MODERN
      end;
    }
    Exit(True);
  end;

  GetClientDimensions(W, H);
  Result := False; //(W <> 765) or (H <> 503);
end;

Function RSClient.GetVarBit(ID: Int32): Int32; static;
var
  Definition: RSVarbitDefinition;
  Base, LSB, MSB: Int32;
  Varp, Mask: Int32;
begin
  Definition := RSVarbitDefinition.Definition(ID);
  if Definition.ref = nil then
    Exit(-1);

  Base := Definition.BaseVar;
  LSB := Definition.StartBit;
  MSB := Definition.EndBit;
  Definition.Free;

  if (Base = 0) and (LSB = 0) and (MSB = 0) then
    Exit(-1);

  Varp := RSVarps.VarpMain(Base);
	Mask := (1 shl ((MSB - LSB) + 1)) - 1;
	Result := (Varp shr LSB) and Mask;
end;

Function RSClient.Menu: RSMenu; static;
begin
  Result.ref := RGetStaticObject(R_EIOS, CLIENT_MENU);
end;

Function RSClient.IsMenuOpen: Boolean; static;
begin
  Result := RGetStaticBool(R_EIOS, CLIENT_ISMENUOPEN);
end;

Function RSClient.IsItemSelected: Boolean; static;
begin
  Result := RGetStaticInt(R_EIOS, CLIENT_ISITEMSELECTED) = 1;
end;

Function RSClient.IsSpellSelected: Boolean; static;
begin
  Result := RGetStaticBool(R_EIOS, CLIENT_ISSPELLSELECTED);
end;

Function RSClient.LoginIndex: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, LOGIN_INDEX);
end;

Function RSClient.LoginXPadding: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, LOGIN_XPADDING);
end;

Function RSClient.LoginBoxX: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, LOGIN_BOXXOFFSET);
end;

Function RSClient.LoginScreenButtonWidth: Int32; static;
var
  IndexedSprite: Pointer;
begin
  IndexedSprite := RGetStaticObject(R_EIOS, LOGIN_BUTTONSPRITE);
  if IndexedSprite = nil then
    Exit(0);

  Result := RGetInt(R_EIOS, IndexedSprite, INDEXEDRGB_WIDTH);
  RFreeObject(R_EIOS, IndexedSprite);
end;

Function RSClient.LoginScreenButtonHeight: Int32; static;
var
  IndexedSprite: Pointer;
begin
  IndexedSprite := RGetStaticObject(R_EIOS, LOGIN_BUTTONSPRITE);
  if IndexedSprite = nil then
    Exit(0);

  Result := RGetInt(R_EIOS, IndexedSprite, INDEXEDRGB_HEIGHT);
  RFreeObject(R_EIOS, IndexedSprite);
end;

Function RSClient.LoginLoadingPercent: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, LOGIN_LOADINGPERCENT);
end;

Function RSClient.Username: String; static;
begin
  Result := RGetStaticString(R_EIOS, LOGIN_USERNAME);
end;

Function RSClient.Password: String; static;
begin
  Result := RGetStaticString(R_EIOS, LOGIN_PASSWORD);
end;

Function RSClient.ActiveLoginField: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, Login_CursorField);
end;

Function RSClient.AccountStatus: Int32; static;
begin
  Result := RGetStaticInt(R_EIOS, Login_AccountStatus);
end;
