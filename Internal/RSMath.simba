{$include_once Structures.simba}
{$include_once Static.simba}
{$include_once RSCamera.simba}
{$include_once RSClient.simba}
{$include_once RSModel.simba}
{$include_once RSAnimatedModel.simba}

procedure RotatingAdjecent(var Adj:TPointArray;const Curr:TPoint; const Prev:TPoint);
var
  i: Integer;
  dx,dy,x,y:Single;
begin
  x := Prev.x; y := Prev.y;
  adj[7] := Prev;
  for i:=0 to 6 do
  begin
    dx := x - Curr.x;
    dy := y - Curr.y;
    x := ((dy * 0.7070) + (dx * 0.7070)) + Curr.x;
    y := ((dy * 0.7070) - (dx * 0.7070)) + Curr.y;
    adj[i] := Point(Round(x),Round(y));
  end;
end;

function TPABorder(const TPA:TPointArray): TPointArray;
var
  i,j,h,x,y,hit:Integer;
  Matrix: TIntegerMatrix;
  adj: TPointArray;
  start,prev,endpt:TPoint;
  Area: TBox;
  isset:Boolean;
begin
  H := High(TPA);
  Area := GetTPABounds(TPA);
  Area.X2 := (Area.X2 - Area.X1) + 3;  //Width
  Area.Y2 := (Area.Y2 - Area.Y1) + 3;  //Height
  Area.X1 := Area.X1 - 1;
  Area.Y1 := Area.Y1 - 1;

  SetLength(Matrix, Area.Y2+1, Area.X2+1);

  start := Point(Area.X2, Area.Y2);
  for i:=0 to H do
    Matrix[(TPA[i].y-Area.Y1)][(TPA[i].x-Area.X1)] := 1;

  //find FIRST starting y coord.
  Isset := False;
  Start := Point(Area.X2, Area.Y2);
  for y:=0 to Area.Y2-1 do begin
    for x:=0 to Area.X2-1 do
      if Matrix[y][x] <> 0 then
      begin
        Start := Point(x,y);
        Isset := True;
        Break;
      end;
    if Isset then Break;
  end;

  H := H*4;
  endpt := Start;
  prev := Point(start.x, start.y-1);
  hit := 0;

  SetLength(adj, 8);
  for i:=0 to H do
  begin
    if ((endpt = start) and (i>1)) then begin
      if hit = 1 then Break;
      Inc(hit);
    end;
    RotatingAdjecent(adj, start, prev);
    for j:=0 to 7 do begin
      x := adj[j].x;
      y := adj[j].y;
      if (x >= 0) and (x < Area.X2) and
         (y >= 0) and (y < Area.Y2) then
        if Matrix[y][x] <= 0 then begin
          if Matrix[y][x] = 0 then
          begin
            Result += Point((adj[j].x+Area.x1), (adj[j].y+Area.y1));
            Dec(Matrix[y][x]);
          end;
        end else if Matrix[y][x] >= 1 then
        begin
          prev := start;
          start := adj[j];
          Break;
        end;
    end;
  end;
end;

Function TVector.WorldToScreen(LocalX, LocalY, LocalZ, Orientation, CameraX, CameraY, CameraZ, SinYaw, CosYaw, SinPitch, CosPitch, ViewPortWidth, ViewPortHeight, ViewPortScale: Int32): TPoint; constref;
var
  P: TVector;
  X, Y, Z, Calculation: Int32;
begin
  // Swap Angles because Models in RS are rotated
  P := [self.X, self.Z, self.Y];

  // Rotate based on orientation
  if Orientation > 0 then
  begin
    P := [Sar(((P.X * COSINE[Orientation]) + (P.Y * SINE[Orientation])), 16),
          Sar(((P.Y * COSINE[Orientation]) - (P.X * SINE[Orientation])), 16),
          P.Z];
  end;

  // Translate to local coords
  P.X += LocalX;
  P.Y += LocalY;
  P.Z += LocalZ;

  // Translate to camera
  P.X -= CameraX;
  P.Y -= CameraY;
  P.Z -= CameraZ;

  // Project to canvas
  X := P.X;
  Y := P.Y;
  Z := P.Z;

  Calculation := Sar(((X * CosYaw) + (Y * SinYaw)), 16);
  Y := Sar(((Y * CosYaw) - (X * SinYaw)), 16);
  X := Calculation;
  Calculation := Sar(((Z * CosPitch) - (Y * SinPitch)), 16);
  Z := Sar(((Y * CosPitch) + (Z * SinPitch)), 16);
  Y := Calculation;

  if (Z >= 50) then
  begin
    Result.X := (X * viewPortScale div Z) + (ViewPortWidth div 2);
    Result.Y := (Y * viewPortScale div Z) + (ViewPortHeight div 2);
    Exit;
  end;

  Result.X := -1;
  Result.Y := -1;
end;

Function TVector.WorldToScreen(LocalX, LocalY, LocalZ, Orientation: Int32): TPoint; constref; overload;
var
  CameraX, CameraY, CameraZ, CameraYaw, CameraPitch: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
begin
  CameraX := RSCamera.X;
  CameraY := RSCamera.Y;
  CameraZ := RSCamera.Z;
  CameraYaw := RSCamera.Yaw;
  CameraPitch := RSCamera.Pitch;

  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[cameraPitch];
  CosPitch := COSINE[cameraPitch];
  SinYaw := SINE[cameraYaw];
  CosYaw := COSINE[cameraYaw];

  Result := self.WorldToScreen(LocalX, LocalY, LocalZ,
                               Orientation,
                               CameraX, CameraY, CameraZ,
                               SinYaw, CosYaw, SinPitch, CosPitch,
                               ViewPortWidth, ViewPortHeight, ViewPortScale);
end;

Function TVector.WorldToScreen: TPoint; constref; overload;
var
  P: TVector;
  Pitch, Yaw: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
begin
  Pitch := RSCamera.Pitch;
  Yaw := RSCamera.Yaw;
  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[Pitch];
  CosPitch := COSINE[Pitch];
  SinYaw := SINE[Yaw];
  CosYaw := COSINE[Yaw];

  P := [self.X, self.Z, self.Y];

  Result := P.WorldToScreen(0, 0, 0,
                            -1,
                            RSCamera.X, RSCamera.Y, RSCamera.Z,
                            SinYaw, CosYaw, SinPitch, CosPitch,
                            ViewPortWidth, ViewPortHeight, ViewPortScale);
end;

Function Project(constref Vertices: Array of TVector; LocalX, LocalY, LocalZ, Orientation: Int32): Array of TPoint;
var
  I, J: Int32;
  CameraX, CameraY, CameraZ, CameraYaw, CameraPitch: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
  P: TPoint;
  T: Int64;

  Function isValidPoint(point: TPoint): Boolean;
  begin
    Result := (point.x <> -1) and (point.y <> -1);
  end;
begin
  CameraX := RSCamera.X;
  CameraY := RSCamera.Y;
  CameraZ := RSCamera.Z;
  CameraYaw := RSCamera.Yaw;
  CameraPitch := RSCamera.Pitch;

  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[cameraPitch];
  CosPitch := COSINE[cameraPitch];
  SinYaw := SINE[cameraYaw];
  CosYaw := COSINE[cameraYaw];

  J := 0;
  SetLength(Result, Length(Vertices));

  for I := 0 to high(Vertices) do
  begin
    P := Vertices[I].WorldToScreen(LocalX, LocalY, LocalZ,
                                   Orientation, CameraX, CameraY, CameraZ,
                                   SinYaw, CosYaw, SinPitch, CosPitch,
                                   ViewPortWidth, ViewPortHeight, ViewPortScale);
    if isValidPoint(P) then
    begin
      Result[J] := P;
      Inc(J);
    end;
  end;

  SetLength(Result, J);
end;

Function Project(constref Triangles: Array of TTriangle; LocalX, LocalY, LocalZ, Orientation: Int32): Array of TTriangle; overload;
var
  I, J: Int32;
  CameraX, CameraY, CameraZ, CameraYaw, CameraPitch: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
  A, B, C: TPoint;

  Function isValidPoint(constref point: TPoint): Boolean;
  begin
    Result := (point.x <> -1) and (point.y <> -1);
  end;
begin
  CameraX := RSCamera.X;
  CameraY := RSCamera.Y;
  CameraZ := RSCamera.Z;
  CameraYaw := RSCamera.Yaw;
  CameraPitch := RSCamera.Pitch;

  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[cameraPitch];
  CosPitch := COSINE[cameraPitch];
  SinYaw := SINE[cameraYaw];
  CosYaw := COSINE[cameraYaw];

  J := 0;
  SetLength(Result, Length(Triangles));

  for I := 0 to high(Triangles) do
  begin
    A := Triangles[I].A.WorldToScreen(LocalX, LocalY, LocalZ,
                                      Orientation, CameraX, CameraY, CameraZ,
                                      SinYaw, CosYaw, SinPitch, CosPitch,
                                      ViewPortWidth, ViewPortHeight, ViewPortScale);

    B := Triangles[I].B.WorldToScreen(LocalX, LocalY, LocalZ,
                                      Orientation, CameraX, CameraY, CameraZ,
                                      SinYaw, CosYaw, SinPitch, CosPitch,
                                      ViewPortWidth, ViewPortHeight, ViewPortScale);

    C := Triangles[I].C.WorldToScreen(LocalX, LocalY, LocalZ,
                                      Orientation, CameraX, CameraY, CameraZ,
                                      SinYaw, CosYaw, SinPitch, CosPitch,
                                      ViewPortWidth, ViewPortHeight, ViewPortScale);

    if isValidPoint(A) and isValidPoint(B) and isValidPoint(C) then
    begin
      Result[J].A.X := A.X;
      Result[J].B.X := B.X;
      Result[J].C.X := C.X;

      Result[J].A.Y := A.Y;
      Result[J].B.Y := B.Y;
      Result[J].C.Y := C.Y;
      Inc(J);
    end;
  end;

  SetLength(Result, J);
end;

Function RSModel.Project(LocalX, LocalY, LocalZ, Orientation: Int32): Array of T2DTriangle; constref;
var
  I, J: Int32;
  CameraX, CameraY, CameraZ, CameraYaw, CameraPitch: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
  Vertices: Array of TVector;
  Indices: Array of TVector;
  P, A, B, C: TPoint;

  Function isValidPoint(point: TPoint): Boolean;
  begin
    Result := (point.x <> -1) and (point.y <> -1);
  end;
begin
  CameraX := RSCamera.X;
  CameraY := RSCamera.Y;
  CameraZ := RSCamera.Z;
  CameraYaw := RSCamera.Yaw;
  CameraPitch := RSCamera.Pitch;

  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[cameraPitch];
  CosPitch := COSINE[cameraPitch];
  SinYaw := SINE[cameraYaw];
  CosYaw := COSINE[cameraYaw];

  J := 0;
  Vertices := self.Vertices;
  Indices := self.Indices;

  for I := 0 to high(Vertices) do
  begin
    P := Vertices[I].WorldToScreen(LocalX, LocalY, LocalZ,
                                   Orientation, CameraX, CameraY, CameraZ,
                                   SinYaw, CosYaw, SinPitch, CosPitch,
                                   ViewPortWidth, ViewPortHeight, ViewPortScale);
    Vertices[I].X := P.X;
    Vertices[I].Y := P.Y;
  end;

  SetLength(Result, Length(Indices));
  for i := 0 to High(Indices) do
  begin
    A.X := Vertices[Indices[I].X].X;
    B.X := Vertices[Indices[I].Y].X;
    C.X := Vertices[Indices[I].Z].X;

    A.Y := Vertices[Indices[I].X].Y;
    B.Y := Vertices[Indices[I].Y].Y;
    C.Y := Vertices[Indices[I].Z].Y;

    if IsValidPoint(A) and IsValidPoint(B) and IsValidPoint(C) then
    begin
      Result[J].A.X := A.X;
      Result[J].B.X := B.X;
      Result[J].C.X := C.X;

      Result[J].A.Y := A.Y;
      Result[J].B.Y := B.Y;
      Result[J].C.Y := C.Y;
      Inc(J);
    end;
  end;
  SetLength(Result, J);
end;

Function RSAnimatedModel.Project(LocalX, LocalY, LocalZ, Orientation: Int32): Array of T2DTriangle; constref;
var
  I, J: Int32;
  CameraX, CameraY, CameraZ, CameraYaw, CameraPitch: Int32;
  ViewPortScale, ViewPortHeight, ViewPortWidth: Int32;
  SinPitch, CosPitch, SinYaw, CosYaw: Int32;
  Vertices: Array of TVector;
  Indices: Array of TVector;
  P, A, B, C: TPoint;

  Function isValidPoint(point: TPoint): Boolean;
  begin
    Result := (point.x <> -1) and (point.y <> -1);
  end;
begin
  CameraX := RSCamera.X;
  CameraY := RSCamera.Y;
  CameraZ := RSCamera.Z;
  CameraYaw := RSCamera.Yaw;
  CameraPitch := RSCamera.Pitch;

  ViewPortScale := RSClient.ViewPortScale;
  ViewPortWidth := RSClient.ViewPortWidth;
  ViewPortHeight := RSClient.ViewPortHeight;

  SinPitch := SINE[cameraPitch];
  CosPitch := COSINE[cameraPitch];
  SinYaw := SINE[cameraYaw];
  CosYaw := COSINE[cameraYaw];

  J := 0;
  Vertices := self.Vertices;
  Indices := RSModel(self.ref).Indices;

  for I := 0 to high(Vertices) do
  begin
    P := Vertices[I].WorldToScreen(LocalX, LocalY, LocalZ,
                                   Orientation, CameraX, CameraY, CameraZ,
                                   SinYaw, CosYaw, SinPitch, CosPitch,
                                   ViewPortWidth, ViewPortHeight, ViewPortScale);
    Vertices[I].X := P.X;
    Vertices[I].Y := P.Y;
  end;

  SetLength(Result, Length(Indices));
  for i := 0 to High(Indices) do
  begin
    A.X := Vertices[Indices[I].X].X;    //Indices[0][I]
    B.X := Vertices[Indices[I].Y].X;    //Indices[1][I]
    C.X := Vertices[Indices[I].Z].X;    //Indices[2][I]

    A.Y := Vertices[Indices[I].X].Y;
    B.Y := Vertices[Indices[I].Y].Y;
    C.Y := Vertices[Indices[I].Z].Y;

    if IsValidPoint(A) and IsValidPoint(B) and IsValidPoint(C) then
    begin
      Result[J].A.X := A.X;
      Result[J].B.X := B.X;
      Result[J].C.X := C.X;

      Result[J].A.Y := A.Y;
      Result[J].B.Y := B.Y;
      Result[J].C.Y := C.Y;
      Inc(J);
    end;
  end;
  SetLength(Result, J);
end;

Function RSTile.Project: T2DRectangle; constref;
begin
  Result := self.Project(1, 1, RSClient.Plane);
end;

Function RSTile.Project(SizeX, SizeY, Plane: Int32): T2DRectangle; constref; overload;
const
  LocalTileSize = (1 shl 7);
var
  xSize, ySize: Int32;
  swX, swY, neX, neY: Int32;
  NW, NE, SW, SE: TVector;

  Function IsValidTile(tile: TVector): Boolean;
  begin
    Result := ((tile.X >= 128) and (tile.Y >= 128) and (tile.X <= 13056) and (tile.Y <= 13056));
  end;

  Function TileHeight(X, Y, Plane: Int32): Int32;
  var
    xSize, ySize: Int32;
    var1, var2, var3, var4: Int32;
  begin
    xSize := Sar(X, 7);
    ySize := Sar(Y, 7);

    if (xSize >= 0) and (ySize >= 0) and (xSize < 104) and (ySize < 104) then
    begin
      var1 := X and 127;
      var2 := Y and 127;
      var3 := Sar(((var1 * CACHED_TILE_HEIGHTS[plane][xSize + 1][ySize]) + ((128 - var1) * CACHED_TILE_HEIGHTS[plane][xSize][ySize])), 7);
      var4 := Sar(((CACHED_TILE_HEIGHTS[plane][xSize][ySize + 1] * (128 - var1)) + (var1 * CACHED_TILE_HEIGHTS[plane][xSize + 1][ySize + 1])), 7);

      Result := Sar(((128 - var2) * var3 + var2 * var4), 7);
      Exit;
    end;

    Exit(0);
  end;
begin
  {$IFDEF USE_REGION_CACHING}
  UpdateRegionCache(self.X, self.Y);
  {$ENDIF}

  xSize := Sar(self.X, 7);
  ySize := Sar(self.Y, 7);
  swX := self.X - (SizeX * LocalTileSize div 2);
	swY := self.Y - (SizeY * LocalTileSize div 2);
  neX := self.X + (SizeX * LocalTileSize div 2);
	neY := self.Y + (SizeY * LocalTileSize div 2);

  if (xSize >= 0) and (ySize >= 0) and (xSize < 104) and (ySize < 104) then
  begin
    if (plane < 3) and ((CACHED_TILE_SETTINGS[1][xSize][ySize] and 2) = 2) then
    begin
      Inc(plane);
    end;

    NW := [swX, neY, TileHeight(swX, neY, plane)];
    NE := [neX, neY, TileHeight(neX, neY, plane)];
    SE := [neX, swY, TileHeight(neX, swY, plane)];
    SW := [swX, swY, TileHeight(swX, swY, plane)];

    if IsValidTile(NW) and IsValidTile(NE) and IsValidTile(SE) and IsValidTile(SW) then
    begin
      Result.NW := NW.WorldToScreen;
      Result.NE := NE.WorldToScreen;
      Result.SE := SE.WorldToScreen;
      Result.SW := SW.WorldToScreen;
      Exit;
    end;
  end;
  Result.NW := Point(-1, -1);
  Result.NE := Point(-1, -1);
  Result.SE := Point(-1, -1);
  Result.SW := Point(-1, -1);
end;

Function RSModel.AABB(Vertices: Array of TVector; LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
var
  I: Int32;
  xMin, xMax: Int32;
  yMin, yMax: Int32;
  zMin, zMax: Int32;
  SinAngle, CosAngle: Int32;
  VX, VY, VZ: Int32;
  xMid, yMid, zMid: Int32;
  xMidOffset, yMidOffset, zMidOffset: Int32;

  Height, BottomY, xzRadius: Int32;
  MagXZSq, Radius, Diameter: Int32;

  EX, EY, EZ: Int32;
  X1, Y1, Z1, X2, Y2, Z2: Int32;
  Bounds: Array of TVector;
begin
  //Calculate Cylindrical Bounds
	Height := 0;
	BottomY := 0;
	xzRadius := 0;

  For I := 0 to High(Vertices) do
  begin
    VX := Vertices[I].X;
    VY := Vertices[I].Y;
    VZ := Vertices[I].Z;

    Height := max(Height, -VY);
    BottomY := max(BottomY, VY);

    MagXZSq := (VX * VX) + (VZ * VZ);
    xzRadius := max(MagXZSq, xzRadius);
  end;

  xzRadius := Floor(Sqrt(xzRadius) + 0.99);
  Radius := Floor(Sqrt((xzRadius * xzRadius) + (Height * Height)) + 0.99);
  Diameter := Radius + Floor(Sqrt((xzRadius * xzRadius) + (BottomY * BottomY)) + 0.99);

  //Calculate Bounding Box..
  //Orientation := 0;
  xMin := 0; xMax := 0;
  yMin := 0; yMax := 0;
  zMin := 0; zMax := 0;

  SinAngle := SINE[Orientation];
  CosAngle := COSINE[Orientation];

  For I := 0 to High(Vertices) do
  begin
    //Rotate
    VX := Sar(((Vertices[I].X * CosAngle) + (Vertices[I].Z * SinAngle)), 16); //X * COSINE[Orientation] + Z * SINE[Orientation] >> 16;
    VZ := Vertices[I].Y;
    VY := Sar(((Vertices[I].Z * CosAngle) - (Vertices[I].X * SinAngle)), 16); //Z * COSINE[Orientation] - X * SINE[Orientation] >> 16;

    //Bounds
    xMin := min(xMin, VX);
    xMax := max(xMax, VX);

    yMin := min(yMin, VY);
    yMax := max(yMax, VY);

    zMin := min(zMin, VZ);
    zMax := max(zMax, VZ);
  end;

  xMid := (xMax + xMin) div 2;
  yMid := (yMax + yMin) div 2;
  zMid := (zMax + zMin) div 2;
  xMidOffset := (xMax - xMin + 1) div 2;
  yMidOffset := (yMax - yMin + 1) div 2;
  zMidOffset := (zMax - zMin + 1) div 2;

  xMidOffset := max(xMidOffset, 32);
  zMidOffset := max(zMidOffset, 32);

  if (self.FitsSingleTile) then
  begin
    xMidOffset += 8;
    zMidOffset += 8;
  end;

  //Calculate Projection
  X1 := xMid;
  Y1 := zMid;
  Z1 := yMid;
  EX := xMidOffset;
  EY := zMidOffset;
  EZ := yMidOffset;

  X2 := X1 + EX;
  Y2 := Y1 + EY;
  Z2 := Z1 + EZ;

  X1 -= EX;
  Y1 -= EY;
  Z1 -= EZ;

  Bounds := [
      [X1, Y1, Z1], [X2, Y1, Z1], [X1, Y2, Z1], [X2, Y2, Z1],
      [X1, Y1, Z2], [X2, Y1, Z2], [X1, Y2, Z2], [X2, Y2, Z2]
  ];

  Result := System.Project(Bounds, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
end;

Function RSModel.Bounding2DEdges(Vertices: Array of TVector; LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
var
  TPA: TPointArray;
  I, J, K, MinX, MaxX, MinY, MaxY, XS, YS: Int32;
  Indices: Array[0..2] of Array of Int32;
  FaceColours: Array of Int32;
  Nope: Boolean;
begin
  TPA := System.Project(Vertices, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
  Indices := self.RawIndices;
  FaceColours := self.FaceColors3;

  For I := 0 To High(Indices[0]) do
  begin
    //if FaceColours[I] = -2 then
    //  continue;

    MinX := High(Int32);
    MinY := High(Int32);
    MaxX := Low(Int32);
    MaxY := Low(Int32);
    Nope := False;

    For J := 0 to High(Indices) do
    begin
      K := Indices[J][I];
      if K >= Length(TPA) then
      begin
        Nope := True;
        break;
      end;

      XS := TPA[K].X;
      YS := TPA[K].Y;
      if (XS = -1) or (YS = -1) then
      begin
        Nope := True;
        break;
      end;

      MinX := Min(MinX, XS);
      MaxX := Max(MaxX, XS);
      MinY := Min(MinY, YS);
      MaxY := Max(MaxY, YS);
    end;

    if Nope then
      continue;

    MinX -= 5;
    MinY -= 5;
    MaxX += 5;
    MaxY += 5;

    if (0 > maxX) or (RSClient.ViewPortWidth < minX) or (0 > maxY) or (RSClient.ViewPortHeight < minY) then
    begin
      continue;
    end;

    Result += EdgeFromBox([minX, minY, maxX, maxY]);
  end;

  Result := TPABorder(Result);
end;

Function RSModel.Bounds(Vertices: Array of TVector; LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
begin
  if self.FitsSingleTile then
  begin
    Result := self.AABB(Vertices, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
    Exit;
  end;

  Result := self.Bounding2DEdges(Vertices, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
end;

Function RSAnimatedModel.Bounds(Vertices: Array of TVector; LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
var
  Model: RSModel;
begin
  Model.ref := self.ref;
  Result := Model.Bounds(Vertices, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
end;
