{$include_once RSStructures.simba}
{$include_once RSDynamicObject.simba}
{$include_once RSClient.simba}
{$include_once RSScene.simba}
{$include_once RSSceneTile.simba}
{$include_once RSObjectDefinition.simba}

Function RSObject.Get(ObjectType: RSObjectType; X, Y: Int32): RSObject; static;
var
  BaseX, BaseY: Int32;
  Scene: RSScene;
  Tile: RSSceneTile;
begin
  Scene := RSClient.Scene;
  if Scene.ref = nil then
    Exit;

  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;

  {$IFDEF USE_REGION_CACHING}
  UpdateSceneTilesCache(X, Y);
  Tile := CACHED_SCENE_TILES[RSClient.Plane][X - BaseX][Y - BaseY];
  {$ELSE}
  Tile := Scene.SceneTile(RSClient.Plane, X - BaseX, Y - BaseY);
  {$ENDIF}

  if Tile.ref <> nil then
  begin
    case ObjectType of
      GAME_OBJECT: Result := Tile.GameObject;
      WALL_DECORATION: Result := Tile.WallDecoration;
      BOUNDARY_OBJECT: Result := Tile.BoundaryObject;
      FLOOR_DECORATION: Result := Tile.FloorDecoration;
    end;

    {$IFNDEF USE_REGION_CACHING}
    Tile.Free;
    {$ENDIF}
  end;

  Scene.Free;
end;

Function RSObject.Get(ObjectType: RSObjectType): Array of RSObject; static; overload;
var
  I, X, Y: Int32;
  BaseX, BaseY: Int32;
  MinX, MinY: Int32;
  MaxX, MaxY: Int32;
  Scene: RSScene;
  Tile: RSSceneTile;
  Tiles: Array of Array of RSSceneTile;
  Garbage: RSTypeArray;
begin
  Scene := RSClient.Scene;
  if Scene.ref = nil then
    Exit;

  BaseX := RSClient.BaseX;
  BaseY := RSClient.BaseY;

  MinX := BaseX;
  MinY := BaseY;
  MaxX := BaseX + 104;
  MaxY := BaseY + 104;

  {$IFDEF USE_REGION_CACHING}
  UpdateSceneTilesCache(BaseX + 52, BaseY + 52);
  Tiles := CACHED_SCENE_TILES[RSClient.Plane];
  {$ELSE}
  Tiles := Scene.SceneTiles(RSClient.Plane);
  {$ENDIF}
  SetLength(Result, 104 * 104);
  SetLength(Garbage, 104 * 104);

  For Y := MinY To MaxY - 1 do
  begin
    For X := MinX To MaxX - 1 do
    begin
      Tile := Tiles[X - BaseX][Y - BaseY];
      if Tile.ref <> nil then
      begin
        case ObjectType of
          GAME_OBJECT: Result[I] := Tile.GameObject;
          WALL_DECORATION: Result[I] := Tile.WallDecoration;
          BOUNDARY_OBJECT: Result[I] := Tile.BoundaryObject;
          FLOOR_DECORATION: Result[I] := Tile.FloorDecoration;
        end;
        if (Result[I].ref <> nil) then
        begin
          Garbage[I] := Tile;
          Inc(I);
        end;
      end;
    end;
  end;

  SetLength(Result, I);
  SetLength(Garbage, I);

  {$IFNDEF USE_REGION_CACHING}
  Garbage.Free;
  {$ENDIF}
  Scene.Free;
end;

Function RSObject.Hash: Int64; constref;
begin
  case self.ObjectType of
    GAME_OBJECT: Result := RGetLong(R_EIOS, ref, GAMEOBJECT_ID);
    WALL_DECORATION: Result := RGetLong(R_EIOS, ref, WALLDECORATION_ID);
    BOUNDARY_OBJECT: Result := RGetLong(R_EIOS, ref, BOUNDARYOBJECT_ID);
    FLOOR_DECORATION: Result := RGetLong(R_EIOS, ref, FLOORDECORATION_ID);
  end;
end;

Function RSObject.ID: Int32; constref;
begin
  Result := (self.Hash shr 17) and $FFFFFFFF;
end;

Function RSObject.Flags: Int32; constref;
begin
  case self.ObjectType of
      GAME_OBJECT: Result := RGetInt(R_EIOS, ref, GAMEOBJECT_FLAGS);
      WALL_DECORATION: Result := RGetInt(R_EIOS, ref, WALLDECORATION_FLAGS);
      BOUNDARY_OBJECT: Result := RGetInt(R_EIOS, ref, BOUNDARYOBJECT_FLAGS);
      FLOOR_DECORATION: Result := RGetInt(R_EIOS, ref, FLOORDECORATION_FLAGS);
    end;
end;

Function RSObject.LocalTile: RSTile; constref;
begin
  case self.ObjectType of
    GAME_OBJECT:
      begin
        Result.X := RGetInt(R_EIOS, ref, GAMEOBJECT_X);
        Result.Y := RGetInt(R_EIOS, ref, GAMEOBJECT_Y);
      end;
    WALL_DECORATION:
      begin
        Result.X := RGetInt(R_EIOS, ref, WALLDECORATION_X);
        Result.Y := RGetInt(R_EIOS, ref, WALLDECORATION_Y);
      end;
    BOUNDARY_OBJECT:
      begin
        Result.X := RGetInt(R_EIOS, ref, BOUNDARYOBJECT_X);
        Result.Y := RGetInt(R_EIOS, ref, BOUNDARYOBJECT_Y);
      end;
    FLOOR_DECORATION:
      begin
        Result.X := RGetInt(R_EIOS, ref, FLOORDECORATION_X);
        Result.Y := RGetInt(R_EIOS, ref, FLOORDECORATION_Y);
      end;
  end;
end;

Function RSObject.Tile: RSTile; constref;
begin
  Result := self.LocalTile;
  Result.X := RSClient.BaseX + Result.X div 128;
  Result.Y := RSClient.BaseY + Result.Y div 128;
end;

Function RSObject.Orientation: Int32; constref;
var
  Orientation, Rotation: Int32;
begin
  case self.ObjectType of
    GAME_OBJECT:
      begin
        Orientation := RGetInt(R_EIOS, ref, GAMEOBJECT_ORIENTATION);
		    Rotation := Sar(self.Flags, 6) and 3;
		    Result := Rotation * 512 + Orientation;
      end;
    WALL_DECORATION:
      begin
        Orientation := RGetInt(R_EIOS, ref, WALLDECORATION_ORIENTATION);
        Rotation := Sar(self.Flags, 6) and 3;
		    Result := Rotation * 512 + Orientation;
      end;
    BOUNDARY_OBJECT:
      begin
        Orientation := RGetInt(R_EIOS, ref, BOUNDARYOBJECT_ORIENTATION);
        Rotation := Sar(self.Flags, 6) and 3;
		    Result := Rotation * 512 + Orientation;
      end;
    FLOOR_DECORATION:
      begin
        Result := -1;
      end;
  end;
end;

Function RSObject.Definition: RSObjectDefinition; constref;
begin
  Result := RSObjectDefinition.Definition(self.ID);
end;

Function RSObject.Renderable: RSEntity; constref;
begin
  case self.ObjectType of
    GAME_OBJECT:
      begin
        Result.ref := RGetObject(R_EIOS, ref, GAMEOBJECT_RENDERABLE);
      end;
    WALL_DECORATION:
      begin
        Result.ref := RGetObject(R_EIOS, ref, WALLDECORATION_RENDERABLE);
        if Result.ref = nil then
        begin
          Result.ref := RGetObject(R_EIOS, ref, WALLDECORATION_RENDERABLE2);
        end;
      end;
    BOUNDARY_OBJECT:
      begin
        Result.ref := RGetObject(R_EIOS, ref, BOUNDARYOBJECT_RENDERABLE);
        if Result.ref = nil then
        begin
          Result.ref := RGetObject(R_EIOS, ref, BOUNDARYOBJECT_RENDERABLE2);
        end;
      end;
    FLOOR_DECORATION:
      begin
        Result.ref := RGetObject(R_EIOS, ref, FLOORDECORATION_RENDERABLE);
      end;
  end;
end;

Function RSObject.Model: RSModel; constref;
var
  UID: Int64;
  Entity: RSEntity;
  Definition: RSObjectDefinition;
  Garbage: RSTypeArray;
begin
  Entity := self.Renderable;

  //If it's a RSModel, return it..
  if RObjectInstanceOf(R_EIOS, Entity.ref, MODEL_FITSSINGLETILE.cls) then
  begin
    Result.ref := Entity.ref;
    Exit;
  end;

  //If it's a RSDynamicObject, return the model from cache..
  if RObjectInstanceOf(R_EIOS, Entity.ref, DYNAMICOBJECT_ID.cls) then
  begin
    Definition := self.Definition;
    if Definition.ref <> nil then
    begin
      if Definition.HasTransformations then
      begin
        Garbage += Definition;
        Definition := Definition.Transform;
        Garbage += Definition;
      end;

      if Definition.ref = nil then
      begin
        Garbage += Entity;
        Garbage.Free;
        Exit;
      end;

      if Not Definition.HasModels then
      begin
        UID := RSDynamicObject(Entity.ref).Orientation + (Definition.ID shl 10);
      end else
        begin
          UID := RSDynamicObject(Entity.ref).Orientation + (RSDynamicObject(Entity.ref).Flags shl 3) + (Definition.ID shl 10);
        end;

      Garbage += Entity;
      Result := RSObjectDefinition.Model(UID);
      Garbage.Free;
      Exit;
    end;
  end;

  RFreeObject(R_EIOS, Entity.ref);
end;

Function RSObject.AnimatedModel: RSAnimatedModel; constref;
var
  UID: Int64;
  Entity: RSEntity;
  Definition: RSObjectDefinition;
  AnimationSequence: RSAnimationSequence;
  Garbage: RSTypeArray;
begin
  Entity := self.Renderable;

  //If it's a RSModel, return it..
  if RObjectInstanceOf(R_EIOS, Entity.ref, MODEL_FITSSINGLETILE.cls) then
  begin
    Result.ref := Entity.ref;
    Result.vertices := RSModel(Entity.ref).Vertices;
    Exit;
  end;

  //If it's a RSDynamicObject, return the model from cache..
  if RObjectInstanceOf(R_EIOS, Entity.ref, DYNAMICOBJECT_ID.cls) then
  begin
    Definition := self.Definition;
    if Definition.ref <> nil then
    begin
      if Definition.HasTransformations then
      begin
        Garbage += Definition;
        Definition := Definition.Transform;
        Garbage += Definition;
      end;

      if Definition.ref = nil then
      begin
        Garbage += Entity;
        Garbage.Free;
        Exit;
      end;

      if Not Definition.HasModels then
      begin
        UID := RSDynamicObject(Entity.ref).Orientation + (Definition.ID shl 10);
      end else
        begin
          UID := RSDynamicObject(Entity.ref).Orientation + (RSDynamicObject(Entity.ref).Flags shl 3) + (Definition.ID shl 10);
        end;

      Garbage += Entity;
      Result.ref := RSObjectDefinition.Model(UID).ref;

      if Result.ref <> nil then
      begin
        AnimationSequence := RSDynamicObject(Entity.ref).AnimationSequence;
        if AnimationSequence.ref <> nil then
        begin
          Garbage += [RSType(Result.ref), AnimationSequence];
          Result := AnimationSequence.TransformObjectModel(RSModel(Result.ref), RSDynamicObject(Entity.ref).AnimationFrameID);
          Garbage.Free;
          Exit;
        end;
      end;

      Garbage.Free;
      Exit;
    end;
  end;

  RFreeObject(R_EIOS, Entity.ref);
end;

Function RSObject.ClickArea: TPointArray;
var
  Model: RSModel;
  Tile: RSTile;
begin
  Model := self.Model;
  if Model.ref = nil then
    Exit;

  Tile := self.LocalTile;
  Result := Model.Bounds(Model.Vertices, Tile.X, Tile.Y, Tile.GetHeight(), 0);
  Model.Free;
end;
