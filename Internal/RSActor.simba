{$include_once RSStructures.simba}
{$include_once RSNode.simba}
{$include_once RSClient.simba}
{$include_once RSCombatInfo.simba}
{$include_once RSTile.simba}


Function RSActor.SpokenText: String; constref;
begin
  Result := RGetString(R_EIOS, ref, ACTOR_SPOKENTEXT);
end;

Function RSActor.Orientation: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_ORIENTATION);
end;

Function RSActor.LocalX: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_LOCALX);
end;

Function RSActor.LocalY: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_LOCALY);
end;

Function RSActor.LocalTile: RSTile; constref;
begin
  Result.X := RGetInt(R_EIOS, ref, ACTOR_LOCALX);
  Result.Y := RGetInt(R_EIOS, ref, ACTOR_LOCALY);
end;

Function RSActor.Tile: RSTile; constref;
begin
  Result.X := RSClient.BaseX + self.LocalX div 128;
  Result.Y := RSClient.BaseY + self.LocalY div 128;
end;

Function RSActor.AnimationId: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_ANIMATION);
end;

Function RSActor.IsAnimating: Boolean; constref;
begin
  Result := self.AnimationId > -1;
end;

Function RSActor.SpotAnimation : Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, Actor_SpotAnimation);
end;

Function RSActor.SpotAnimationFrame : Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, Actor_SpotAnimationFrame);
end;

Function RSActor.SpotAnimationFrameCycle : Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, Actor_SpotAnimationFrameCycle);
end;

Function RSActor.GraphicsID : Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, Actor_GraphicsID);
end;

Function RSActor.AnimationFrame: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_ANIMATIONFRAME);
end;

Function RSActor.MovementSequenceId: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_MOVEMENTSEQUENCE);
end;

Function RSActor.MovementFrame: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_MOVEMENTFRAME);
end;

Function RSActor.CurrentSequenceId: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_CURRENTSEQUENCE);
end;

Function RSActor.IsIdle: Boolean; constref;
begin
  Result := not self.isAnimating;
end;

Function RSActor.InteractingIndex: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_INTERACTINGINDEX);
end;

Function RSActor.Health: Int32; constref;
var
  CombatInfoList, CombatInfoHolder: RSCombatInfoList;
  Head, HolderHead, Next, HolderNext: RSNode;
  Garbage: RSTypeArray;
  label Cleanup;
begin
  Result := -1;
  CombatInfoList.ref := RGetObject(R_EIOS, ref, ACTOR_COMBATINFOLIST);
  if CombatInfoList.ref = nil then
    goto Cleanup;

  Head := CombatInfoList.Head;
  if Head.ref = nil then
    goto Cleanup;

  Next := Head.Next;

  if (Next.ref <> nil) and RIObjectIsInstanceOf(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFOLIST.cls) then
  begin
    CombatInfoHolder.ref := RGetObject(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFOLIST);
    if CombatInfoHolder.ref = nil then
      goto Cleanup;

    HolderHead := CombatInfoHolder.Head;
    if HolderHead.ref = nil then
      goto Cleanup;

    HolderNext := HolderHead.Next;

    if HolderNext.ref <> nil then
    begin
      Result := RSCombatInfo(HolderNext).Health;
    end;
  end;

  Cleanup:
    Garbage := [HolderNext, HolderHead, CombatInfoHolder, Next, Head, CombatInfoList];
    Garbage.Free;
end;

Function RSActor.HealthRatio: Int32; constref;
var
  CombatInfoList, CombatInfoHolder: RSCombatInfoList;
  Head, HolderHead, Next, HolderNext: RSNode;
  Garbage: RSTypeArray;
  label Cleanup;
begin
  Result := -1;
  CombatInfoList.ref := RGetObject(R_EIOS, ref, ACTOR_COMBATINFOLIST);
  if CombatInfoList.ref = nil then
    goto Cleanup;

  Head := CombatInfoList.Head;
  if Head.ref = nil then
    goto Cleanup;

  Next := Head.Next;

  if (Next.ref <> nil) and RIObjectIsInstanceOf(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFOLIST.cls) then
  begin
    CombatInfoHolder.ref := RGetObject(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFOLIST);
    if CombatInfoHolder.ref = nil then
      goto Cleanup;

    HolderHead := CombatInfoHolder.Head;
    if HolderHead.ref = nil then
      goto Cleanup;

    HolderNext := HolderHead.Next;

    if HolderNext.ref <> nil then
    begin
      Result := RSCombatInfo(HolderNext).HealthRatio;
    end;
  end;

  Cleanup:
    Garbage := [HolderNext, HolderHead, CombatInfoHolder, Next, Head, CombatInfoList];
    Garbage.Free;
end;

Function RSActor.HealthScale: Int32; constref;
var
  CombatInfoList: RSCombatInfoList;
  CombatInfo: RSCombatInfo;
  Head, Next: RSNode;
  Garbage: RSTypeArray;
  label Cleanup;
begin
  Result := -1;
  CombatInfoList.ref := RGetObject(R_EIOS, ref, ACTOR_COMBATINFOLIST);
  if CombatInfoList.ref = nil then
    goto Cleanup;

  Head := CombatInfoList.Head;
  if Head.ref = nil then
    goto Cleanup;

  Next := Head.Next;

  if (Next.ref <> nil) and RIObjectIsInstanceOf(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFO2.cls) then
  begin
    CombatInfo.ref := RGetObject(R_EIOS, Next.ref, COMBATINFOHOLDER_COMBATINFO2);
    if CombatInfo.ref <> nil then
    begin
      Result := CombatInfo.HealthScale;
    end;
  end;

  Cleanup:
    Garbage := [CombatInfo, Next, Head, CombatInfoList];
    Garbage.Free;
end;

Function RSActor.HealthPercentage: Single; constref;
begin
  Result := (self.Health / self.HealthScale) * 100.0;
end;

Function RSActor.IsInCombat: Boolean; constref;
begin
  Result := (self.InteractingIndex <> -1) or (self.Health <> -1);
end;

Function RSActor.GetInteracting: RSActor; constref;
var
  Index: Int32;
  Size: SizeUInt;
  Actors, GameInstance: Pointer;
begin
  Index := self.InteractingIndex;
  if (Index = -1) or (Index = 65535) then
    Exit;

  GameInstance := RGetStaticObject(R_EIOS, CLIENT_GAMEINSTANCE);
  if GameInstance = nil then
    Exit;

  if Index < 32768 then
  begin
    Actors := RGetArray(R_EIOS, GameInstance, Size, GAMEINSTANCE_NPCS);
    if (Actors <> nil) and (Index < Size) then
    begin
      Result.ref := RGetObjectArray(R_EIOS, Actors, Index);
    end;
    RFreeObject(R_EIOS, Actors);
  end else
    begin
      Index -= 32768;
      Actors := RGetStaticArray(R_EIOS, Size, GAMEINSTANCE_PLAYERS);
      if (Actors <> nil) and (Index < Size) then
      begin
        Result.ref := RGetObjectArray(R_EIOS, Actors, Index);
      end;
      RFreeObject(R_EIOS, Actors);
    end;
  RFreeObject(R_EIOS, GameInstance);
end;

Function RSActor.InBox(Bounds: TBox): Boolean;
var
  Tile: RSTile;
begin
  Tile := self.Tile;
  if (Tile.X >= Bounds.X1) and (Tile.Y <= Bounds.Y1) then
    Result := ((Tile.X >= Bounds.X1) and (Tile.X <= Bounds.X2) and (Tile.Y <= Bounds.Y1) and (Tile.Y >= Bounds.Y2))
  else if (Tile.X >= Bounds.X1) and (Tile.Y >= Bounds.Y1) then
    Result := ((Tile.X >= Bounds.X1) and (Tile.X <= Bounds.X2) and (Tile.Y >= Bounds.Y1) and (Tile.Y <= Bounds.Y2))
  else if (Tile.X <= Bounds.X1) and (Tile.Y <= Bounds.Y1) then
    Result := ((Tile.X <= Bounds.X1) and (Tile.X >= Bounds.X2) and (Tile.Y <= Bounds.Y1) and (Tile.Y >= Bounds.Y2))
  else if (Tile.X <= Bounds.X1) and (Tile.Y >= Bounds.Y1) then
    Result := ((Tile.X <= Bounds.X1) and (Tile.X >= Bounds.X2) and (Tile.Y >= Bounds.Y1) and (Tile.Y <= Bounds.Y2));
end;

Function RSActor.QueueSize: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, ACTOR_QUEUESIZE);
end;

Function RSActor.QueueX: Array of Int32; constref;
var
  Queue: Pointer;
  QueueSize: SizeUInt;
begin
  QueueSize := 0;
  Queue := RGetArray(R_EIOS, ref, QueueSize, ACTOR_QUEUEX);
  if Queue = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, Queue, 0, QueueSize);
  RFreeObject(R_EIOS, Queue);
end;

Function RSActor.QueueY: Array of Int32; constref;
var
  Queue: Pointer;
  QueueSize: SizeUInt;
begin
  QueueSize := 0;
  Queue := RGetArray(R_EIOS, ref, QueueSize, ACTOR_QUEUEY);
  if Queue = nil then
    Exit;

  Result := RGetIntArray(R_EIOS, Queue, 0, QueueSize);
  RFreeObject(R_EIOS, Queue);
end;

Function RSActor.Queue: Array of RSTile; constref;
var
  X: Array of Int32;
  Y: Array of Int32;
  I, L: Int32;
begin
  X := self.QueueX;
  Y := self.QueueY;

  L := Min(Length(X), Length(Y));
  if L = 0 then
    Exit;

  SetLength(Result, L);
  For I := 0 To L - 1 do
  begin
    Result[I] := [X[I], Y[I]];
    Result[I] := Result[I].SceneToLocal();
  end;
end;

Function RSActor.TrueLocalTile: RSTile; constref;
var
  Path: Array of RSTile;
begin
  Path := self.Queue;
  if Length(Path) > 0 then
  begin
    Exit(Path[0]);
  end;

  Result := self.LocalTile;
end;
