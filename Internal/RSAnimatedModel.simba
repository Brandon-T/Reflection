{$include_once RSStructures.simba}
{$include_once Static.simba}
{$include_once RSStructures.simba}
{$include_once RSModel.simba}
{$include_once RSAnimationFrame.simba}
{$include_once RSAnimationSkeleton.simba}
{$include_once RSAnimation.simba}


{$IFDEF MODEL_TRIANGLES}
Function RSAnimatedModel.TriangleFaces: Array of TTriangle; constref;
{$ELSE}
Function RSAnimatedModel.Triangles: Array of TTriangle; constref;
{$ENDIF}
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..3] of Array of Int32;
  Model: RSModel;
begin
  Model.ref := self.ref;
  Indices := Model.RawIndices;

  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].A := Vertices[Indices[0][I]];
    Result[I].B := Vertices[Indices[1][I]];
    Result[I].C := Vertices[Indices[2][I]];
  end;
end;

Function RSAnimatedModel.Animate(constref Frame: RSAnimationFrame; FrameID: Int32): RSAnimatedModel; constref;
var
  Model: RSModel;
  Animation: RSAnimation;
  Skeleton: RSAnimationSkeleton;
  FrameIDs: Array of Int32;
  I, TransformType: Int32;
  TransformationTypes: Array of Int32;
  Transformations: Array of Array of Int32;
  TransformX, TransformY, TransformZ: Array of Int32;
  Garbage: RSTypeArray;
  label Cleanup;
begin
  Model.ref := self.ref;
  Result.ref := self.ref;
  Result.skins := Model.Skins;
  Result.vertices := Model.Vertices;

  {$IFDEF MODEL_TRIANGLES}
  Result.triangles := self.triangles;
  {$ENDIF}

  if Length(Result.skins) > 0 then
  begin
    if FrameID <> -1 then
    begin
      Animation := Frame.Animation(FrameId);
      if Animation.ref = nil then
        goto Cleanup;

      Skeleton := Animation.Skeleton;
      if Skeleton.ref = nil then
        goto Cleanup;

      FrameIDs := Animation.Frames;

      Result.ModifierX := 0;
      Result.ModifierY := 0;
      Result.ModifierZ := 0;

      TransformationTypes := Skeleton.TransformationTypes;
      Transformations := Skeleton.Transformations;

      TransformX := Animation.TransformX;
      TransformY := Animation.TransformY;
      TransformZ := Animation.TransformZ;

      for I := 0 to Animation.FrameCount - 1 do
      begin
        TransformType := FrameIDs[I];
        Result.Transform(TransformationTypes[TransformType], Transformations[TransformType], TransformX[I], TransformY[I], TransformZ[I]);
      end;
    end;
	end;

  Cleanup:
    Garbage := [Skeleton, Animation, Frame];
    Garbage.Free;

  {$IFDEF MODEL_TRIANGLES}
  Result.triangles := Result.TriangleFaces;
  {$ENDIF}
end;

Function RSAnimatedModel.Animate(constref IdleFrame: RSAnimationFrame; IdleFrameID: Int32; constref MovementFrame: RSAnimationFrame; MovementFrameID: Int32; constref TransformationTypes: Array of Int32): RSAnimatedModel; constref; overload;
var
  Model: RSModel;
  IdleAnimation: RSAnimation;
  MovementAnimation: RSAnimation;
  Skeleton: RSAnimationSkeleton;
  I, J, CurrentTransformType, TransformType: Int32;
  FrameIDs: Array of Int32;
  TransformTypes: Array of Int32;
  Transformations: Array of Array of Int32;
  TransformX, TransformY, TransformZ: Array of Int32;
  Garbage: RSTypeArray;
  label Cleanup;
begin
  Model.ref := self.ref;
  Result.ref := self.ref;
  Result.skins := self.skins;
  Result.vertices := self.vertices;

  {$IFDEF MODEL_TRIANGLES}
  Result.triangles := self.triangles;
  {$ENDIF}

  if IdleFrameID <> -1 then
  begin
    if (MovementFrameID <> -1) and (Length(TransformationTypes) > 0) then
    begin
      Result.skins := Model.Skins;
      Result.vertices := Model.Vertices;
      {$IFDEF MODEL_TRIANGLES}
      Result.triangles := Result.TriangleFaces;
      {$ENDIF}

      IdleAnimation := IdleFrame.Animation(IdleFrameID);
      if IdleAnimation.ref = nil then
        goto Cleanup;

      MovementAnimation := MovementFrame.Animation(MovementFrameID);
      if MovementAnimation.ref = nil then
        goto Cleanup;

      Skeleton := IdleAnimation.Skeleton;
      if Skeleton.ref = nil then
        goto Cleanup;

      //Idle Animation
      Result.ModifierX := 0;
      Result.ModifierY := 0;
      Result.ModifierZ := 0;

      FrameIDs := IdleAnimation.Frames;
      TransformTypes := Skeleton.TransformationTypes;
      Transformations := Skeleton.Transformations;

      TransformX := IdleAnimation.TransformX;
      TransformY := IdleAnimation.TransformY;
      TransformZ := IdleAnimation.TransformZ;

      J := 1;
      CurrentTransformType := TransformationTypes[0];

      for I := 0 to IdleAnimation.FrameCount - 1 do
      begin
        TransformType := FrameIDs[I];
        while TransformType > CurrentTransformType do
        begin
          CurrentTransformType := TransformationTypes[J];
          Inc(J);
        end;

        if (TransformType <> CurrentTransformType) or (TransformTypes[TransformType] = 0) then
        begin
			    Result.Transform(TransformTypes[TransformType], Transformations[TransformType], TransformX[I], TransformY[I], TransformZ[I]);
		    end;
      end;

      //Movement Animation
      Result.ModifierX := 0;
      Result.ModifierY := 0;
      Result.ModifierZ := 0;

      FrameIDs := MovementAnimation.Frames;

      TransformX := MovementAnimation.TransformX;
      TransformY := MovementAnimation.TransformY;
      TransformZ := MovementAnimation.TransformZ;

      J := 1;
      CurrentTransformType := TransformationTypes[0];

      for I := 0 to MovementAnimation.FrameCount - 1 do
      begin
        TransformType := FrameIDs[I];
        while TransformType > CurrentTransformType do
        begin
          CurrentTransformType := TransformationTypes[J];
          Inc(J);
        end;

        if (TransformType <> CurrentTransformType) or (TransformTypes[TransformType] = 0) then
        begin
			    Result.Transform(TransformTypes[TransformType], Transformations[TransformType], TransformX[I], TransformY[I], TransformZ[I]);
		    end;
      end;

      Garbage := [Skeleton, MovementAnimation, IdleAnimation, IdleFrame, MovementFrame];
      Garbage.Free;
      Exit;
    end;

    Result.Animate(IdleFrame, IdleFrameID);
  end;

  Cleanup:
    Garbage := [IdleFrame, MovementFrame];
    Garbage.Free;
end;

Procedure RSAnimatedModel.Transform(TransformType: Int32; constref SkinIDs: Array of Int32; TransformationX, TransformationY, TransformationZ: Int32);
var
  I, J, SkinID, AffectedSkins: Int32;
  TransformCount: Int32;
  Skins: Array of Int32;
  Vertex: TVector;
  RotationX, RotationY, RotationZ: Int32;
  NewVertexX, NewVertexY, NewVertexZ: Int32;
  SineAngle: Int32;
  CosineAngle: Int32;
begin
  AffectedSkins := 0;
  TransformCount := Length(SkinIDs);

  if TransformType = 0 then
  begin
    self.ModifierX := 0;
    self.ModifierY := 0;
    self.ModifierZ := 0;

    for I := 0 to TransformCount - 1 do
    begin
      SkinID := SkinIDs[I];
      if SkinID < Length(self.skins) then
      begin
        Skins := self.skins[SkinID];
        for J := 0 to High(Skins) do
        begin
          Vertex := self.vertices[Skins[J]];
          self.ModifierX += Vertex.X;
          self.ModifierY += Vertex.Y;
          self.ModifierZ += Vertex.Z;
          Inc(AffectedSkins);
        end;
      end;
    end;

    if AffectedSkins > 0 then
    begin
      self.ModifierX := (self.ModifierX div AffectedSkins) + TransformationX;
      self.ModifierY := (self.ModifierY div AffectedSkins) + TransformationY;
      self.ModifierZ := (self.ModifierZ div AffectedSkins) + TransformationZ;
    end else
      begin
        self.ModifierX := TransformationX;
        self.ModifierY := TransformationY;
        self.ModifierZ := TransformationZ;
      end;

    Exit;
  end;

  //Translate
  if TransformType = 1 then
  begin
    for I := 0 to TransformCount - 1 do
    begin
      SkinID := SkinIDs[I];
      if SkinID < Length(self.skins) then
      begin
        Skins := self.skins[SkinID];
        for J := 0 to High(Skins) do
        begin
          Vertex := self.vertices[Skins[J]];
          Vertex.x += TransformationX;
          Vertex.y += TransformationY;
          Vertex.z += TransformationZ;
          self.vertices[Skins[J]] := Vertex;
        end;
      end;
    end;

    Exit;
  end;

  //Rotate
  if TransformType = 2 then
  begin
    for I := 0 to TransformCount - 1 do
    begin
      SkinID := SkinIDs[I];
      if SkinID < Length(self.skins) then
      begin
        Skins := self.skins[SkinID];
        for J := 0 to High(Skins) do
        begin
          Vertex := self.vertices[Skins[J]];
          Vertex.x -= self.ModifierX;
          Vertex.y -= self.ModifierY;
          Vertex.z -= self.ModifierZ;

          RotationX := (TransformationX and $FF) * 8;
          RotationY := (TransformationY and $FF) * 8;
          RotationZ := (TransformationZ and $FF) * 8;

          if RotationZ <> 0 then
          begin
            SineAngle := SINE[RotationZ];
            CosineAngle := COSINE[RotationZ];

            NewVertexX := Sar((Vertex.x * CosineAngle) + (Vertex.y * SineAngle), 16);
            Vertex.Y := Sar((Vertex.y * CosineAngle) - (Vertex.x * SineAngle), 16);
            Vertex.X := NewVertexX;
          end;

          if RotationX <> 0 then
          begin
            SineAngle := SINE[RotationX];
            CosineAngle := COSINE[RotationX];

            NewVertexY := Sar((Vertex.y * CosineAngle) - (Vertex.z * SineAngle), 16);
            Vertex.Z := Sar((Vertex.z * CosineAngle) + (Vertex.y * SineAngle), 16);
            Vertex.Y := NewVertexY;
          end;

          if RotationY <> 0 then
          begin
            SineAngle := SINE[RotationY];
            CosineAngle := COSINE[RotationY];

            NewVertexZ := Sar((Vertex.x * CosineAngle) + (Vertex.z * SineAngle), 16);
            Vertex.Z := Sar((Vertex.z * CosineAngle) - (Vertex.x * SineAngle), 16);
            Vertex.X := NewVertexZ;
          end;

          Vertex.X += self.ModifierX;
          Vertex.Y += self.ModifierY;
          Vertex.Z += self.ModifierZ;
          self.vertices[Skins[J]] := Vertex;
        end;
      end;
    end;

    Exit;
  end;

  //Scale
  if TransformType = 3 then
  begin
    for I := 0 to TransformCount - 1 do
    begin
      SkinID := SkinIDs[I];
      if SkinID < Length(self.skins) then
      begin
        Skins := self.skins[SkinID];
        for J := 0 to High(Skins) do
        begin
          Vertex := self.vertices[Skins[J]];

          Vertex.X -= self.ModifierX;
          Vertex.Y -= self.ModifierY;
          Vertex.Z -= self.ModifierZ;

          Vertex.X := (Vertex.X * TransformationX) div 128;
          Vertex.Y := (Vertex.Y * TransformationY) div 128;
          Vertex.Z := (Vertex.Z * TransformationZ) div 128;

          Vertex.X += self.ModifierX;
          Vertex.Y += self.ModifierY;
          Vertex.Z += self.ModifierZ;

          self.vertices[Skins[J]] := Vertex;
        end;
      end;
    end;

    Exit;
  end;
end;
