{$include_once Hooks.simba}
{$include_once Functions.simba}

{$IFNDEF STATIC_FUNCTIONS}
{$DEFINE STATIC_FUNCTIONS}

// MARK: - OBJECT

Function RGetStaticObject(eios: Pointer; constref hook: THook): Pointer;
begin
  Result := RIGetObject(eios, nil, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - SINGLE ELEMENTS

Function RGetStaticBool(eios: Pointer; constref hook: THook): Boolean;
begin
  result := RIGetBool(eios, nil, PRIField(@hook));
end;

Function RGetStaticChar(eios: Pointer; constref hook: THook): Char;
begin
  result := RIGetChar(eios, nil, PRIField(@hook));
end;

Function RGetStaticByte(eios: Pointer; constref hook: THook): Byte;
begin
  result := RIGetByte(eios, nil, PRIField(@hook));
end;

Function RGetStaticShort(eios: Pointer; constref hook: THook): Int16;
begin
  result := RIGetShort(eios, nil, PRIField(@hook));
end;

Function RGetStaticInt(eios: Pointer; constref hook: THook): Int32;
begin
  result := RIGetInt(eios, nil, PRIField(@hook)) * Int32(hook.multiplier);
end;

Function RGetStaticLong(eios: Pointer; constref hook: THook): Int64;
begin
  result := RIGetLong(eios, nil, PRIField(@hook)) * Int64(hook.multiplier);
end;

Function RGetStaticFloat(eios: Pointer; constref hook: THook): Single;
begin
  result := RIGetFloat(eios, nil, PRIField(@hook));
end;

Function RGetStaticDouble(eios: Pointer; constref hook: THook): Double;
begin
  result := RIGetDouble(eios, nil, PRIField(@hook));
end;

Function RGetStaticString(eios: Pointer; constref hook: THook): String;
begin
  Result := RIGetString(eios, nil, PRIField(@hook));
end;


// MARK: - ARRAY POINTERS

Function RGetStaticArray(eios: Pointer; constref hook: THook): Pointer;
begin
  result := RIGetArray(eios, nil, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticArray(eios: Pointer; var size: SizeUInt; constref hook: THook): Pointer; overload;
begin
  result := RIGetArray(eios, nil, @size, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticArraySize(eios: Pointer; instance: Pointer): SizeUInt;
begin
  result := RIGetArraySize(eios, instance);
end;


// MARK: - Array of 1-Dimension

Function RGetStaticBoolArray(eios: Pointer; index: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BOOLEAN, index))^;
end;

Function RGetStaticCharArray(eios: Pointer; index: SizeUInt): Char;
begin
  Result := PChar(RIGetArraySingleElement(eios, nil, ReflectionType.RI_CHAR, index))^;
end;

Function RGetStaticByteArray(eios: Pointer; index: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BYTE, index))^;
end;

Function RGetStaticShortArray(eios: Pointer; index: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArraySingleElement(eios, nil, ReflectionType.RI_SHORT, index))^;
end;

Function RGetStaticIntArray(eios: Pointer; index: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArraySingleElement(eios, nil, ReflectionType.RI_INT, index))^;
end;

Function RGetStaticLongArray(eios: Pointer; index: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArraySingleElement(eios, nil, ReflectionType.RI_LONG, index))^;
end;

Function RGetStaticFloatArray(eios: Pointer; index: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArraySingleElement(eios, nil, ReflectionType.RI_FLOAT, index))^;
end;

Function RGetStaticDoubleArray(eios: Pointer; index: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArraySingleElement(eios, nil, ReflectionType.RI_DOUBLE, index))^;
end;

Function RGetStaticStringArray(eios: Pointer; index: SizeUInt): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArraySingleElement(eios, nil, ReflectionType.RI_STRING, index))^;
end;

Function RGetStaticObjectArray(eios: Pointer; index: SizeUInt): Pointer;
begin
  Result := RIGetArraySingleElement(eios, nil, ReflectionType.RI_OBJECT, index);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticBoolArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BOOLEAN, index, count));
end;

Function RGetStaticBoolArray(eios: Pointer; indices: Array of Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElements(eios, nil, ReflectionType.RI_BOOLEAN, indices));
end;

Function RGetStaticCharArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, nil, ReflectionType.RI_CHAR, index, count));
end;

Function RGetStaticCharArray(eios: Pointer; indices: Array of Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElements(eios, nil, ReflectionType.RI_CHAR, indices));
end;

Function RGetStaticByteArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BYTE, index, count));
end;

Function RGetStaticByteArray(eios: Pointer; indices: Array of Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElements(eios, nil, ReflectionType.RI_BYTE, indices));
end;

Function RGetStaticShortArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, nil, ReflectionType.RI_SHORT, index, count));
end;

Function RGetStaticShortArray(eios: Pointer; indices: Array of Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElements(eios, nil, ReflectionType.RI_SHORT, indices));
end;

Function RGetStaticIntArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_INT, index, count));
end;

Function RGetStaticIntArray(eios: Pointer; indices: Array of Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElements(eios, nil, ReflectionType.RI_INT, indices));
end;

Function RGetStaticLongArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_LONG, index, count));
end;

Function RGetStaticLongArray(eios: Pointer; indices: Array of Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElements(eios, nil, ReflectionType.RI_LONG, indices));
end;

Function RGetStaticFloatArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, nil, ReflectionType.RI_FLOAT, index, count));
end;

Function RGetStaticFloatArray(eios: Pointer; indices: Array of Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElements(eios, nil, ReflectionType.RI_FLOAT, indices));
end;

Function RGetStaticDoubleArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, nil, ReflectionType.RI_DOUBLE, index, count));
end;

Function RGetStaticDoubleArray(eios: Pointer; indices: Array of Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElements(eios, nil, ReflectionType.RI_DOUBLE, indices));
end;

Function RGetStaticStringArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, nil, ReflectionType.RI_STRING, index, count));
end;

Function RGetStaticStringArray(eios: Pointer; indices: Array of Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElements(eios, nil, ReflectionType.RI_STRING, indices));
end;

Function RGetStaticObjectArray(eios: Pointer; index: SizeUInt; count: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, nil, ReflectionType.RI_OBJECT, index, count));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticObjectArray(eios: Pointer; indices: Array of Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElements(eios, nil, ReflectionType.RI_OBJECT, indices));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 2-Dimensions

Function RGetStaticBoolArray2D(eios: Pointer; x, y: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BOOLEAN, x, y))^;
end;

Function RGetStaticCharArray2D(eios: Pointer; x, y: Int32): Char;
begin
  Result := PChar(RIGetArraySingleElement(eios, nil, ReflectionType.RI_CHAR, x, y))^;
end;

Function RGetStaticByteArray2D(eios: Pointer; x, y: Int32): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BYTE, x, y))^;
end;

Function RGetStaticShortArray2D(eios: Pointer; x, y: Int32): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArraySingleElement(eios, nil, ReflectionType.RI_SHORT, x, y))^;
end;

Function RGetStaticIntArray2D(eios: Pointer; x, y: Int32): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArraySingleElement(eios, nil, ReflectionType.RI_INT, x, y))^;
end;

Function RGetStaticLongArray2D(eios: Pointer; x, y: Int32): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArraySingleElement(eios, nil, ReflectionType.RI_LONG, x, y))^;
end;

Function RGetStaticFloatArray2D(eios: Pointer; x, y: Int32): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArraySingleElement(eios, nil, ReflectionType.RI_FLOAT, x, y))^;
end;

Function RGetStaticDoubleArray2D(eios: Pointer; x, y: Int32): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArraySingleElement(eios, nil, ReflectionType.RI_DOUBLE, x, y))^;
end;

Function RGetStaticStringArray2D(eios: Pointer; x, y: Int32): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArraySingleElement(eios, nil, ReflectionType.RI_STRING, x, y))^;
end;

Function RGetStaticObjectArray2D(eios: Pointer; x, y: Int32): Pointer;
begin
  Result := RIGetArraySingleElement(eios, nil, ReflectionType.RI_OBJECT, x, y);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticBoolArray2D(eios: Pointer; count, x, y: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BOOLEAN, count, x, y));
end;

Function RGetStaticCharArray2D(eios: Pointer; count, x, y: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, nil, ReflectionType.RI_CHAR, count, x, y));
end;

Function RGetStaticByteArray2D(eios: Pointer; count, x, y: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BYTE, count, x, y));
end;

Function RGetStaticShortArray2D(eios: Pointer; count, x, y: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, nil, ReflectionType.RI_SHORT, count, x, y));
end;

Function RGetStaticIntArray2D(eios: Pointer; count, x, y: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_INT, count, x, y));
end;

Function RGetStaticLongArray2D(eios: Pointer; count, x, y: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_LONG, count, x, y));
end;

Function RGetStaticFloatArray2D(eios: Pointer; count, x, y: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, nil, ReflectionType.RI_FLOAT, count, x, y));
end;

Function RGetStaticDoubleArray2D(eios: Pointer; count, x, y: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, nil, ReflectionType.RI_DOUBLE, count, x, y));
end;

Function RGetStaticStringArray2D(eios: Pointer; count, x, y: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, nil, ReflectionType.RI_STRING, count, x, y));
end;

Function RGetStaticObjectArray2D(eios: Pointer; count, x, y: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, nil, ReflectionType.RI_OBJECT, count, x, y));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 3-Dimensions

Function RGetStaticBoolArray3D(eios: Pointer; x, y, z: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BOOLEAN, x, y, z))^;
end;

Function RGetStaticCharArray3D(eios: Pointer; x, y, z: Int32): Char;
begin
  Result := PChar(RIGetArraySingleElement(eios, nil, ReflectionType.RI_CHAR, x, y, z))^;
end;

Function RGetStaticByteArray3D(eios: Pointer; x, y, z: Int32): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BYTE, x, y, z))^;
end;

Function RGetStaticShortArray3D(eios: Pointer; x, y, z: Int32): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArraySingleElement(eios, nil, ReflectionType.RI_SHORT, x, y, z))^;
end;

Function RGetStaticIntArray3D(eios: Pointer; x, y, z: Int32): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArraySingleElement(eios, nil, ReflectionType.RI_INT, x, y, z))^;
end;

Function RGetStaticLongArray3D(eios: Pointer; x, y, z: Int32): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArraySingleElement(eios, nil, ReflectionType.RI_LONG, x, y, z))^;
end;

Function RGetStaticFloatArray3D(eios: Pointer; x, y, z: Int32): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArraySingleElement(eios, nil, ReflectionType.RI_FLOAT, x, y, z))^;
end;

Function RGetStaticDoubleArray3D(eios: Pointer; x, y, z: Int32): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArraySingleElement(eios, nil, ReflectionType.RI_DOUBLE, x, y, z))^;
end;

Function RGetStaticStringArray3D(eios: Pointer; x, y, z: Int32): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArraySingleElement(eios, nil, ReflectionType.RI_STRING, x, y, z))^;
end;

Function RGetStaticObjectArray3D(eios: Pointer; x, y, z: Int32): Pointer;
begin
  Result := RIGetArraySingleElement(eios, nil, ReflectionType.RI_OBJECT, x, y, z);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticBoolArray3D(eios: Pointer; count, x, y, z: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BOOLEAN, count, x, y, z));
end;

Function RGetStaticCharArray3D(eios: Pointer; count, x, y, z: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, nil, ReflectionType.RI_CHAR, count, x, y, z));
end;

Function RGetStaticByteArray3D(eios: Pointer; count, x, y, z: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BYTE, count, x, y, z));
end;

Function RGetStaticShortArray3D(eios: Pointer; count, x, y, z: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, nil, ReflectionType.RI_SHORT, count, x, y, z));
end;

Function RGetStaticIntArray3D(eios: Pointer; count, x, y, z: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_INT, count, x, y, z));
end;

Function RGetStaticLongArray3D(eios: Pointer; count, x, y, z: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_LONG, count, x, y, z));
end;

Function RGetStaticFloatArray3D(eios: Pointer; count, x, y, z: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, nil, ReflectionType.RI_FLOAT, count, x, y, z));
end;

Function RGetStaticDoubleArray3D(eios: Pointer; count, x, y, z: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, nil, ReflectionType.RI_DOUBLE, count, x, y, z));
end;

Function RGetStaticStringArray3D(eios: Pointer; count, x, y, z: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, nil, ReflectionType.RI_STRING, count, x, y, z));
end;

Function RGetStaticObjectArray3D(eios: Pointer; count, x, y, z: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, nil, ReflectionType.RI_OBJECT, count, x, y, z));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 4-Dimensions

Function RGetStaticBoolArray4D(eios: Pointer; x, y, z, w: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  Result := PBool(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BOOLEAN, x, y, z, w))^;
end;

Function RGetStaticCharArray4D(eios: Pointer; x, y, z, w: SizeUInt): Char;
begin
  Result := PChar(RIGetArraySingleElement(eios, nil, ReflectionType.RI_CHAR, x, y, z, w))^;
end;

Function RGetStaticByteArray4D(eios: Pointer; x, y, z, w: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  Result := PByte(RIGetArraySingleElement(eios, nil, ReflectionType.RI_BYTE, x, y, z, w))^;
end;

Function RGetStaticShortArray4D(eios: Pointer; x, y, z, w: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  Result := PShort(RIGetArraySingleElement(eios, nil, ReflectionType.RI_SHORT, x, y, z, w))^;
end;

Function RGetStaticIntArray4D(eios: Pointer; x, y, z, w: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  Result := PInt(RIGetArraySingleElement(eios, nil, ReflectionType.RI_INT, x, y, z, w))^;
end;

Function RGetStaticLongArray4D(eios: Pointer; x, y, z, w: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  Result := PLong(RIGetArraySingleElement(eios, nil, ReflectionType.RI_LONG, x, y, z, w))^;
end;

Function RGetStaticFloatArray4D(eios: Pointer; x, y, z, w: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  Result := PFloat(RIGetArraySingleElement(eios, nil, ReflectionType.RI_FLOAT, x, y, z, w))^;
end;

Function RGetStaticDoubleArray4D(eios: Pointer; x, y, z, w: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  Result := PDouble(RIGetArraySingleElement(eios, nil, ReflectionType.RI_DOUBLE, x, y, z, w))^;
end;

Function RGetStaticStringArray4D(eios: Pointer; x, y, z, w: SizeUInt): String;
type
  PString = ^String;
begin
  Result := PString(RIGetArraySingleElement(eios, nil, ReflectionType.RI_STRING, x, y, z, w))^;
end;

Function RGetStaticObjectArray4D(eios: Pointer; x, y, z, w: SizeUInt): Pointer;
begin
  Result := RIGetArraySingleElement(eios, nil, ReflectionType.RI_OBJECT, x, y, z, w);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetStaticBoolArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  Result := TBooleanArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BOOLEAN, count, x, y, z, w));
end;

Function RGetStaticCharArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  Result := TCharArray(RIGetArrayElement(eios, nil, ReflectionType.RI_CHAR, count, x, y, z, w));
end;

Function RGetStaticByteArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  Result := TByteArray(RIGetArrayElement(eios, nil, ReflectionType.RI_BYTE, count, x, y, z, w));
end;

Function RGetStaticShortArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  Result := TShortArray(RIGetArrayElement(eios, nil, ReflectionType.RI_SHORT, count, x, y, z, w));
end;

Function RGetStaticIntArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_INT, count, x, y, z, w));
end;

Function RGetStaticLongArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  Result := TIntArray(RIGetArrayElement(eios, nil, ReflectionType.RI_LONG, count, x, y, z, w));
end;

Function RGetStaticFloatArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  Result := TFloatArray(RIGetArrayElement(eios, nil, ReflectionType.RI_FLOAT, count, x, y, z, w));
end;

Function RGetStaticDoubleArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  Result := TDoubleArray(RIGetArrayElement(eios, nil, ReflectionType.RI_DOUBLE, count, x, y, z, w));
end;

Function RGetStaticStringArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  Result := TStringArray(RIGetArrayElement(eios, nil, ReflectionType.RI_STRING, count, x, y, z, w));
end;

Function RGetStaticObjectArray4D(eios: Pointer; count, x, y, z, w: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  Result := TObjectArray(RIGetArrayElement(eios, nil, ReflectionType.RI_OBJECT, count, x, y, z, w));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;
{$ENDIF}
