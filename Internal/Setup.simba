{$include_once Static.simba}

const
{$IFDEF WINDOWS}
  {$IFDEF CPU32}
  REMOTE_INPUT_PLUGIN = 'libRemoteInput32.dll';
  {$ELSE}
  REMOTE_INPUT_PLUGIN = 'libRemoteInput64.dll';
  {$ENDIF}
{$ENDIF}

{$IFDEF DARWIN}
REMOTE_INPUT_PLUGIN = 'libRemoteInput64.dylib';
{$ENDIF}

{$IFDEF LINUX}
  {$IFDEF CPUARM}
  REMOTE_INPUT_PLUGIN = 'libRemoteInput32.so';
  {$ENDIF}

  {$IFDEF CPUAARCH64}
  REMOTE_INPUT_PLUGIN = 'libRemoteInput64.so';
  {$ENDIF}

  {$IFNDEF CPUARM}
    {$IFNDEF CPUAARCH64}
    REMOTE_INPUT_PLUGIN = 'libRemoteInput64.so';
    {$ENDIF}
  {$ENDIF}
{$ENDIF}

Procedure RSetup;
const
  RS_EXECUTABLE = {$IFDEF WINDOWS}'JagexLauncher.exe'{$ELSE}'java'{$ENDIF};
var
  PID: Int32;
  I, ClientCount: SizeUInt;
begin
  {$IFNDEF SIMBAHEADLESS}
  RIInject(GetSimbaTargetPID());
  {$ELSE}  
  WriteLn('Running Simba in Headless Mode. Automatically trying to find a RS client.');
  RIInject(RS_EXECUTABLE);
  {$ENDIF}

  PID := -1;
  ClientCount := EIOS_GetClients(true);
  for I := 0 to ClientCount - 1 do
  begin
    PID := EIOS_GetClientPID(I);
    if PID <> -1 then
    begin
      SetEIOSTarget(PLUGINPATH + REMOTE_INPUT_PLUGIN, IntToStr(PID));
      break;
    end;
  end;

  if PID = -1 then
    RaiseException(erCustomError, 'Reflection Not Setup - No EIOS Target');

  R_EIOS := EIOS_PairClient(PID);
  if R_EIOS = nil then
    RaiseException(erCustomError, 'Reflection Not Setup - No EIOS Target');

  RInitializeConstants;
  RInitializeVarpMasks;
  RInitializeTileSettings;
  RInitializeTileHeights;
end;
