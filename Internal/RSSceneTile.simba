{$include_once RSStructures.simba}

Function RSSceneTile.X: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, SCENETILE_X);
end;

Function RSSceneTile.Y: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, SCENETILE_Y);
end;

Function RSSceneTile.Plane: Int32; constref;
begin
  Result := RGetInt(R_EIOS, ref, SCENETILE_PLANE);
end;

Function RSSceneTile.BoundaryObject: RSObject; constref;
begin
  Result.ref := RGetObject(R_EIOS, ref, SCENETILE_BOUNDARYOBJECT);
  Result.ObjectType := RSObjectType.BOUNDARY_OBJECT;
  Result.Plane := self.Plane;
end;

Function RSSceneTile.SceneTileObject: RSSceneTile; constref;
begin
  Result.ref := RGetObject(R_EIOS, ref, SCENETILE_SCENETILE);
end;

Function RSSceneTile.GameObject: RSObject; constref;
var
  Objects: Pointer;
  ObjectsSize: SizeUInt;
begin
  ObjectsSize := 0;
  Objects := RGetArray(R_EIOS, ref, ObjectsSize, SCENETILE_GAMEOBJECTS);
  if (Objects = nil) or (ObjectsSize = 0) then
    Exit;

  Result.ref := RGetObjectArray(R_EIOS, Objects, 0);
  Result.ObjectType := RSObjectType.GAME_OBJECT;
  Result.Plane := self.Plane;
  RFreeObject(R_EIOS, Objects);
end;

Function RSSceneTile.GameObjects: Array of RSObject; constref;
var
  Objects: Pointer;
  I, ObjectsSize: SizeUInt;
  GameObjects: Array of Pointer;
  TilePlane: Int32;
begin
  ObjectsSize := 0;
  Objects := RGetArray(R_EIOS, ref, ObjectsSize, SCENETILE_GAMEOBJECTS);
  if Objects = nil then
    Exit;

  SetLength(Result, ObjectsSize);
  GameObjects := RGetObjectArray(R_EIOS, Objects, 0, ObjectsSize);
  RFreeObject(R_EIOS, Objects);

  TilePlane := self.Plane;
  for I := 0 to ObjectsSize - 1 do
  begin
    Result[I].ref := GameObjects[I];
    Result[I].ObjectType := RSObjectType.GAME_OBJECT;
    Result[I].Plane := TilePlane;
  end;
end;

Function RSSceneTile.WallDecoration: RSObject; constref;
begin
  Result.ref := RGetObject(R_EIOS, ref, SCENETILE_WALLDECORATION);
  Result.ObjectType := RSObjectType.WALL_DECORATION;
  Result.Plane := self.Plane;
end;

Function RSSceneTile.FloorDecoration: RSObject; constref;
begin
  Result.ref := RGetObject(R_EIOS, ref, SCENETILE_FLOORDECORATION);
  Result.ObjectType := RSObjectType.FLOOR_DECORATION;
  Result.Plane := self.Plane;
end;
