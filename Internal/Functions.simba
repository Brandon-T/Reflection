{$include_once Hooks.simba}
{$IFNDEF FUNCTIONS}
{$DEFINE FUNCTIONS}

{$IFDEF TRACK_MEMORY}
//Used to check for leaks in the include..
type
  MemoryPointer = Array of Pointer;

var
  MemoryTracker: MemoryPointer;

procedure MemoryPointer.DeleteIndex(index: integer);
var
  i: Integer;
begin
  if (index >= 0) and (index < Length(self)) then
  begin
    for i := index + 1 to high(self) do
    begin
      self[i - 1] := self[i];
    end;

    SetLength(self, Length(self) - 1);
  end;
end;

function MemoryPointer.IndexOf(value: pointer): Int32;
var
  i: Integer;
begin
  for i := 0 to high(self) do
    if self[i] = value then
      exit(i);

  exit(-1);
end;

Procedure MemoryPointer.Add(ptr: Pointer);
begin
  if ptr <> nil then
    self += ptr;
end;

Procedure MemoryPointer.Add(ptr: Array of Pointer); overload;
var
  i: Int32;
begin
  for i := 0 to high(ptr) do
    self.add(ptr[i]);
end;

Procedure MemoryPointer.Remove(ptr: Pointer);
var
  J: Integer;
begin
  J := self.IndexOf(ptr);
  if J >= 0 then
    Delete(self, J, 1);
end;

Procedure MemoryPointer.Remove(ptrs: Array of Pointer); overload;
var
  I: Integer;
begin
  for i := 0 to high(ptrs) do
  begin
    self.Remove(ptrs[I]);
  end;
end;

Function MemoryPointer.MemoryUsage: Int32;
begin
  Result := (Length(self) * Sizeof(Pointer));
end;

Procedure MemoryPointer.Log;
begin
  WriteLn('Memory In Use: ', self.MemoryUsage, ' Bytes.');
end;
{$ENDIF}

{$IFDEF DEBUG_REFLECTION_NULLPTR}
Procedure RAssertNotNull(instance: Pointer; info: String);
begin
  if instance = nil then
  begin
    RaiseException('NULL_POINTER_EXCEPTION: ' + info);
  end;
end;

Procedure RAssertNotNull(instance: Pointer; constref hook: THook; info: String); overload;
begin
  if instance = nil then
  begin
    RaiseException('NULL_POINTER_EXCEPTION: ' + ToStr(hook) + ' in call to: ' + info);
  end;
end;
{$ENDIF}

// MARK: - OBJECT

Function RGetObject(eios: Pointer; instance: Pointer; constref hook: THook) : Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetObject(Hook)');
  {$ENDIF}

  Result := RIGetObject(eios, instance, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Procedure RFreeObject(eios: Pointer; instance: Pointer);
begin
  if instance <> nil then
  begin
    RIReleaseObject(eios, instance);
    {$IFDEF TRACK_MEMORY}
    MemoryTracker.Remove(instance);
    {$ENDIF}
  end;
end;

Procedure RFreeObjects(eios: Pointer; constref instances: array of Pointer);
begin
  if Length(instances) > 0 then
  begin
    RIReleaseObjects(eios, instances);
    {$IFDEF TRACK_MEMORY}
    MemoryTracker.Remove(instances);
    {$ENDIF}
  end;
end;

Function RObjectsEqual(eios: Pointer; first, second: Pointer): Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(first, 'RObjectsEqual(First, ...)');
  RAssertNotNull(second, 'RObjectsEqual(..., Second)');
  {$ENDIF}
  result := RIObjectsEqual(eios, first, second);
end;

Function RObjectInstanceOf(eios: Pointer; instance: Pointer; cls: String): Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RObjectInstanceOf(' + cls + ')');
  {$ENDIF}

  result := RIObjectIsInstanceOf(eios, instance, cls);
end;


// MARK: - SINGLE ELEMENTS

Function RGetBool(eios: Pointer; instance: Pointer; constref hook: THook): Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetBool(Hook)');
  {$ENDIF}

  result := RIGetBool(eios, instance, PRIField(@hook));
end;

Function RGetChar(eios: Pointer; instance: Pointer; constref hook: THook): Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetChar(Hook)');
  {$ENDIF}

  result := RIGetChar(eios, instance, PRIField(@hook));
end;

Function RGetByte(eios: Pointer; instance: Pointer; constref hook: THook): Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetByte');
  {$ENDIF}

  result := RIGetByte(eios, instance, PRIField(@hook));
end;

Function RGetShort(eios: Pointer; instance: Pointer; constref hook: THook): Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetShort(Hook)');
  {$ENDIF}

  result := RIGetShort(eios, instance, PRIField(@hook));
end;

Function RGetInt(eios: Pointer; instance: Pointer; constref hook: THook): Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetInt(Hook)');
  {$ENDIF}

  result := RIGetInt(eios, instance, PRIField(@hook)) * Int32(hook.multiplier);
end;

Function RGetLong(eios: Pointer; instance: Pointer; constref hook: THook): Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetLong(Hook)');
  {$ENDIF}

  result := RIGetLong(eios, instance, PRIField(@hook)) * Int64(hook.multiplier);
end;

Function RGetFloat(eios: Pointer; instance: Pointer; constref hook: THook): Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetFloat(Hook)');
  {$ENDIF}

  result := RIGetFloat(eios, instance, PRIField(@hook));
end;

Function RGetDouble(eios: Pointer; instance: Pointer; constref hook: THook): Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetDouble(Hook)');
  {$ENDIF}

  result := RIGetDouble(eios, instance, PRIField(@hook));
end;

Function RGetString(eios: Pointer; instance: Pointer; constref hook: THook): String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetString(Hook)');
  {$ENDIF}

  Result := RIGetString(eios, instance, PRIField(@hook));
end;


// MARK: - ARRAY POINTERS

Function RGetArray(eios: Pointer; instance: Pointer; constref hook: THook): Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetArray(Hook)');
  {$ENDIF}

  result := RIGetArray(eios, instance, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetArray(eios: Pointer; instance: Pointer; var size: SizeUInt; constref hook: THook): Pointer; overload;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, hook, 'RGetArray(Size, Hook)');
  {$ENDIF}

  result := RIGetArray(eios, instance, @size, PRIField(@hook));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetArraySize(eios: Pointer; instance: Pointer): SizeUInt;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetArraySize(Array)');
  {$ENDIF}

  result := RIGetArraySize(eios, instance);
end;

Function RGetArraySize(eios: Pointer; instance: Pointer; index: SizeUInt): SizeUInt; overload;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetArraySize(Index)');
  {$ENDIF}

  result := RIGetArraySize(eios, instance, index);
end;


// MARK: - Array of 1-Dimension

Function RGetBoolArray(eios: Pointer; instance: Pointer; index: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray(Index)');
  {$ENDIF}

  Result := PBool(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, index))^;
end;

Function RGetCharArray(eios: Pointer; instance: Pointer; index: SizeUInt): Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray(Index)');
  {$ENDIF}

  Result := PChar(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_CHAR, index))^;
end;

Function RGetByteArray(eios: Pointer; instance: Pointer; index: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray(Index)');
  {$ENDIF}

  Result := PByte(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BYTE, index))^;
end;

Function RGetShortArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray(Index)');
  {$ENDIF}

  Result := PShort(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_SHORT, index))^;
end;

Function RGetIntArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray(Index)');
  {$ENDIF}

  Result := PInt(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_INT, index))^;
end;

Function RGetLongArray(eios: Pointer; instance: Pointer; index: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray(Index)');
  {$ENDIF}

  Result := PLong(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_LONG, index))^;
end;

Function RGetFloatArray(eios: Pointer; instance: Pointer; index: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray(Index)');
  {$ENDIF}

  Result := PFloat(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_FLOAT, index))^;
end;

Function RGetDoubleArray(eios: Pointer; instance: Pointer; index: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray(Index)');
  {$ENDIF}

  Result := PDouble(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_DOUBLE, index))^;
end;

Function RGetStringArray(eios: Pointer; instance: Pointer; index: SizeUInt): String;
type
  PString = ^String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray(Index)');
  {$ENDIF}

  Result := PString(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_STRING, index))^;
end;

Function RGetObjectArray(eios: Pointer; instance: Pointer; index: SizeUInt): Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray(Index)');
  {$ENDIF}

  Result := RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_OBJECT, index);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetBoolArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray(Index, Count)');
  {$ENDIF}

  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, index, count));
end;

Function RGetBoolArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray(Indices)');
  {$ENDIF}

  Result := TBooleanArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_BOOLEAN, indices));
end;

Function RGetCharArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray(Index, Count)');
  {$ENDIF}

  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, index, count));
end;

Function RGetCharArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray(Indices)');
  {$ENDIF}

  Result := TCharArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_CHAR, indices));
end;

Function RGetByteArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray(Index, Count)');
  {$ENDIF}

  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, index, count));
end;

Function RGetByteArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray(Indices)');
  {$ENDIF}

  Result := TByteArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_BYTE, indices));
end;

Function RGetShortArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray(Index, Count)');
  {$ENDIF}

  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, index, count));
end;

Function RGetShortArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray(Indices)');
  {$ENDIF}

  Result := TShortArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_SHORT, indices));
end;

Function RGetIntArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray(Index, Count)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, index, count));
end;

Function RGetIntArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray(Indices)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_INT, indices));
end;

Function RGetLongArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray(Index, Count)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, index, count));
end;

Function RGetLongArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray(Indices)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_LONG, indices));
end;

Function RGetFloatArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray(Index, Count)');
  {$ENDIF}

  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, index, count));
end;

Function RGetFloatArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray(Indices)');
  {$ENDIF}

  Result := TFloatArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_FLOAT, indices));
end;

Function RGetDoubleArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray(Index, Count)');
  {$ENDIF}

  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, index, count));
end;

Function RGetDoubleArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray(Indices)');
  {$ENDIF}

  Result := TDoubleArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_DOUBLE, indices));
end;

Function RGetStringArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray(Index, Count)');
  {$ENDIF}

  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, index, count));
end;

Function RGetStringArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray(Indices)');
  {$ENDIF}

  Result := TStringArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_STRING, indices));
end;

Function RGetObjectArray(eios: Pointer; instance: Pointer; index: SizeUInt; count: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray(Index, Count)');
  {$ENDIF}

  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, index, count));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetObjectArray(eios: Pointer; instance: Pointer; indices: Array of Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray(Indices)');
  {$ENDIF}

  Result := TObjectArray(RIGetArrayElements(eios, instance, ReflectionArrayType.RI_OBJECT, indices));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 2-Dimensions

Function RGetBoolArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray2D(X, Y)');
  {$ENDIF}

  Result := PBool(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, x, y))^;
end;

Function RGetCharArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray2D(X, Y)');
  {$ENDIF}

  Result := PChar(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_CHAR, x, y))^;
end;

Function RGetByteArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Byte;
type
  PByte = ^Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray2D(X, Y)');
  {$ENDIF}

  Result := PByte(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BYTE, x, y))^;
end;

Function RGetShortArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int16;
type
  PShort = ^Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray2D(X, Y)');
  {$ENDIF}

  Result := PShort(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_SHORT, x, y))^;
end;

Function RGetIntArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int32;
type
  PInt = ^Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray2D(X, Y)');
  {$ENDIF}

  Result := PInt(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_INT, x, y))^;
end;

Function RGetLongArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Int64;
type
  PLong = ^Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray2D(X, Y)');
  {$ENDIF}

  Result := PLong(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_LONG, x, y))^;
end;

Function RGetFloatArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Single;
type
  PFloat = ^Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray2D(X, Y)');
  {$ENDIF}

  Result := PFloat(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_FLOAT, x, y))^;
end;

Function RGetDoubleArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Double;
type
  PDouble = ^Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray2D(X, Y)');
  {$ENDIF}

  Result := PDouble(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_DOUBLE, x, y))^;
end;

Function RGetStringArray2D(eios: Pointer; instance: Pointer; x, y: Int32): String;
type
  PString = ^String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray2D(X, Y)');
  {$ENDIF}

  Result := PString(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_STRING, x, y))^;
end;

Function RGetObjectArray2D(eios: Pointer; instance: Pointer; x, y: Int32): Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray2D(X, Y)');
  {$ENDIF}

  Result := RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_OBJECT, x, y);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetBoolArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y));
end;

Function RGetCharArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y));
end;

Function RGetByteArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y));
end;

Function RGetShortArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y));
end;

Function RGetIntArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y));
end;

Function RGetLongArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y));
end;

Function RGetFloatArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y));
end;

Function RGetDoubleArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y));
end;

Function RGetStringArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y));
end;

Function RGetObjectArray2D(eios: Pointer; instance: Pointer; count, x, y: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray2D(Size, X, Y)');
  {$ENDIF}

  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 3-Dimensions

Function RGetBoolArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Boolean;
type
  PBool = ^Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PBool(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, x, y, z))^;
end;

Function RGetCharArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PChar(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_CHAR, x, y, z))^;
end;

Function RGetByteArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Byte;
type
  PByte = ^Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PByte(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BYTE, x, y, z))^;
end;

Function RGetShortArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int16;
type
  PShort = ^Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PShort(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_SHORT, x, y, z))^;
end;

Function RGetIntArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int32;
type
  PInt = ^Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PInt(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_INT, x, y, z))^;
end;

Function RGetLongArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Int64;
type
  PLong = ^Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PLong(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_LONG, x, y, z))^;
end;

Function RGetFloatArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Single;
type
  PFloat = ^Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PFloat(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_FLOAT, x, y, z))^;
end;

Function RGetDoubleArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Double;
type
  PDouble = ^Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PDouble(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_DOUBLE, x, y, z))^;
end;

Function RGetStringArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): String;
type
  PString = ^String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray3D(X, Y, Z)');
  {$ENDIF}

  Result := PString(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_STRING, x, y, z))^;
end;

Function RGetObjectArray3D(eios: Pointer; instance: Pointer; x, y, z: Int32): Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray3D(X, Y, Z)');
  {$ENDIF}

  Result := RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_OBJECT, x, y, z);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetBoolArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y, z));
end;

Function RGetCharArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Char; overload;
type
  TCharArray = array of Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y, z));
end;

Function RGetByteArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y, z));
end;

Function RGetShortArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y, z));
end;

Function RGetIntArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y, z));
end;

Function RGetLongArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y, z));
end;

Function RGetFloatArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y, z));
end;

Function RGetDoubleArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y, z));
end;

Function RGetStringArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of String; overload;
type
  TStringArray = array of String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y, z));
end;

Function RGetObjectArray3D(eios: Pointer; instance: Pointer; count, x, y, z: Int32): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray3D(Size, X, Y, Z)');
  {$ENDIF}

  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y, z));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;


// MARK: - Array of 4-Dimensions

Function RGetBoolArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Boolean;
type
  PBool = ^Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PBool(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, x, y, z, w))^;
end;

Function RGetCharArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PChar(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_CHAR, x, y, z, w))^;
end;

Function RGetByteArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Byte;
type
  PByte = ^Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PByte(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_BYTE, x, y, z, w))^;
end;

Function RGetShortArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int16;
type
  PShort = ^Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PShort(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_SHORT, x, y, z, w))^;
end;

Function RGetIntArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int32;
type
  PInt = ^Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PInt(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_INT, x, y, z, w))^;
end;

Function RGetLongArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Int64;
type
  PLong = ^Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PLong(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_LONG, x, y, z, w))^;
end;

Function RGetFloatArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Single;
type
  PFloat = ^Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PFloat(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_FLOAT, x, y, z, w))^;
end;

Function RGetDoubleArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Double;
type
  PDouble = ^Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PDouble(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_DOUBLE, x, y, z, w))^;
end;

Function RGetStringArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): String;
type
  PString = ^String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := PString(RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_STRING, x, y, z, w))^;
end;

Function RGetObjectArray4D(eios: Pointer; instance: Pointer; x, y, z, w: SizeUInt): Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray4D(X, Y, Z, W)');
  {$ENDIF}

  Result := RIGetArraySingleElement(eios, instance, ReflectionArrayType.RI_OBJECT, x, y, z, w);
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;

Function RGetBoolArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Boolean; overload;
type
  TBooleanArray = array of Boolean;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetBoolArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TBooleanArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BOOLEAN, count, x, y, z, w));
end;

Function RGetCharArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Char; overload;
type
  TCharArray = array of Char;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetCharArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TCharArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_CHAR, count, x, y, z, w));
end;

Function RGetByteArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Byte; overload;
type
  TByteArray = array of Byte;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetByteArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TByteArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_BYTE, count, x, y, z, w));
end;

Function RGetShortArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int16; overload;
type
  TShortArray = array of Int16;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetShortArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TShortArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_SHORT, count, x, y, z, w));
end;

Function RGetIntArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int32; overload;
type
  TIntArray = array of Int32;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetIntArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_INT, count, x, y, z, w));
end;

Function RGetLongArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Int64; overload;
type
  TIntArray = array of Int64;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetLongArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TIntArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_LONG, count, x, y, z, w));
end;

Function RGetFloatArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Single; overload;
type
  TFloatArray = array of Single;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetFloatArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TFloatArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_FLOAT, count, x, y, z, w));
end;

Function RGetDoubleArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Double; overload;
type
  TDoubleArray = array of Double;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetDoubleArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TDoubleArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_DOUBLE, count, x, y, z, w));
end;

Function RGetStringArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of String; overload;
type
  TStringArray = array of String;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetStringArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TStringArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_STRING, count, x, y, z, w));
end;

Function RGetObjectArray4D(eios: Pointer; instance: Pointer; count, x, y, z, w: SizeUInt): array of Pointer; overload;
type
  TObjectArray = array of Pointer;
begin
  {$IFDEF DEBUG_REFLECTION_NULLPTR}
  RAssertNotNull(instance, 'RGetObjectArray4D(Size, X, Y, Z, W)');
  {$ENDIF}

  Result := TObjectArray(RIGetArrayElement(eios, instance, ReflectionArrayType.RI_OBJECT, count, x, y, z, w));
  {$IFDEF TRACK_MEMORY}
  MemoryTracker.Add(Result);
  {$ENDIF}
end;
{$ENDIF}
