{$include_once RSStructures.simba}
{$include_once Static.simba}
{$include_once RSClient.simba}
{$include_once RSNPCDefinition.simba}
{$include_once RSActor.simba}

Function RSNPC.Definition: RSNPCDefinition; constref;
begin
  Result.ref := RGetObject(R_EIOS, ref, NPC_DEFINITION);
end;

Function RSNPC.TransformedDefinition: RSNPCDefinition; constref;
var
  Definition: RSNPCDefinition;
  Bit, TransformID: Int32;
  DefinitionID: Int32;
  Transformations: Array of Int32;
begin
  Definition := self.Definition;
  if Definition.ref <> nil then
  begin
    Bit := -1;
    TransformID := Definition.TransformVarbit;

    if TransformID <> -1 then
    begin
      Bit := RSClient.GetVarBit(TransformID);
    end else
      begin
        Bit := RSVarps.VarpMain(Definition.TransformVarp);
      end;

    Transformations := Definition.Transformations;
    if (Bit >= 0) and (Bit < (Length(Transformations) - 1)) then
    begin
			DefinitionID := Transformations[Bit];
    end else
      if Length(Transformations) > 0 then
      begin
        DefinitionID := Transformations[Length(Transformations) - 1];
      end;

    if DefinitionID <> -1 then
    begin
      Result.ref := RSNPCDefinition.DefinitionCache(DefinitionID).ref;
      if Result.ref <> nil then
      begin
        Definition.Free;
        Exit;
      end;
    end;

    Result.ref := Definition.ref;
  end;
end;

Function RSNPC.AllNPCs: Array of RSNPC; static;
var
  NPCs: Pointer;
  NPCsArray: Array of Pointer;
  Indices: Array of Int32;
  I, NPCsSize, Actual: SizeUInt;
begin
  Indices := RSClient.NPCIndices();
  if Length(Indices) < 1 then
    Exit;

  NPCsSize := 0;
  NPCs := RGetStaticArray(R_EIOS, NPCsSize, CLIENT_LOCALNPCS);
  if NPCs = nil then
    Exit;

  NPCsArray := RGetObjectArray(R_EIOS, NPCs, Indices);
  RFreeObject(R_EIOS, NPCs);

  SetLength(Result, Length(NPCsArray));

  for I := 0 to High(NPCsArray) do
  begin
    if NPCsArray[I] <> nil then
    begin
      Result[Actual].ref := NPCsArray[I];
      Inc(Actual);
    end;
  end;
  SetLength(Result, Actual);
end;

Function RSNPC.Model: RSModel; constref;
var
  Definition: RSNPCDefinition;
begin
  Definition := self.TransformedDefinition;
  if Definition.ref = nil then
    Exit;

  Result := Definition.CachedModel;
  Definition.Free;
end;

Function RSNPC.AnimatedModel: RSAnimatedModel; constref;
var
  AnimationId, AnimationDelay: Int32;
  AnimationFrame, MovementId: Int32;
  MovementFrame: Int32;
  Model: RSModel;
  IdleSequence: RSAnimationSequence;
  MovementSequence: RSAnimationSequence;

  AnimationCache: RSCache;
  HashTable: RSIterableHashTable;
  Garbage: RSTypeArray;
begin
  Model := self.Model;

  if Model.ref <> nil then
  begin
    AnimationDelay := 0;
    AnimationId := self.AnimationId;
    MovementId := self.MovementSequenceId;
    AnimationFrame := self.AnimationFrame;
    MovementFrame := self.MovementFrame;

    if (AnimationId <> -1) and (AnimationDelay = 0) then
    begin
      AnimationCache := RSAnimationSequence.AnimationSequenceCache;
      if AnimationCache.ref <> nil then
      begin
        HashTable := AnimationCache.HashTable;
        if HashTable.ref <> nil then
        begin
          IdleSequence.ref := HashTable.GetObject(AnimationId).ref;
        end;
      end;

      Garbage += [HashTable, AnimationCache];
    end;

    if (MovementId <> -1) and ((MovementId <> self.CurrentSequenceId) or (IdleSequence.ref = nil)) then
    begin
      AnimationCache := RSAnimationSequence.AnimationSequenceCache;
      if AnimationCache.ref <> nil then
      begin
        HashTable := AnimationCache.HashTable;
        if HashTable.ref <> nil then
        begin
          MovementSequence.ref := HashTable.GetObject(MovementId).ref;
        end;
      end;

      Garbage += [HashTable, AnimationCache];
    end;

    Garbage.Free;
    Exit(RSNPCDefinition.GetModel(Model, IdleSequence, AnimationFrame, MovementSequence, MovementFrame));
  end;

  Result.ref := Model.ref;
  Result.vertices := [];
  {$IFDEF MODEL_TRIANGLES}
  Result.triangles := [];
  {$ENDIF}

  Garbage.Free;
end;

Function RSNPC.ClickArea: TPointArray;
var
  Model: RSAnimatedModel;
  Definition: RSNPCDefinition;
  Tile, HeightTile: RSTile;
  ModelTileSize: Int32;
  ShouldScale: Boolean;
  ModelScale: TVector;
  Vertices: Array of TVector;
begin
  Model := self.AnimatedModel;
  if Model.ref = nil then
    Exit;

  ModelTileSize := 1;
  ShouldScale := false;

  Definition := self.Definition;
  if Definition.ref <> nil then
  begin
    ModelTileSize := Definition.ModelTileSize;
    ModelScale := Definition.ModelScale;
    ShouldScale := (ModelScale.X <> 128) and (ModelScale.Y <> 128);
    Definition.Free;
  end;

  Tile := self.LocalTile;
  HeightTile := Tile;
  Vertices := Model.Vertices;

  if ModelTileSize > 0 then
  begin
    HeightTile.X += (ModelTileSize * 64) - 64;
    HeightTile.Y += (ModelTileSize * 64) - 64;
  end;

  if ShouldScale then
  begin
    RSModel.scale(Vertices, modelScale);
  end;

  Result := Model.Bounds(Vertices, Tile.X, Tile.Y, HeightTile.GetHeight(), self.Orientation);
  Model.Free;
end;
