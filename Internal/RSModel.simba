{$include_once Static.simba}
{$include_once Structures.simba}
{$include_once RSStructures.simba}
{$include_once RSAnimationFrame.simba}
{$include_once RSAnimationSkeleton.simba}
{$include_once RSAnimation.simba}


Function RSModel.RawVertices: Array[0..2] of Array of Int32; constref;
var
  VerticesSize: SizeUInt;
  VerticesX, VerticesY, VerticesZ: Pointer;
begin
  VerticesSize := 0;
  VerticesX := RGetArray(R_EIOS, ref, VerticesSize, MODEL_VERTICESX);
  VerticesY := RGetArray(R_EIOS, ref, MODEL_VERTICESY);
  VerticesZ := RGetArray(R_EIOS, ref, MODEL_VERTICESZ);

  if (VerticesX <> nil) and (VerticesY <> nil) and (VerticesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, VerticesX, 0, VerticesSize);
    Result[1] := RGetIntArray(R_EIOS, VerticesY, 0, VerticesSize);
    Result[2] := RGetIntArray(R_EIOS, VerticesZ, 0, VerticesSize);
  end;

  RFreeObjects(R_EIOS, [VerticesX, VerticesY, VerticesZ]);
end;

Function RSModel.RawIndices: Array[0..2] of Array of Int32; constref;
var
  IndicesSize: SizeUInt;
  IndicesX, IndicesY, IndicesZ: Pointer;
begin
  IndicesSize := 0;
  IndicesX := RGetArray(R_EIOS, ref, IndicesSize, MODEL_INDICESX);
  IndicesY := RGetArray(R_EIOS, ref, MODEL_INDICESY);
  IndicesZ := RGetArray(R_EIOS, ref, MODEL_INDICESZ);

  if (IndicesX <> nil) and (IndicesY <> nil) and (IndicesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, IndicesX, 0, IndicesSize);
    Result[1] := RGetIntArray(R_EIOS, IndicesY, 0, IndicesSize);
    Result[2] := RGetIntArray(R_EIOS, IndicesZ, 0, IndicesSize);
  end;

  RFreeObjects(R_EIOS, [IndicesX, IndicesY, IndicesZ]);
end;

Function RSModel.Vertices: Array of TVector; constref;
var
  I, VerticesSize: SizeUInt;
  Vertices: Array[0..2] of Array of Int32;
begin
  Vertices := self.RawVertices;
  VerticesSize := Length(Vertices[0]);
  SetLength(Result, VerticesSize);

  for I := 0 to VerticesSize - 1 do
  begin
    Result[I].X := Vertices[0][I];
    Result[I].Y := Vertices[1][I];
    Result[I].Z := Vertices[2][I];
  end;
end;

Function RSModel.Indices: Array of TVector; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..2] of Array of Int32;
begin
  Indices := self.RawIndices;
  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].X := Indices[0][I];
    Result[I].Y := Indices[1][I];
    Result[I].Z := Indices[2][I];
  end;
end;

Function RSModel.TriangleFaces: Array of TTriangle; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..2] of Array of Int32;
  Vertices: Array[0..2] of Array of Int32;
begin
  Indices := self.RawIndices;
  Vertices := self.RawVertices;

  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].A.x := Vertices[0][Indices[0][I]];
    Result[I].A.y := Vertices[1][Indices[0][I]];
    Result[I].A.z := Vertices[2][Indices[0][I]];

    Result[I].B.x := Vertices[0][Indices[1][I]];
    Result[I].B.y := Vertices[1][Indices[1][I]];
    Result[I].B.z := Vertices[2][Indices[1][I]];

    Result[I].C.x := Vertices[0][Indices[2][I]];
    Result[I].C.y := Vertices[1][Indices[2][I]];
    Result[I].C.z := Vertices[2][Indices[2][I]];
  end;
end;

Function RSModel.Skin(Index: SizeUInt): Array of Int32; constref;
var
  Skins: Pointer;
  IndexSize, SkinsSize: SizeUInt;
  SkinsArray: Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, Index);
  RFreeObject(R_EIOS, Skins);

  if SkinsArray <> nil then
  begin
    IndexSize := RGetArraySize(R_EIOS, SkinsArray);
    if IndexSize > 0 then
    begin
      Result := RGetIntArray(R_EIOS, SkinsArray, 0, IndexSize);
    end;
  end;

  RFreeObject(R_EIOS, SkinsArray);
end;

Function RSModel.Skins: Array of Array of Int32; constref;
var
  Skins: Pointer;
  I, SkinsSize: SizeUInt;
  SkinsArray: Array of Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, 0, SkinsSize);
  RFreeObject(R_EIOS, Skins);

  SetLength(Result, SkinsSize);

  for I := 0 to SkinsSize - 1 do
  begin
    Result[I] := RGetIntArray(R_EIOS, SkinsArray[I], 0, RGetArraySize(R_EIOS, SkinsArray[I]));
  end;

  RSTypeArray(SkinsArray).Free;
end;

Function RSModel.FaceColors3: Array of Int32;
var
  Arr: Pointer;
  Size: SizeUInt;
begin
  Arr := RGetArray(R_EIOS, ref, Size, MODEL_FACECOLORS3);
  if Arr = nil then
    Exit;

  if Size = 0 then
    Exit;

  Result := RGetIntArray(R_EIOS, Arr, 0, Size);
  RFreeObject(R_EIOS, Arr);
end;

Function RSModel.FitsSingleTile: Boolean;
begin
  Result := RGetBool(R_EIOS, ref, MODEL_FITSSINGLETILE);
end;

Function RSModel.Height: Int32;
begin
  Result := RGetInt(R_EIOS, ref, RENDERABLE_MODELHEIGHT);
end;

//Function RSModel.AABB(LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
//var
//  I: Int32;
//  xMin, xMax: Int32;
//  yMin, yMax: Int32;
//  zMin, zMax: Int32;
//  SinAngle, CosAngle: Int32;
//  Vertices: Array[0..2] of Array of Int32;
//  VX, VY, VZ: Int32;
//  xMid, yMid, zMid: Int32;
//  xMidOffset, yMidOffset, zMidOffset: Int32;
//
//  Height, BottomY, xzRadius: Int32;
//  MagXZSq, Radius, Diameter: Int32;
//
//  EX, EY, EZ: Int32;
//  X1, Y1, Z1, X2, Y2, Z2: Int32;
//  Bounds: Array of TVector;
//begin
//  Vertices := self.RawVertices;
//
//  //Calculate Cylindrical Bounds
//	Height := 0;
//	BottomY := 0;
//	xzRadius := 0;
//
//  For I := 0 to High(Vertices[0]) do
//  begin
//    VX := Vertices[0][I];
//    VY := Vertices[1][I];
//    VZ := Vertices[2][I];
//
//    Height := max(Height, -VY);
//    BottomY := max(BottomY, VY);
//
//    MagXZSq := (VX * VX) + (VZ * VZ);
//    xzRadius := max(MagXZSq, xzRadius);
//  end;
//
//  xzRadius := Floor(Sqrt(xzRadius) + 0.99);
//  Radius := Floor(Sqrt((xzRadius * xzRadius) + (Height * Height)) + 0.99);
//  Diameter := Radius + Floor(Sqrt((xzRadius * xzRadius) + (BottomY * BottomY)) + 0.99);
//
//
//  //Calculate Bounding Box..
//  //Orientation := 0;
//  xMin := 0; xMax := 0;
//  yMin := 0; yMax := 0;
//  zMin := 0; zMax := 0;
//
//  SinAngle := SINE[Orientation];
//  CosAngle := COSINE[Orientation];
//
//  For I := 0 to High(Vertices[0]) do
//  begin
//    //Rotate
//    VX := Sar(((Vertices[0][I] * CosAngle) + (Vertices[2][I] * SinAngle)), 16); //X * COSINE[Orientation] + Z * SINE[Orientation] >> 16;
//    VZ := Vertices[1][I];
//    VY := Sar(((Vertices[2][I] * CosAngle) - (Vertices[0][I] * SinAngle)), 16); //Z * COSINE[Orientation] - X * SINE[Orientation] >> 16;
//
//    //Bounds
//    xMin := min(xMin, VX);
//    xMax := max(xMax, VX);
//
//    yMin := min(yMin, VY);
//    yMax := max(yMax, VY);
//
//    zMin := min(zMin, VZ);
//    zMax := max(zMax, VZ);
//  end;
//
//  xMid := (xMax + xMin) div 2;
//  yMid := (yMax + yMin) div 2;
//  zMid := (zMax + zMin) div 2;
//  xMidOffset := (xMax - xMin + 1) div 2;
//  yMidOffset := (yMax - yMin + 1) div 2;
//  zMidOffset := (zMax - zMin + 1) div 2;
//
//  xMidOffset := max(xMidOffset, 32);
//  zMidOffset := max(zMidOffset, 32);
//
//  if (self.FitsSingleTile) then
//  begin
//    xMidOffset += 8;
//    zMidOffset += 8;
//  end;
//
//  //Calculate Projection
//  X1 := xMid;
//  Y1 := zMid;
//  Z1 := yMid;
//  EX := xMidOffset;
//  EY := zMidOffset;
//  EZ := yMidOffset;
//
//  X2 := X1 + EX;
//  Y2 := Y1 + EY;
//  Z2 := Z1 + EZ;
//
//  X1 -= EX;
//  Y1 -= EY;
//  Z1 -= EZ;
//
//  Bounds := [
//      [X1, Y1, Z1], [X2, Y1, Z1], [X1, Y2, Z1], [X2, Y2, Z1],
//      [X1, Y1, Z2], [X2, Y1, Z2], [X1, Y2, Z2], [X2, Y2, Z2]
//  ];
//
//  Result := Project(Bounds, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
//end;
//
//Function RSModel.BoundingEdges(LocalTileX, LocalTileY, LocalTileHeight, Orientation: Int32): TPointArray;
//var
//  TPA: TPointArray;
//  I, J, K, MinX, MaxX, MinY, MaxY, XS, YS: Int32;
//  Indices: Array[0..2] of Array of Int32;
//  FaceColours: Array of Int32;
//  Nope: Boolean;
//begin
//  if self.FitsSingleTile then
//  begin
//    Result := self.AABB(LocalTileX, LocalTileY, LocalTileHeight, Orientation);
//    Exit;
//  end;
//
//  TPA := Project(self.Vertices, LocalTileX, LocalTileY, LocalTileHeight, Orientation);
//  Indices := self.RawIndices;
//  FaceColours := self.FaceColors3;
//
//  For I := 0 To High(Indices[0]) do
//  begin
//    if FaceColours[I] = -2 then
//      continue;
//
//    MinX := High(Int32);
//    MinY := High(Int32);
//    MaxX := Low(Int32);
//    MaxY := Low(Int32);
//    Nope := False;
//
//    For J := 0 to High(Indices) do
//    begin
//      K := Indices[J][I];
//      if K >= Length(TPA) then
//      begin
//        Nope := True;
//        break;
//      end;
//
//      XS := TPA[K].X;
//      YS := TPA[K].Y;
//      if (XS = -1) or (YS = -1) then
//      begin
//        Nope := True;
//        break;
//      end;
//
//      MinX := Min(MinX, XS);
//      MaxX := Max(MaxX, XS);
//      MinY := Min(MinY, YS);
//      MaxY := Max(MaxY, YS);
//    end;
//
//    if Nope then
//      continue;
//
//    MinX -= 5;
//    MinY -= 5;
//    MaxX += 5;
//    MaxY += 5;
//
//    if (0 > maxX) or (RSClient.ViewPortWidth < minX) or (0 > maxY) or (RSClient.ViewPortHeight < minY) then
//    begin
//      continue;
//    end;
//
//    Result += EdgeFromBox([minX, minY, maxX, maxY]);
//  end;
//
//  Result := TPABorder(Result);
//end;

Procedure RSModel.Scale(var Vertices: Array[0..2] of Array of Int32; Scales: TVector); static;
var
  I: Int32;
begin
  for I := 0 to high(Vertices[0]) do
  begin
    Vertices[0][I] := (Vertices[0][I] * Scales.X) div 128;
    Vertices[1][I] := (Vertices[1][I] * Scales.X) div 128;
    Vertices[2][I] := (Vertices[2][I] * Scales.X) div 128;
  end;
end;

Procedure RSModel.Scale(var Vertices: Array of TVector; Scales: TVector); static; overload;
var
  I: Int32;
begin
  for I := 0 to high(Vertices) do
  begin
    Vertices[I].X := (Vertices[I].X * Scales.X) div 128;
    Vertices[I].Y := (Vertices[I].Y * Scales.Y) div 128;
    Vertices[I].Z := (Vertices[I].Z * Scales.Z) div 128;
  end;
end;
