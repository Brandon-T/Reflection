{$include_once Static.simba}
{$include_once Structures.simba}
{$include_once RSStructures.simba}
{$include_once RSAnimationFrame.simba}
{$include_once RSAnimationSkeleton.simba}
{$include_once RSAnimation.simba}


Function RSModel.RawVertices: Array[0..3] of Array of Int32; constref;
var
  VerticesSize: SizeUInt;
  VerticesX, VerticesY, VerticesZ: Pointer;
begin
  VerticesSize := 0;
  VerticesX := RGetArray(R_EIOS, ref, VerticesSize, MODEL_VERTICESX);
  VerticesY := RGetArray(R_EIOS, ref, MODEL_VERTICESY);
  VerticesZ := RGetArray(R_EIOS, ref, MODEL_VERTICESZ);

  if (VerticesX <> nil) and (VerticesY <> nil) and (VerticesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, VerticesX, 0, VerticesSize);
    Result[1] := RGetIntArray(R_EIOS, VerticesY, 0, VerticesSize);
    Result[2] := RGetIntArray(R_EIOS, VerticesZ, 0, VerticesSize);
  end;

  RFreeObjects(R_EIOS, [VerticesX, VerticesY, VerticesZ]);
end;

Function RSModel.RawIndices: Array[0..3] of Array of Int32; constref;
var
  IndicesSize: SizeUInt;
  IndicesX, IndicesY, IndicesZ: Pointer;
begin
  IndicesSize := 0;
  IndicesX := RGetArray(R_EIOS, ref, IndicesSize, MODEL_INDICESX);
  IndicesY := RGetArray(R_EIOS, ref, MODEL_INDICESY);
  IndicesZ := RGetArray(R_EIOS, ref, MODEL_INDICESZ);

  if (IndicesX <> nil) and (IndicesY <> nil) and (IndicesZ <> nil) then
  begin
    Result[0] := RGetIntArray(R_EIOS, IndicesX, 0, IndicesSize);
    Result[1] := RGetIntArray(R_EIOS, IndicesY, 0, IndicesSize);
    Result[2] := RGetIntArray(R_EIOS, IndicesZ, 0, IndicesSize);
  end;

  RFreeObjects(R_EIOS, [IndicesX, IndicesY, IndicesZ]);
end;

Function RSModel.Vertices: Array of TVector; constref;
var
  I, VerticesSize: SizeUInt;
  Vertices: Array[0..3] of Array of Int32;
begin
  Vertices := self.RawVertices;
  VerticesSize := Length(Vertices[0]);
  SetLength(Result, VerticesSize);

  for I := 0 to VerticesSize - 1 do
  begin
    Result[I].X := Vertices[0][I];
    Result[I].Y := Vertices[1][I];
    Result[I].Z := Vertices[2][I];
  end;
end;

Function RSModel.Indices: Array of TVector; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..3] of Array of Int32;
begin
  Indices := self.RawIndices;
  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].X := Indices[0][I];
    Result[I].Y := Indices[1][I];
    Result[I].Z := Indices[2][I];
  end;
end;

Function RSModel.TriangleFaces: Array of TTriangle; constref;
var
  I, IndicesSize: SizeUInt;
  Indices: Array[0..3] of Array of Int32;
  Vertices: Array[0..3] of Array of Int32;
begin
  Indices := self.RawIndices;
  Vertices := self.RawVertices;

  IndicesSize := Length(Indices[0]);
  SetLength(Result, IndicesSize);

  for I := 0 to IndicesSize - 1 do
  begin
    Result[I].A.x := Vertices[0][Indices[0][I]];
    Result[I].A.y := Vertices[1][Indices[0][I]];
    Result[I].A.z := Vertices[2][Indices[0][I]];

    Result[I].B.x := Vertices[0][Indices[1][I]];
    Result[I].B.y := Vertices[1][Indices[1][I]];
    Result[I].B.z := Vertices[2][Indices[1][I]];

    Result[I].C.x := Vertices[0][Indices[2][I]];
    Result[I].C.y := Vertices[1][Indices[2][I]];
    Result[I].C.z := Vertices[2][Indices[2][I]];
  end;
end;

Function RSModel.Skin(Index: SizeUInt): Array of Int32; constref;
var
  Skins: Pointer;
  IndexSize, SkinsSize: SizeUInt;
  SkinsArray: Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, Index);
  RFreeObject(R_EIOS, Skins);

  if SkinsArray <> nil then
  begin
    IndexSize := RGetArraySize(R_EIOS, SkinsArray);
    if IndexSize > 0 then
    begin
      Result := RGetIntArray(R_EIOS, SkinsArray, 0, IndexSize);
    end;
  end;

  RFreeObject(R_EIOS, SkinsArray);
end;

Function RSModel.Skins: Array of Array of Int32; constref;
var
  Skins: Pointer;
  I, SkinsSize: SizeUInt;
  SkinsArray: Array of Pointer;
begin
  Skins := RGetArray(R_EIOS, ref, SkinsSize, MODEL_SKINS);
  if Skins = nil then
    Exit;

  SkinsArray := RGetObjectArray(R_EIOS, Skins, 0, SkinsSize);
  RFreeObject(R_EIOS, Skins);

  SetLength(Result, SkinsSize);

  for I := 0 to SkinsSize - 1 do
  begin
    Result[I] := RGetIntArray(R_EIOS, SkinsArray[I], 0, RGetArraySize(R_EIOS, SkinsArray[I]));
  end;

  RSTypeArray(SkinsArray).Free;
end;

Function RSModel.FitsSingleTile: Boolean;
begin
  Result := RGetBool(R_EIOS, ref, MODEL_FITSSINGLETILE);
end;

Function RSModel.Height: Int32;
begin
  Result := RGetInt(R_EIOS, ref, RENDERABLE_MODELHEIGHT);
end;

Function RSModel.Bounds(LocalX, LocalY, LocalZ: Int32): Array of TVector;
var
  I: Int32;
  Orientation: Int32;
  xMin, xMax: Int32;
  yMin, yMax: Int32;
  zMin, zMax: Int32;
  SinAngle, CosAngle: Int32;
  Vertices: Array[0..3] of Array of Int32;
  VX, VY, VZ: Int32;
  xMid, yMid, zMid: Int32;
  xMidOffset, yMidOffset, zMidOffset: Int32;

  Height, BottomY, xzRadius: Int32;
  MagXZSq, Radius, Diameter: Int32;

  EX, EY, EZ: Int32;
  X1, Y1, Z1, X2, Y2, Z2: Int32;
begin
  Vertices := self.RawVertices;

  //Calculate Cylindrical Bounds
	Height := 0;
	BottomY := 0;
	xzRadius := 0;

  For I := 0 to Length(Vertices) - 1 do
  begin
    VX := Vertices[0][I];
    VY := Vertices[1][I];
    VZ := Vertices[2][I];

    Height := max(Height, -VY);
    BottomY := max(BottomY, VY);

    MagXZSq := (VX * VX) + (VZ * VZ);
    xzRadius := max(MagXZSq, xzRadius);
  end;

  xzRadius := Floor(Sqrt(xzRadius + 0.99));
  Radius := Floor(Sqrt(((xzRadius * xzRadius) + (Height * Height)) + 0.99));
  Diameter := Radius + Floor(Sqrt(((xzRadius * xzRadius) + (BottomY * BottomY)) + 0.99));


  //Calculate Bounding Box..
  Orientation := 0;
  xMin := 0; xMax := 0;
  yMin := 0; yMax := 0;
  zMin := 0; zMax := 0;

  SinAngle := SINE[Orientation];
  CosAngle := COSINE[Orientation];

  For I := 0 to Length(Vertices) - 1 do
  begin
    //Rotate
    VX := Sar(((Vertices[0][I] * CosAngle) + (Vertices[2][I] * SinAngle)), 16); //X * COSINE[Orientation] + Z * SINE[Orientation] >> 16;
    VY := Vertices[1][I];
    VZ := Sar(((Vertices[2][I] * COSINE[Orientation]) - (Vertices[0][I] * SINE[Orientation])), 16); //Z * COSINE[Orientation] - X * SINE[Orientation] >> 16;

    //Bounds
    xMin := min(xMin, VX);
    xMax := max(xMax, VX);

    yMin := min(yMin, VY);
    yMax := max(yMax, VY);

    zMin := min(zMin, VZ);
    zMax := max(zMax, VZ);
  end;

  xMid := (xMax + xMin) div 2;
  yMid := (yMax + yMin) div 2;
  zMid := (zMax + zMin) div 2;
  xMidOffset := (xMax - xMin + 1) div 2;
  yMidOffset := (yMax - yMin + 1) div 2;
  zMidOffset := (zMax - zMin + 1) div 2;

  xMidOffset := max(xMidOffset, 32);
  zMidOffset := max(zMidOffset, 32);

  if (self.FitsSingleTile) then
  begin
    xMidOffset += 8;
    zMidOffset += 8;
  end;

  //Calculate Projection
  X1 := xMid;
  Y1 := zMid;
  Z1 := yMid;
  EX := xMidOffset;
  EY := zMidOffset;
  EZ := yMidOffset;

  X2 := X1 + EX;
  Y2 := Y1 + EY;
  Z2 := Z1 + EZ;

  X1 -= EX;
  Y1 -= EY;
  Z1 -= EZ;

  Result := [
      [X1, Y1, Z1], [X2, Y1, Z1], [X1, Y2, Z1], [X2, Y2, Z1],
      [X1, Y1, Z2], [X2, Y1, Z2], [X1, Y2, Z2], [X2, Y2, Z2]
  ];
end;
