{$include_once Internal/Reflection.simba}
{$include_once Constants.simba}
{$include_once Menu.simba}
{$include_once Inventory.simba}
{$include_once Mouse.simba}
{$include_once Timing.simba}

const
  R_BANK_ITEM_SLOT_INDEX = 11;

  VARBIT_CURRENT_BANK_TAB = 4150;
  VARBIT_BANK_TAB_COUNT_1 = 4171;
	VARBIT_BANK_TAB_COUNT_2 = 4172;
	VARBIT_BANK_TAB_COUNT_3 = 4173;
	VARBIT_BANK_TAB_COUNT_4 = 4174;
	VARBIT_BANK_TAB_COUNT_5 = 4175;
	VARBIT_BANK_TAB_COUNT_6 = 4176;
	VARBIT_BANK_TAB_COUNT_7 = 4177;
	VARBIT_BANK_TAB_COUNT_8 = 4178;
	VARBIT_BANK_TAB_COUNT_9 = 4179;

type
  TRSBankItem = record
    ID: Int32;
    Amount: Int32;
    Slot: Int32;
    Tab: Int32;
    Name: String;
    Bounds: TBox;
  end;

{$scopedenums on}
type
  TRSBankScroll = (SCROLLWHEEL, SCROLLBAR, SCROLLARROWS);
  TRSBankQuantity = (ONE, FIVE, TEN, X, ALL);
{$scopedenums off}

Function R_BankScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_BANK_CONTAINER.Group, R_BANK_CONTAINER.Child);
end;

Function R_WaitBankScreen(timeout: UInt32): Boolean;
begin
  Result := R_WaitFunction(timeout, 50, @R_BankScreen);
end;

Function R_PinScreen: Boolean;
begin
  Result := RSWidget.IsValid(R_BANK_PIN_CONTAINER.Group, R_BANK_PIN_CONTAINER.Child);
end;

Function R_WaitPinScreen(timeout: UInt32): Boolean;
begin
  Result := R_WaitFunction(timeout, 50, @R_PinScreen);
end;

Function R_DepositBox: Boolean;
begin
  Result := RSWidget.IsValid(R_DEPOSITBOX_CONTAINER.Group, R_DEPOSITBOX_CONTAINER.Child);
end;

Function R_WaitDepositBox(timeout: UInt32): Boolean;
begin
  Result := R_WaitFunction(timeout, 50, @R_DepositBox);
end;

Function R_CurrentBankTab: Int32;
begin
  Result := RSClient.getVarbit(VARBIT_CURRENT_BANK_TAB);
end;

Function R_BankTabCount(Index: Int32): Int32;
var
  TabVarbits: Array of Int32;
begin
  if (Index < 0) or (Index > 8) then
    Exit(-1);

  TabVarbits := [VARBIT_BANK_TAB_COUNT_1, VARBIT_BANK_TAB_COUNT_2,
                 VARBIT_BANK_TAB_COUNT_3, VARBIT_BANK_TAB_COUNT_4,
                 VARBIT_BANK_TAB_COUNT_5, VARBIT_BANK_TAB_COUNT_6,
                 VARBIT_BANK_TAB_COUNT_7, VARBIT_BANK_TAB_COUNT_8,
                 VARBIT_BANK_TAB_COUNT_9];

  Result := RSClient.getVarbit(TabVarbits[Index]);
end;

Function R_BankSlotToTab(Slot: Int32): Int32;
var
  I: Int32;
  TabCount, Total: Int32;
begin
  Result := 0;
  TabCount := 0;

  for I := 0 to 8 do
  begin
    TabCount := R_BankTabCount(I);
    if TabCount = 0 then
      continue;

    Total += TabCount;
    if Slot < Total then
      Exit(I + 1);
  end;
end;

Function R_BankSlotToTabSlot(Slot: Int32): Int32;
var
  I: Int32;
  TabCount, Total: Int32;
begin
  Result := 0;
  TabCount := 0;

  for I := 0 to 8 do
  begin
    TabCount := R_BankTabCount(I);
    if TabCount = 0 then
      continue;

    Total += TabCount;
    if Slot < Total then
    begin
      Exit(TabCount - (Total - Slot)); //Exit(0 - (Total - Slot - TabCount));
    end;
  end;
  Result := Slot - Total;
end;

Function R_SelectBankTab(Index: Int32): Boolean;
var
  TabWidget: RSWidget;
  T: Timer;
begin
  if (Index < 0) or (Index > 8) then
    Exit(False);

  if not R_BankScreen then
    Exit;

  if R_CurrentBankTab = Index then
    Exit(True);

  TabWidget := RSWidget.Get(R_BANK_TAB_CONTAINER.Group, R_BANK_TAB_CONTAINER.Child, Index);
  if TabWidget.ref = nil then
    Exit(False);

  Mouse.Click(TabWidget.Bounds, MOUSE_LEFT);
  TabWidget.Free;

  T.Start;
  while R_CurrentBankTab <> Index do
  begin
    if T.ElapsedTime > 1000 then
      Exit(False);
    Wait(50, Random(50));
  end;
  Result := R_CurrentBankTab = Index;
end;

Function R_BankSlotVisible(Index: Int32): Boolean;
var
  TabContainer: RSWidget;
  TabWidget: RSWidget;
  BankBounds: TBox;
begin
  if not R_BankScreen then
    Exit(False);

  TabContainer := RSWidget.Get(R_BANK_ITEM_CONTAINER.Group, R_BANK_ITEM_CONTAINER.Child);
  if TabContainer.ref = nil then
    Exit(False);

  TabWidget := TabContainer.Child(Index);
  if TabWidget.ref = nil then
  begin
    TabContainer.Free;
    Exit(False);
  end;

  BankBounds := TabContainer.Bounds;
  TabContainer.Free;

  Result := BankBounds.Contains(TabContainer.Bounds);
  TabWidget.Free;
end;

Function R_BankSlotToBox(Index: Int32): TBox;
var
  ItemContainer, Slot: RSWidget;
begin
  if not R_BankScreen then
    Exit(Box(-1, -1, -1, -1));

  ItemContainer := RSWidget.Get(R_BANK_ITEM_CONTAINER.Group, R_BANK_ITEM_CONTAINER.Child, Index);
  if ItemContainer.ref = nil then
    Exit(Box(-1, -1, -1, -1));

  Result := ItemContainer.Bounds;
  ItemContainer.Free;
end;

Function R_ScrollToBankSlot(Index: Int32; ScrollType: TRSBankScroll = TRSBankScroll.SCROLLWHEEL): Boolean;
var
  ScrollBar, ScrollArrow, ItemContainer: RSWidget;
  ItemContainerBounds: TBox;
  T: Timer;
  Down: Boolean;
  P: TPoint;
begin
  ItemContainer := RSWidget.Get(R_BANK_CONTENT_CONTAINER.Group, R_BANK_CONTENT_CONTAINER.Child);
  if ItemContainer.ref = nil then
    Exit(False);

  ItemContainerBounds := ItemContainer.Bounds;
  ItemContainer.Free;

  if ItemContainerBounds.Contains(R_BankSlotToBox(Index)) then
    Exit(True);

  //Gain focus on the interface
  Down := ItemContainerBounds.Middle.Y < R_BankSlotToBox(Index).Middle.Y;

  //Scroll the interface using the mouse-wheel
  if ScrollType = TRSBankScroll.SCROLLWHEEL then
  begin
    Mouse.Move(ItemContainerBounds);

    T.Start;
    while not ItemContainerBounds.Contains(R_BankSlotToBox(Index)) do
    begin
      if T.ElapsedTime > 5000 then
        Exit(False);

      Mouse.Scroll(3, Down);
    end;

    Exit(ItemContainerBounds.Contains(R_BankSlotToBox(Index).Middle));
  end;

  //Scroll the interface using the scroll-bar
  if ScrollType = TRSBankScroll.SCROLLBAR then
  begin
    ScrollBar := RSWidget.Get(R_BANK_SCROLLBAR_BAR.Group, R_BANK_SCROLLBAR_BAR.Child, R_BANK_SCROLLBAR_BAR.Index);
    if ScrollBar.ref = nil then
      Exit(False);

    Mouse.Move(ScrollBar.Bounds);
    Mouse.Click(MOUSE_LEFT);
    Mouse.Hold(MOUSE_LEFT);
    ScrollBar.Free;

    T.Start;
    while not ItemContainerBounds.Contains(R_BankSlotToBox(Index)) do
    begin
      if T.ElapsedTime > 5000 then
      begin
        Mouse.Release(MOUSE_LEFT);
        Exit(False);
      end;

      P := Mouse.GetPosition;
      if Down then
      begin
        Mouse.Move(P.X + RandomRange(-3, 3), P.Y + RandomRange(5, 10));
      end else
        begin
          Mouse.Move(P.X + RandomRange(-3, 3), P.Y - RandomRange(5, 10));
        end;
    end;

    Mouse.Release(MOUSE_LEFT);
    Exit(ItemContainerBounds.Contains(R_BankSlotToBox(Index).Middle));
  end;

  //Scroll the interface using the arrows
  if ScrollType = TRSBankScroll.SCROLLARROWS then
  begin
    if Down then
      ScrollArrow := RSWidget.Get(R_BANK_SCROLLBAR_BAR_DOWN.Group, R_BANK_SCROLLBAR_BAR_DOWN.Child, R_BANK_SCROLLBAR_BAR_DOWN.Index)
    else
      ScrollArrow := RSWidget.Get(R_BANK_SCROLLBAR_BAR_UP.Group, R_BANK_SCROLLBAR_BAR_UP.Child, R_BANK_SCROLLBAR_BAR_UP.Index);

    if ScrollArrow.ref = nil then
      Exit(False);

    Mouse.Move(ScrollArrow.Bounds);
    Mouse.Click(MOUSE_LEFT);
    Mouse.Hold(MOUSE_LEFT);
    ScrollArrow.Free;

    T.Start;
    while not ItemContainerBounds.Contains(R_BankSlotToBox(Index)) do
    begin
      //It can take a long time to get from slot 0 to 800 (worst case) with the scroll arrows!
      //Ideally, we should calculate the distance from the current slot to the target slot
      //and determine how much time is necessary to get there based on scroll velocity..
      if T.ElapsedTime > 30000 then
      begin
        Mouse.Release(MOUSE_LEFT);
        Exit(False);
      end;
    end;

    Mouse.Release(MOUSE_LEFT);
    Exit(ItemContainerBounds.Contains(R_BankSlotToBox(Index).Middle));
  end;
end;

Function R_GetAllBankItems: Array of TRSBankItem;
var
  BankItemContainer, Child: RSWidget;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  I, J: Int32;
  Garbage: RSTypeArray;
begin
  if not R_BankScreen then
    Exit;

  BankItemContainer := RSWidget.Get(R_BANK_ITEM_CONTAINER.Group, R_BANK_ITEM_CONTAINER.Child);
  if BankItemContainer.ref = nil then
    Exit;

  Garbage += BankItemContainer;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    Garbage += ItemNodeCache;
    ItemNode.ref := ItemNodeCache.GetObject(95).ref;

    if ItemNode.ref <> nil then
    begin
      Garbage += ItemNode;
      ItemIDs := ItemNode.ItemIDs;
      ItemQuantities := ItemNode.ItemQuantities;
      SetLength(Result, Length(ItemIDs));

      for I := 0 to high(ItemIDs) do
      begin
        Child := BankItemContainer.Child(I);
        if Child.ref <> nil then
        begin
          Garbage += Child;
          Result[J].ID := ItemIDs[I];
          Result[J].Amount := ItemQuantities[I];
          Result[J].Slot := I;
          Result[J].Tab := R_BankSlotToTab(I);
          Result[J].Name := Child.Name;
          Result[J].Bounds := Child.Bounds;
          Inc(J);
        end;
      end;
    end;
  end;

  SetLength(Result, J);
  Garbage.Free;
end;

Function R_FindBankItem(ID: Int32): TRSBankItem;
var
  BankItemContainer, Child: RSWidget;
  ItemNodeCache: RSHashTable;
  ItemNode: RSItemNode;
  ItemIDs, ItemQuantities: Array of Int32;
  I: Int32;
  Garbage: RSTypeArray;
begin
  Result.ID := -1;
  Result.Amount := -1;
  Result.Slot := -1;
  Result.Tab := -1;

  if not R_BankScreen then
    Exit;

  BankItemContainer := RSWidget.Get(R_BANK_ITEM_CONTAINER.Group, R_BANK_ITEM_CONTAINER.Child);
  if BankItemContainer.ref = nil then
    Exit;

  Garbage += BankItemContainer;
  ItemNodeCache := RSClient.ItemNodeCache;
  if ItemNodeCache.ref <> nil then
  begin
    Garbage += ItemNodeCache;
    ItemNode.ref := ItemNodeCache.GetObject(95).ref;

    if ItemNode.ref <> nil then
    begin
      Garbage += ItemNode;
      ItemIDs := ItemNode.ItemIDs;
      ItemQuantities := ItemNode.ItemQuantities;

      for I := 0 to high(ItemIDs) do
      begin
        if ItemIDs[I] = ID then
        begin
          Child := BankItemContainer.Child(I);
          if Child.ref <> nil then
          begin
            Garbage += Child;
            Result.ID := ItemIDs[I];
            Result.Amount := ItemQuantities[I];
            Result.Slot := I;
            Result.Tab := R_BankSlotToTab(I);
            Result.Name := Child.Name;
            Result.Bounds := Child.Bounds;
            break;
          end;
        end;
      end;
    end;
  end;

  Garbage.Free;
end;

Function R_IsBankSlotVisible(Index: Int32): Boolean;
begin
  //R_BANK_ITEM_CONTAINER
end;

Function R_DepositAll_Items: Boolean;
var
  Widget: RSWidget;
begin
  if not R_BankScreen then
    Exit;

  Widget := RSWidget.Get(R_BANK_DEPOSIT_INVENTORY_ICON.Group, R_BANK_DEPOSIT_INVENTORY_ICON.Child);
  if Widget.ref = nil then
    Exit(False);

  Mouse.Move(Widget.Bounds);
  Wait(50 + RandomRange(0, 50));
  Mouse.Click(MOUSE_LEFT);
  Widget.Free;
  Result := True;
end;

Function R_DepositAll_Equipment: Boolean;
var
  Widget: RSWidget;
begin
  if not R_BankScreen then
    Exit;

  Widget := RSWidget.Get(R_BANK_DEPOSIT_EQUIPMENT_ICON.Group, R_BANK_DEPOSIT_EQUIPMENT_ICON.Child);
  if Widget.ref = nil then
    Exit(False);

  Mouse.Move(Widget.Bounds);
  Wait(50 + RandomRange(0, 50));
  Mouse.Click(MOUSE_LEFT);
  Widget.Free;
  Result := True;
end;

Function R_DepositSlot(Index: Int32; All: Boolean = False): Boolean;
var
  InvItem: TRSInventoryItem;
begin
  if not R_BankScreen then
    Exit;

  InvItem := R_GetInventorySlotItem(Index);
  if InvItem.ID <> -1 then
  begin
    if All then
    begin
      Mouse.Click(InvItem.Bounds, MOUSE_RIGHT);
      Wait(50 + RandomRange(0, 50));
      Exit(R_ChooseOptions(['-All']));
    end;

    Mouse.Move(InvItem.Bounds);
    Wait(50 + RandomRange(0, 50));
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;
end;

Function R_WithdrawItem(ID: Int32; Amount: Int32 = 0): Boolean;
var
  Item: TRSBankItem;
  InputFull: RSWidget;
  Retries: Int32;
begin
  if not R_BankScreen then
    Exit(False);

  Item := R_FindBankItem(ID);
  if Item.ID = -1 then
    Exit(False);

  if Item.Slot = 0 then
  begin
    if not R_ScrollToBankSlot(Item.Slot, TRSBankScroll.SCROLLWHEEL) then
      Exit(False);
  end else
    begin
      if R_CurrentBankTab <> Item.Tab then
      begin
        if not R_SelectBankTab(Item.Tab) then
          Exit(False);
      end;
    end;

  Item := R_FindBankItem(ID);
  if Item.ID = -1 then
    Exit(False);

  if Amount = 0 then
  begin
    Mouse.Click(Item.Bounds, MOUSE_RIGHT);
    Wait(50 + RandomRange(50, 100));
    Exit(R_ChooseOptions(['Withdraw-All']))
  end;

  if Amount = -1 then
  begin
    Mouse.Click(Item.Bounds, MOUSE_RIGHT);
    Wait(50 + RandomRange(50, 100));
    Exit(R_ChooseOptions(['Withdraw-All-but-1']));
  end;

  Mouse.Move(Item.Bounds);
  Wait(50 + RandomRange(50, 100));
  if R_WaitUptext(['Withdraw-' + IntToStr(Amount)], True, RandomRange(200, 300)) then
  begin
    Mouse.Click(Item.Bounds, MOUSE_LEFT);
    Exit(True);
  end;

  Mouse.Click(Item.Bounds, MOUSE_RIGHT);
  Wait(50 + RandomRange(50, 100));
  if R_ChooseOptions(['Withdraw-' + IntToStr(Amount)]) then
  begin
    Exit(True);
  end;

  if R_ChooseOptions(['Withdraw-X']) then
  begin
    InputFull := RSWidget.Get(R_CHATBOX_INPUT_FULL.Group, R_CHATBOX_INPUT_FULL.Child);
    if InputFull.ref = nil then
      Exit(False);

    while Retries < 3 do
    begin
      if InputFull.Text <> '*' then
      begin
        Keyboard.KeyDown(VK_BACK);
        while InputFull.Text <> '*' do
        begin
          Wait(50 + RandomRange(50, 100));
        end;
        Keyboard.KeyUp(VK_BACK);
      end;

      Keyboard.Send(IntToStr(Amount));
      Result := InputFull.Text = IntToStr(Amount) + '*';
      if Result then
      begin
        Keyboard.PressKey(VK_ENTER);
        Exit(True);
      end;

      Inc(Retries);
    end;
  end;
end;

Function R_SetBankWithdrawMode(Noted: Boolean): Boolean;
var
  Button: RSWidget;
begin
  if not R_BankScreen then
    Exit(False);

  if Noted then
    Button := RSWidget.Get(R_BANK_WITHDRAW_NOTE.Group, R_BANK_WITHDRAW_NOTE.Child)
  else
    Button := RSWidget.Get(R_BANK_WITHDRAW_ITEM.Group, R_BANK_WITHDRAW_ITEM.Child);

  if Button.ref = nil then
    Exit(False);

  Mouse.Click(Button.Bounds, MOUSE_LEFT);
  Button.Free;

  Result := True; //TODO: Check if the mode actually changed by checking button spriteId..
end;

Function R_SetBankQuantityMode(Mode: TRSBankQuantity): Boolean;
var
  Button: RSWidget;
begin
  if not R_BankScreen then
    Exit(False);

  case Mode of
    TRSBankQuantity.ONE:  begin Button := RSWidget.Get(R_BANK_QUANTITY_1.Group, R_BANK_QUANTITY_1.Child) end;
    TRSBankQuantity.FIVE: begin Button := RSWidget.Get(R_BANK_QUANTITY_5.Group, R_BANK_QUANTITY_5.Child) end;
    TRSBankQuantity.TEN:  begin Button := RSWidget.Get(R_BANK_QUANTITY_10.Group, R_BANK_QUANTITY_10.Child) end;
    TRSBankQuantity.X:    begin Button := RSWidget.Get(R_BANK_QUANTITY_X.Group, R_BANK_QUANTITY_X.Child) end;
    TRSBankQuantity.ALL:  begin Button := RSWidget.Get(R_BANK_QUANTITY_ALL.Group, R_BANK_QUANTITY_ALL.Child) end;
  end;

  if Button.ref = nil then
    Exit(False);

  Mouse.Click(Button.Bounds, MOUSE_LEFT);
  Button.Free;

  Result := True; //TODO: Check if the mode actually changed by checking button spriteId..
end;

Function R_BankScreen_Close: Boolean;
var
  Widget: RSWidget;
begin
  if not R_BankScreen then
    Exit(True);

  Widget := RSWidget.Get(R_BANK_CLOSE.Group, R_BANK_CLOSE.Child, R_BANK_CLOSE.Index);

  if Widget.ref <> nil then
  begin
    Mouse.Click(Widget.Bounds, MOUSE_LEFT);
    Widget.Free;
    Wait(50 + RandomRange(0, 50));
    Result := not R_BankScreen;
  end;
end;    

